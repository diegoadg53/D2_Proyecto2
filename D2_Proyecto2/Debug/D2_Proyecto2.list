
D2_Proyecto2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dff8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d59c  0800e1c8  0800e1c8  0000f1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b764  0801b764  00023cb4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b764  0801b764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b76c  0801b76c  00023cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b76c  0801b76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b770  0801b770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00006cb4  20000000  0801b774  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ef0  20006cb4  08022428  00023cb4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009ba4  08022428  00024ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023cb4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012766  00000000  00000000  00023ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f71  00000000  00000000  0003644a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000393c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c06  00000000  00000000  0003a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002652a  00000000  00000000  0003af6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d7d  00000000  00000000  00061498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddff2  00000000  00000000  0007a215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0015824c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20006cb4 	.word	0x20006cb4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e1b0 	.word	0x0800e1b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20006cb8 	.word	0x20006cb8
 800020c:	0800e1b0 	.word	0x0800e1b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	@ 0x40
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <SELECT+0x18>)
 80005e6:	f007 fb49 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f006 f89e 	bl	800672c <HAL_Delay>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020400 	.word	0x40020400

080005f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	@ 0x40
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <DESELECT+0x18>)
 8000602:	f007 fb3b 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f006 f890 	bl	800672c <HAL_Delay>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020400 	.word	0x40020400

08000614 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800061e:	bf00      	nop
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <SPI_TxByte+0x30>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b02      	cmp	r3, #2
 800062c:	d1f8      	bne.n	8000620 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800062e:	1df9      	adds	r1, r7, #7
 8000630:	2364      	movs	r3, #100	@ 0x64
 8000632:	2201      	movs	r2, #1
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <SPI_TxByte+0x30>)
 8000636:	f008 f9ac 	bl	8008992 <HAL_SPI_Transmit>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20008d90 	.word	0x20008d90

08000648 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000654:	bf00      	nop
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <SPI_TxBuffer+0x30>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	2b02      	cmp	r3, #2
 8000662:	d1f8      	bne.n	8000656 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	4803      	ldr	r0, [pc, #12]	@ (8000678 <SPI_TxBuffer+0x30>)
 800066c:	f008 f991 	bl	8008992 <HAL_SPI_Transmit>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20008d90 	.word	0x20008d90

0800067c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000682:	23ff      	movs	r3, #255	@ 0xff
 8000684:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000686:	bf00      	nop
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <SPI_RxByte+0x34>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	2b02      	cmp	r3, #2
 8000694:	d1f8      	bne.n	8000688 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000696:	1dba      	adds	r2, r7, #6
 8000698:	1df9      	adds	r1, r7, #7
 800069a:	2364      	movs	r3, #100	@ 0x64
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <SPI_RxByte+0x34>)
 80006a2:	f008 faba 	bl	8008c1a <HAL_SPI_TransmitReceive>

	return data;
 80006a6:	79bb      	ldrb	r3, [r7, #6]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20008d90 	.word	0x20008d90

080006b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006bc:	f7ff ffde 	bl	800067c <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	701a      	strb	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <SD_ReadyWait+0x30>)
 80006d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006dc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006de:	f7ff ffcd 	bl	800067c <SPI_RxByte>
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d003      	beq.n	80006f4 <SD_ReadyWait+0x24>
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <SD_ReadyWait+0x30>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f4      	bne.n	80006de <SD_ReadyWait+0xe>

	return res;
 80006f4:	79fb      	ldrb	r3, [r7, #7]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20006cd2 	.word	0x20006cd2

08000704 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800070a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800070e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000710:	f7ff ff72 	bl	80005f8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	e005      	b.n	8000726 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800071a:	20ff      	movs	r0, #255	@ 0xff
 800071c:	f7ff ff7a 	bl	8000614 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	3301      	adds	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2b09      	cmp	r3, #9
 800072a:	ddf6      	ble.n	800071a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800072c:	f7ff ff56 	bl	80005dc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000730:	2340      	movs	r3, #64	@ 0x40
 8000732:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000744:	2395      	movs	r3, #149	@ 0x95
 8000746:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000748:	463b      	mov	r3, r7
 800074a:	2106      	movs	r1, #6
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff7b 	bl	8000648 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000752:	e002      	b.n	800075a <SD_PowerOn+0x56>
	{
		cnt--;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3b01      	subs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800075a:	f7ff ff8f 	bl	800067c <SPI_RxByte>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d002      	beq.n	800076a <SD_PowerOn+0x66>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <SD_PowerOn+0x50>
	}

	DESELECT();
 800076a:	f7ff ff45 	bl	80005f8 <DESELECT>
	SPI_TxByte(0XFF);
 800076e:	20ff      	movs	r0, #255	@ 0xff
 8000770:	f7ff ff50 	bl	8000614 <SPI_TxByte>

	PowerFlag = 1;
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <SD_PowerOn+0x80>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20006cd5 	.word	0x20006cd5

08000788 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <SD_PowerOff+0x14>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	20006cd5 	.word	0x20006cd5

080007a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <SD_CheckPower+0x14>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20006cd5 	.word	0x20006cd5

080007b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <SD_RxDataBlock+0x58>)
 80007c4:	22c8      	movs	r2, #200	@ 0xc8
 80007c6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007c8:	f7ff ff58 	bl	800067c <SPI_RxByte>
 80007cc:	4603      	mov	r3, r0
 80007ce:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	2bff      	cmp	r3, #255	@ 0xff
 80007d4:	d103      	bne.n	80007de <SD_RxDataBlock+0x26>
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <SD_RxDataBlock+0x58>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f4      	bne.n	80007c8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007e2:	d001      	beq.n	80007e8 <SD_RxDataBlock+0x30>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e00f      	b.n	8000808 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff60 	bl	80006b4 <SPI_RxBytePtr>
	} while(len--);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	603a      	str	r2, [r7, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f4      	bne.n	80007e8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007fe:	f7ff ff3d 	bl	800067c <SPI_RxByte>
	SPI_RxByte();
 8000802:	f7ff ff3b 	bl	800067c <SPI_RxByte>

	return TRUE;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20006cd0 	.word	0x20006cd0

08000814 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000824:	f7ff ff54 	bl	80006d0 <SD_ReadyWait>
 8000828:	4603      	mov	r3, r0
 800082a:	2bff      	cmp	r3, #255	@ 0xff
 800082c:	d001      	beq.n	8000832 <SD_TxDataBlock+0x1e>
 800082e:	2300      	movs	r3, #0
 8000830:	e02f      	b.n	8000892 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff feed 	bl	8000614 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2bfd      	cmp	r3, #253	@ 0xfd
 800083e:	d020      	beq.n	8000882 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff feff 	bl	8000648 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800084a:	f7ff ff17 	bl	800067c <SPI_RxByte>
		SPI_RxByte();
 800084e:	f7ff ff15 	bl	800067c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000852:	e00b      	b.n	800086c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000854:	f7ff ff12 	bl	800067c <SPI_RxByte>
 8000858:	4603      	mov	r3, r0
 800085a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	2b05      	cmp	r3, #5
 8000864:	d006      	beq.n	8000874 <SD_TxDataBlock+0x60>
			i++;
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	3301      	adds	r3, #1
 800086a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	2b40      	cmp	r3, #64	@ 0x40
 8000870:	d9f0      	bls.n	8000854 <SD_TxDataBlock+0x40>
 8000872:	e000      	b.n	8000876 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000874:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000876:	bf00      	nop
 8000878:	f7ff ff00 	bl	800067c <SPI_RxByte>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0fa      	beq.n	8000878 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	f003 031f 	and.w	r3, r3, #31
 8000888:	2b05      	cmp	r3, #5
 800088a:	d101      	bne.n	8000890 <SD_TxDataBlock+0x7c>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	6039      	str	r1, [r7, #0]
 80008a4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008a6:	f7ff ff13 	bl	80006d0 <SD_ReadyWait>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2bff      	cmp	r3, #255	@ 0xff
 80008ae:	d001      	beq.n	80008b4 <SD_SendCmd+0x1a>
 80008b0:	23ff      	movs	r3, #255	@ 0xff
 80008b2:	e042      	b.n	800093a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff feac 	bl	8000614 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	0e1b      	lsrs	r3, r3, #24
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fea6 	bl	8000614 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fea0 	bl	8000614 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe9a 	bl	8000614 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe95 	bl	8000614 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b40      	cmp	r3, #64	@ 0x40
 80008ee:	d102      	bne.n	80008f6 <SD_SendCmd+0x5c>
 80008f0:	2395      	movs	r3, #149	@ 0x95
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e007      	b.n	8000906 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b48      	cmp	r3, #72	@ 0x48
 80008fa:	d102      	bne.n	8000902 <SD_SendCmd+0x68>
 80008fc:	2387      	movs	r3, #135	@ 0x87
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e001      	b.n	8000906 <SD_SendCmd+0x6c>
	else crc = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe83 	bl	8000614 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b4c      	cmp	r3, #76	@ 0x4c
 8000912:	d101      	bne.n	8000918 <SD_SendCmd+0x7e>
 8000914:	f7ff feb2 	bl	800067c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000918:	230a      	movs	r3, #10
 800091a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800091c:	f7ff feae 	bl	800067c <SPI_RxByte>
 8000920:	4603      	mov	r3, r0
 8000922:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000924:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000928:	2b00      	cmp	r3, #0
 800092a:	da05      	bge.n	8000938 <SD_SendCmd+0x9e>
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	3b01      	subs	r3, #1
 8000930:	73bb      	strb	r3, [r7, #14]
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1f1      	bne.n	800091c <SD_SendCmd+0x82>

	return res;
 8000938:	7b7b      	ldrb	r3, [r7, #13]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SD_disk_initialize+0x14>
 8000954:	2301      	movs	r3, #1
 8000956:	e0d1      	b.n	8000afc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000958:	4b6a      	ldr	r3, [pc, #424]	@ (8000b04 <SD_disk_initialize+0x1c0>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <SD_disk_initialize+0x2a>
 8000966:	4b67      	ldr	r3, [pc, #412]	@ (8000b04 <SD_disk_initialize+0x1c0>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	e0c6      	b.n	8000afc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800096e:	f7ff fec9 	bl	8000704 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000972:	f7ff fe33 	bl	80005dc <SELECT>

	/* check disk type */
	type = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800097a:	2100      	movs	r1, #0
 800097c:	2040      	movs	r0, #64	@ 0x40
 800097e:	f7ff ff8c 	bl	800089a <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	f040 80a1 	bne.w	8000acc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800098a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b08 <SD_disk_initialize+0x1c4>)
 800098c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000990:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000992:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000996:	2048      	movs	r0, #72	@ 0x48
 8000998:	f7ff ff7f 	bl	800089a <SD_SendCmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d155      	bne.n	8000a4e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e00c      	b.n	80009c2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009a8:	7bfc      	ldrb	r4, [r7, #15]
 80009aa:	f7ff fe67 	bl	800067c <SPI_RxByte>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	f104 0310 	add.w	r3, r4, #16
 80009b6:	443b      	add	r3, r7
 80009b8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	3301      	adds	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d9ef      	bls.n	80009a8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009c8:	7abb      	ldrb	r3, [r7, #10]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d17e      	bne.n	8000acc <SD_disk_initialize+0x188>
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	2baa      	cmp	r3, #170	@ 0xaa
 80009d2:	d17b      	bne.n	8000acc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009d4:	2100      	movs	r1, #0
 80009d6:	2077      	movs	r0, #119	@ 0x77
 80009d8:	f7ff ff5f 	bl	800089a <SD_SendCmd>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d807      	bhi.n	80009f2 <SD_disk_initialize+0xae>
 80009e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009e6:	2069      	movs	r0, #105	@ 0x69
 80009e8:	f7ff ff57 	bl	800089a <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d004      	beq.n	80009fc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80009f2:	4b45      	ldr	r3, [pc, #276]	@ (8000b08 <SD_disk_initialize+0x1c4>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1ec      	bne.n	80009d4 <SD_disk_initialize+0x90>
 80009fa:	e000      	b.n	80009fe <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009fc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009fe:	4b42      	ldr	r3, [pc, #264]	@ (8000b08 <SD_disk_initialize+0x1c4>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d062      	beq.n	8000acc <SD_disk_initialize+0x188>
 8000a06:	2100      	movs	r1, #0
 8000a08:	207a      	movs	r0, #122	@ 0x7a
 8000a0a:	f7ff ff46 	bl	800089a <SD_SendCmd>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d15b      	bne.n	8000acc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e00c      	b.n	8000a34 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a1a:	7bfc      	ldrb	r4, [r7, #15]
 8000a1c:	f7ff fe2e 	bl	800067c <SPI_RxByte>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	f104 0310 	add.w	r3, r4, #16
 8000a28:	443b      	add	r3, r7
 8000a2a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	3301      	adds	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d9ef      	bls.n	8000a1a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a3a:	7a3b      	ldrb	r3, [r7, #8]
 8000a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SD_disk_initialize+0x104>
 8000a44:	230c      	movs	r3, #12
 8000a46:	e000      	b.n	8000a4a <SD_disk_initialize+0x106>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	73bb      	strb	r3, [r7, #14]
 8000a4c:	e03e      	b.n	8000acc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2077      	movs	r0, #119	@ 0x77
 8000a52:	f7ff ff22 	bl	800089a <SD_SendCmd>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d808      	bhi.n	8000a6e <SD_disk_initialize+0x12a>
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2069      	movs	r0, #105	@ 0x69
 8000a60:	f7ff ff1b 	bl	800089a <SD_SendCmd>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d801      	bhi.n	8000a6e <SD_disk_initialize+0x12a>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e000      	b.n	8000a70 <SD_disk_initialize+0x12c>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d10e      	bne.n	8000a96 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2077      	movs	r0, #119	@ 0x77
 8000a7c:	f7ff ff0d 	bl	800089a <SD_SendCmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d80e      	bhi.n	8000aa4 <SD_disk_initialize+0x160>
 8000a86:	2100      	movs	r1, #0
 8000a88:	2069      	movs	r0, #105	@ 0x69
 8000a8a:	f7ff ff06 	bl	800089a <SD_SendCmd>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d107      	bne.n	8000aa4 <SD_disk_initialize+0x160>
 8000a94:	e00c      	b.n	8000ab0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a96:	2100      	movs	r1, #0
 8000a98:	2041      	movs	r0, #65	@ 0x41
 8000a9a:	f7ff fefe 	bl	800089a <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d004      	beq.n	8000aae <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <SD_disk_initialize+0x1c4>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1e2      	bne.n	8000a72 <SD_disk_initialize+0x12e>
 8000aac:	e000      	b.n	8000ab0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aae:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <SD_disk_initialize+0x1c4>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d007      	beq.n	8000ac8 <SD_disk_initialize+0x184>
 8000ab8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000abc:	2050      	movs	r0, #80	@ 0x50
 8000abe:	f7ff feec 	bl	800089a <SD_SendCmd>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SD_disk_initialize+0x188>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000acc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b0c <SD_disk_initialize+0x1c8>)
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ad2:	f7ff fd91 	bl	80005f8 <DESELECT>
	SPI_RxByte();
 8000ad6:	f7ff fdd1 	bl	800067c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d008      	beq.n	8000af2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <SD_disk_initialize+0x1c0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <SD_disk_initialize+0x1c0>)
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e001      	b.n	8000af6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000af2:	f7ff fe49 	bl	8000788 <SD_PowerOff>
	}

	return Stat;
 8000af6:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <SD_disk_initialize+0x1c0>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20006cd0 	.word	0x20006cd0
 8000b0c:	20006cd4 	.word	0x20006cd4

08000b10 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SD_disk_status+0x14>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e002      	b.n	8000b2a <SD_disk_status+0x1a>
	return Stat;
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SD_disk_status+0x28>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000000 	.word	0x20000000

08000b3c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <SD_disk_read+0x1c>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <SD_disk_read+0x20>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e051      	b.n	8000c00 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <SD_disk_read+0xcc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SD_disk_read+0x32>
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e048      	b.n	8000c00 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <SD_disk_read+0xd0>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <SD_disk_read+0x44>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b80:	f7ff fd2c 	bl	80005dc <SELECT>

	if (count == 1)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d111      	bne.n	8000bae <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2051      	movs	r0, #81	@ 0x51
 8000b8e:	f7ff fe84 	bl	800089a <SD_SendCmd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d129      	bne.n	8000bec <SD_disk_read+0xb0>
 8000b98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f7ff fe0b 	bl	80007b8 <SD_RxDataBlock>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d021      	beq.n	8000bec <SD_disk_read+0xb0>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	e01e      	b.n	8000bec <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2052      	movs	r0, #82	@ 0x52
 8000bb2:	f7ff fe72 	bl	800089a <SD_SendCmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d117      	bne.n	8000bec <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f7ff fdf9 	bl	80007b8 <SD_RxDataBlock>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <SD_disk_read+0xa6>
				buff += 512;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bd2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1ed      	bne.n	8000bbc <SD_disk_read+0x80>
 8000be0:	e000      	b.n	8000be4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000be2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	204c      	movs	r0, #76	@ 0x4c
 8000be8:	f7ff fe57 	bl	800089a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bec:	f7ff fd04 	bl	80005f8 <DESELECT>
	SPI_RxByte();
 8000bf0:	f7ff fd44 	bl	800067c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20006cd4 	.word	0x20006cd4

08000c10 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <SD_disk_write+0x1c>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <SD_disk_write+0x20>
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e06b      	b.n	8000d08 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c30:	4b37      	ldr	r3, [pc, #220]	@ (8000d10 <SD_disk_write+0x100>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SD_disk_write+0x32>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e062      	b.n	8000d08 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c42:	4b33      	ldr	r3, [pc, #204]	@ (8000d10 <SD_disk_write+0x100>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SD_disk_write+0x44>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e059      	b.n	8000d08 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <SD_disk_write+0x104>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <SD_disk_write+0x56>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	025b      	lsls	r3, r3, #9
 8000c64:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c66:	f7ff fcb9 	bl	80005dc <SELECT>

	if (count == 1)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d110      	bne.n	8000c92 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2058      	movs	r0, #88	@ 0x58
 8000c74:	f7ff fe11 	bl	800089a <SD_SendCmd>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d13a      	bne.n	8000cf4 <SD_disk_write+0xe4>
 8000c7e:	21fe      	movs	r1, #254	@ 0xfe
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	f7ff fdc7 	bl	8000814 <SD_TxDataBlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d033      	beq.n	8000cf4 <SD_disk_write+0xe4>
			count = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	e030      	b.n	8000cf4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <SD_disk_write+0x104>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2077      	movs	r0, #119	@ 0x77
 8000ca2:	f7ff fdfa 	bl	800089a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ca6:	6839      	ldr	r1, [r7, #0]
 8000ca8:	2057      	movs	r0, #87	@ 0x57
 8000caa:	f7ff fdf6 	bl	800089a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2059      	movs	r0, #89	@ 0x59
 8000cb2:	f7ff fdf2 	bl	800089a <SD_SendCmd>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11b      	bne.n	8000cf4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cbc:	21fc      	movs	r1, #252	@ 0xfc
 8000cbe:	68b8      	ldr	r0, [r7, #8]
 8000cc0:	f7ff fda8 	bl	8000814 <SD_TxDataBlock>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00a      	beq.n	8000ce0 <SD_disk_write+0xd0>
				buff += 512;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000cd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1ee      	bne.n	8000cbc <SD_disk_write+0xac>
 8000cde:	e000      	b.n	8000ce2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ce0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000ce2:	21fd      	movs	r1, #253	@ 0xfd
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fd95 	bl	8000814 <SD_TxDataBlock>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cf4:	f7ff fc80 	bl	80005f8 <DESELECT>
	SPI_RxByte();
 8000cf8:	f7ff fcc0 	bl	800067c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bf14      	ite	ne
 8000d02:	2301      	movne	r3, #1
 8000d04:	2300      	moveq	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20006cd4 	.word	0x20006cd4

08000d18 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b08b      	sub	sp, #44	@ 0x2c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	603a      	str	r2, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	460b      	mov	r3, r1
 8000d26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SD_disk_ioctl+0x1e>
 8000d32:	2304      	movs	r3, #4
 8000d34:	e113      	b.n	8000f5e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d124      	bne.n	8000d8c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d012      	beq.n	8000d70 <SD_disk_ioctl+0x58>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	dc1a      	bgt.n	8000d84 <SD_disk_ioctl+0x6c>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <SD_disk_ioctl+0x40>
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d006      	beq.n	8000d64 <SD_disk_ioctl+0x4c>
 8000d56:	e015      	b.n	8000d84 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d58:	f7ff fd16 	bl	8000788 <SD_PowerOff>
			res = RES_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d62:	e0fa      	b.n	8000f5a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d64:	f7ff fcce 	bl	8000704 <SD_PowerOn>
			res = RES_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d6e:	e0f4      	b.n	8000f5a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	1c5c      	adds	r4, r3, #1
 8000d74:	f7ff fd14 	bl	80007a0 <SD_CheckPower>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d82:	e0ea      	b.n	8000f5a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d84:	2304      	movs	r3, #4
 8000d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d8a:	e0e6      	b.n	8000f5a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d8c:	4b76      	ldr	r3, [pc, #472]	@ (8000f68 <SD_disk_ioctl+0x250>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SD_disk_ioctl+0x86>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e0df      	b.n	8000f5e <SD_disk_ioctl+0x246>

		SELECT();
 8000d9e:	f7ff fc1d 	bl	80005dc <SELECT>

		switch (ctrl)
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	2b0d      	cmp	r3, #13
 8000da6:	f200 80c9 	bhi.w	8000f3c <SD_disk_ioctl+0x224>
 8000daa:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <SD_disk_ioctl+0x98>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000ea7 	.word	0x08000ea7
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	08000e97 	.word	0x08000e97
 8000dbc:	08000f3d 	.word	0x08000f3d
 8000dc0:	08000f3d 	.word	0x08000f3d
 8000dc4:	08000f3d 	.word	0x08000f3d
 8000dc8:	08000f3d 	.word	0x08000f3d
 8000dcc:	08000f3d 	.word	0x08000f3d
 8000dd0:	08000f3d 	.word	0x08000f3d
 8000dd4:	08000f3d 	.word	0x08000f3d
 8000dd8:	08000f3d 	.word	0x08000f3d
 8000ddc:	08000eb9 	.word	0x08000eb9
 8000de0:	08000edd 	.word	0x08000edd
 8000de4:	08000f01 	.word	0x08000f01
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000de8:	2100      	movs	r1, #0
 8000dea:	2049      	movs	r0, #73	@ 0x49
 8000dec:	f7ff fd55 	bl	800089a <SD_SendCmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 80a6 	bne.w	8000f44 <SD_disk_ioctl+0x22c>
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fcda 	bl	80007b8 <SD_RxDataBlock>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 809c 	beq.w	8000f44 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e0c:	7b3b      	ldrb	r3, [r7, #12]
 8000e0e:	099b      	lsrs	r3, r3, #6
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10d      	bne.n	8000e32 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e16:	7d7b      	ldrb	r3, [r7, #21]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	7d3b      	ldrb	r3, [r7, #20]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e28:	8bfb      	ldrh	r3, [r7, #30]
 8000e2a:	029a      	lsls	r2, r3, #10
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e02d      	b.n	8000e8e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e32:	7c7b      	ldrb	r3, [r7, #17]
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	7dbb      	ldrb	r3, [r7, #22]
 8000e3c:	09db      	lsrs	r3, r3, #7
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	7d7b      	ldrb	r3, [r7, #21]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f003 0306 	and.w	r3, r3, #6
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3302      	adds	r3, #2
 8000e56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e5a:	7d3b      	ldrb	r3, [r7, #20]
 8000e5c:	099b      	lsrs	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	7cfb      	ldrb	r3, [r7, #19]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	7cbb      	ldrb	r3, [r7, #18]
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e80:	8bfa      	ldrh	r2, [r7, #30]
 8000e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e86:	3b09      	subs	r3, #9
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000e94:	e056      	b.n	8000f44 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e9c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ea4:	e055      	b.n	8000f52 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ea6:	f7ff fc13 	bl	80006d0 <SD_ReadyWait>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2bff      	cmp	r3, #255	@ 0xff
 8000eae:	d14b      	bne.n	8000f48 <SD_disk_ioctl+0x230>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb6:	e047      	b.n	8000f48 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2049      	movs	r0, #73	@ 0x49
 8000ebc:	f7ff fced 	bl	800089a <SD_SendCmd>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d142      	bne.n	8000f4c <SD_disk_ioctl+0x234>
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	6a38      	ldr	r0, [r7, #32]
 8000eca:	f7ff fc75 	bl	80007b8 <SD_RxDataBlock>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d03b      	beq.n	8000f4c <SD_disk_ioctl+0x234>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eda:	e037      	b.n	8000f4c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000edc:	2100      	movs	r1, #0
 8000ede:	204a      	movs	r0, #74	@ 0x4a
 8000ee0:	f7ff fcdb 	bl	800089a <SD_SendCmd>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d132      	bne.n	8000f50 <SD_disk_ioctl+0x238>
 8000eea:	2110      	movs	r1, #16
 8000eec:	6a38      	ldr	r0, [r7, #32]
 8000eee:	f7ff fc63 	bl	80007b8 <SD_RxDataBlock>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02b      	beq.n	8000f50 <SD_disk_ioctl+0x238>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000efe:	e027      	b.n	8000f50 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f00:	2100      	movs	r1, #0
 8000f02:	207a      	movs	r0, #122	@ 0x7a
 8000f04:	f7ff fcc9 	bl	800089a <SD_SendCmd>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d116      	bne.n	8000f3c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f14:	e00b      	b.n	8000f2e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f16:	6a3c      	ldr	r4, [r7, #32]
 8000f18:	1c63      	adds	r3, r4, #1
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	f7ff fbae 	bl	800067c <SPI_RxByte>
 8000f20:	4603      	mov	r3, r0
 8000f22:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d9ef      	bls.n	8000f16 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f42:	e006      	b.n	8000f52 <SD_disk_ioctl+0x23a>
			break;
 8000f44:	bf00      	nop
 8000f46:	e004      	b.n	8000f52 <SD_disk_ioctl+0x23a>
			break;
 8000f48:	bf00      	nop
 8000f4a:	e002      	b.n	8000f52 <SD_disk_ioctl+0x23a>
			break;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <SD_disk_ioctl+0x23a>
			break;
 8000f50:	bf00      	nop
		}

		DESELECT();
 8000f52:	f7ff fb51 	bl	80005f8 <DESELECT>
		SPI_RxByte();
 8000f56:	f7ff fb91 	bl	800067c <SPI_RxByte>
	}

	return res;
 8000f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	372c      	adds	r7, #44	@ 0x2c
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000

08000f6c <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4878      	ldr	r0, [pc, #480]	@ (8001158 <LCD_Init+0x1ec>)
 8000f76:	f006 fe81 	bl	8007c7c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2113      	movs	r1, #19
 8000f7e:	4877      	ldr	r0, [pc, #476]	@ (800115c <LCD_Init+0x1f0>)
 8000f80:	f006 fe7c 	bl	8007c7c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2102      	movs	r1, #2
 8000f88:	4875      	ldr	r0, [pc, #468]	@ (8001160 <LCD_Init+0x1f4>)
 8000f8a:	f006 fe77 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f005 fbcc 	bl	800672c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2102      	movs	r1, #2
 8000f98:	4871      	ldr	r0, [pc, #452]	@ (8001160 <LCD_Init+0x1f4>)
 8000f9a:	f006 fe6f 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f005 fbc4 	bl	800672c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	486d      	ldr	r0, [pc, #436]	@ (8001160 <LCD_Init+0x1f4>)
 8000faa:	f006 fe67 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000fae:	2096      	movs	r0, #150	@ 0x96
 8000fb0:	f005 fbbc 	bl	800672c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4867      	ldr	r0, [pc, #412]	@ (8001158 <LCD_Init+0x1ec>)
 8000fba:	f006 fe5f 	bl	8007c7c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000fbe:	20e9      	movs	r0, #233	@ 0xe9
 8000fc0:	f000 f8d0 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x20);
 8000fc4:	2020      	movs	r0, #32
 8000fc6:	f000 f973 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000fca:	2011      	movs	r0, #17
 8000fcc:	f000 f8ca 	bl	8001164 <LCD_CMD>
	HAL_Delay(100);
 8000fd0:	2064      	movs	r0, #100	@ 0x64
 8000fd2:	f005 fbab 	bl	800672c <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000fd6:	20d1      	movs	r0, #209	@ 0xd1
 8000fd8:	f000 f8c4 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x00);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f967 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x71);
 8000fe2:	2071      	movs	r0, #113	@ 0x71
 8000fe4:	f000 f964 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x19);
 8000fe8:	2019      	movs	r0, #25
 8000fea:	f000 f961 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000fee:	20d0      	movs	r0, #208	@ 0xd0
 8000ff0:	f000 f8b8 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x07);
 8000ff4:	2007      	movs	r0, #7
 8000ff6:	f000 f95b 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x01);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 f958 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x08);
 8001000:	2008      	movs	r0, #8
 8001002:	f000 f955 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 8001006:	2036      	movs	r0, #54	@ 0x36
 8001008:	f000 f8ac 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 800100c:	20e8      	movs	r0, #232	@ 0xe8
 800100e:	f000 f94f 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8001012:	203a      	movs	r0, #58	@ 0x3a
 8001014:	f000 f8a6 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8001018:	2005      	movs	r0, #5
 800101a:	f000 f949 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 800101e:	20c1      	movs	r0, #193	@ 0xc1
 8001020:	f000 f8a0 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x10);
 8001024:	2010      	movs	r0, #16
 8001026:	f000 f943 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x10);
 800102a:	2010      	movs	r0, #16
 800102c:	f000 f940 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x02);
 8001030:	2002      	movs	r0, #2
 8001032:	f000 f93d 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x02);
 8001036:	2002      	movs	r0, #2
 8001038:	f000 f93a 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 800103c:	20c0      	movs	r0, #192	@ 0xc0
 800103e:	f000 f891 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f934 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x35);
 8001048:	2035      	movs	r0, #53	@ 0x35
 800104a:	f000 f931 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x00);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f92e 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f92b 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 f928 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x02);
 8001060:	2002      	movs	r0, #2
 8001062:	f000 f925 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8001066:	20c5      	movs	r0, #197	@ 0xc5
 8001068:	f000 f87c 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 800106c:	2004      	movs	r0, #4
 800106e:	f000 f91f 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8001072:	20d2      	movs	r0, #210	@ 0xd2
 8001074:	f000 f876 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x01);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 f919 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x44);
 800107e:	2044      	movs	r0, #68	@ 0x44
 8001080:	f000 f916 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8001084:	20c8      	movs	r0, #200	@ 0xc8
 8001086:	f000 f86d 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x04);
 800108a:	2004      	movs	r0, #4
 800108c:	f000 f910 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x67);
 8001090:	2067      	movs	r0, #103	@ 0x67
 8001092:	f000 f90d 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x35);
 8001096:	2035      	movs	r0, #53	@ 0x35
 8001098:	f000 f90a 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x04);
 800109c:	2004      	movs	r0, #4
 800109e:	f000 f907 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x08);
 80010a2:	2008      	movs	r0, #8
 80010a4:	f000 f904 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x06);
 80010a8:	2006      	movs	r0, #6
 80010aa:	f000 f901 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x24);
 80010ae:	2024      	movs	r0, #36	@ 0x24
 80010b0:	f000 f8fe 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x01);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 f8fb 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x37);
 80010ba:	2037      	movs	r0, #55	@ 0x37
 80010bc:	f000 f8f8 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x40);
 80010c0:	2040      	movs	r0, #64	@ 0x40
 80010c2:	f000 f8f5 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x03);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f000 f8f2 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x10);
 80010cc:	2010      	movs	r0, #16
 80010ce:	f000 f8ef 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x08);
 80010d2:	2008      	movs	r0, #8
 80010d4:	f000 f8ec 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x80);
 80010d8:	2080      	movs	r0, #128	@ 0x80
 80010da:	f000 f8e9 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f8e6 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80010e4:	202a      	movs	r0, #42	@ 0x2a
 80010e6:	f000 f83d 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f8e0 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f8dd 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x01);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 f8da 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x3F);
 80010fc:	203f      	movs	r0, #63	@ 0x3f
 80010fe:	f000 f8d7 	bl	80012b0 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8001102:	202b      	movs	r0, #43	@ 0x2b
 8001104:	f000 f82e 	bl	8001164 <LCD_CMD>
	LCD_DATA(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f8d1 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f8ce 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0x01);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 f8cb 	bl	80012b0 <LCD_DATA>
	LCD_DATA(0xE0);
 800111a:	20e0      	movs	r0, #224	@ 0xe0
 800111c:	f000 f8c8 	bl	80012b0 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001120:	2029      	movs	r0, #41	@ 0x29
 8001122:	f000 f81f 	bl	8001164 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8001126:	202c      	movs	r0, #44	@ 0x2c
 8001128:	f000 f81c 	bl	8001164 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 800112c:	2020      	movs	r0, #32
 800112e:	f000 f819 	bl	8001164 <LCD_CMD>
	HAL_Delay(120);
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f005 fafa 	bl	800672c <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001138:	2011      	movs	r0, #17
 800113a:	f000 f813 	bl	8001164 <LCD_CMD>
	HAL_Delay(120);
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f005 faf4 	bl	800672c <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8001144:	2029      	movs	r0, #41	@ 0x29
 8001146:	f000 f80d 	bl	8001164 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2101      	movs	r1, #1
 800114e:	4802      	ldr	r0, [pc, #8]	@ (8001158 <LCD_Init+0x1ec>)
 8001150:	f006 fd94 	bl	8007c7c <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020400 	.word	0x40020400
 800115c:	40020000 	.word	0x40020000
 8001160:	40020800 	.word	0x40020800

08001164 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2110      	movs	r1, #16
 8001172:	484c      	ldr	r0, [pc, #304]	@ (80012a4 <LCD_CMD+0x140>)
 8001174:	f006 fd82 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	4849      	ldr	r0, [pc, #292]	@ (80012a4 <LCD_CMD+0x140>)
 800117e:	f006 fd7d 	bl	8007c7c <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001192:	4844      	ldr	r0, [pc, #272]	@ (80012a4 <LCD_CMD+0x140>)
 8001194:	f006 fd72 	bl	8007c7c <HAL_GPIO_WritePin>
 8001198:	e005      	b.n	80011a6 <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a0:	4840      	ldr	r0, [pc, #256]	@ (80012a4 <LCD_CMD+0x140>)
 80011a2:	f006 fd6b 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2180      	movs	r1, #128	@ 0x80
 80011b4:	483c      	ldr	r0, [pc, #240]	@ (80012a8 <LCD_CMD+0x144>)
 80011b6:	f006 fd61 	bl	8007c7c <HAL_GPIO_WritePin>
 80011ba:	e004      	b.n	80011c6 <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	4839      	ldr	r0, [pc, #228]	@ (80012a8 <LCD_CMD+0x144>)
 80011c2:	f006 fd5b 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d6:	4833      	ldr	r0, [pc, #204]	@ (80012a4 <LCD_CMD+0x140>)
 80011d8:	f006 fd50 	bl	8007c7c <HAL_GPIO_WritePin>
 80011dc:	e005      	b.n	80011ea <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e4:	482f      	ldr	r0, [pc, #188]	@ (80012a4 <LCD_CMD+0x140>)
 80011e6:	f006 fd49 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	482c      	ldr	r0, [pc, #176]	@ (80012ac <LCD_CMD+0x148>)
 80011fa:	f006 fd3f 	bl	8007c7c <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2108      	movs	r1, #8
 8001204:	4829      	ldr	r0, [pc, #164]	@ (80012ac <LCD_CMD+0x148>)
 8001206:	f006 fd39 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4824      	ldr	r0, [pc, #144]	@ (80012ac <LCD_CMD+0x148>)
 800121a:	f006 fd2f 	bl	8007c7c <HAL_GPIO_WritePin>
 800121e:	e004      	b.n	800122a <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2120      	movs	r1, #32
 8001224:	4821      	ldr	r0, [pc, #132]	@ (80012ac <LCD_CMD+0x148>)
 8001226:	f006 fd29 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2110      	movs	r1, #16
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <LCD_CMD+0x148>)
 800123a:	f006 fd1f 	bl	8007c7c <HAL_GPIO_WritePin>
 800123e:	e004      	b.n	800124a <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2110      	movs	r1, #16
 8001244:	4819      	ldr	r0, [pc, #100]	@ (80012ac <LCD_CMD+0x148>)
 8001246:	f006 fd19 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800125a:	4814      	ldr	r0, [pc, #80]	@ (80012ac <LCD_CMD+0x148>)
 800125c:	f006 fd0e 	bl	8007c7c <HAL_GPIO_WritePin>
 8001260:	e005      	b.n	800126e <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001268:	4810      	ldr	r0, [pc, #64]	@ (80012ac <LCD_CMD+0x148>)
 800126a:	f006 fd07 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da06      	bge.n	8001284 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127c:	4809      	ldr	r0, [pc, #36]	@ (80012a4 <LCD_CMD+0x140>)
 800127e:	f006 fcfd 	bl	8007c7c <HAL_GPIO_WritePin>
 8001282:	e005      	b.n	8001290 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <LCD_CMD+0x140>)
 800128c:	f006 fcf6 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2102      	movs	r1, #2
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <LCD_CMD+0x140>)
 8001296:	f006 fcf1 	bl	8007c7c <HAL_GPIO_WritePin>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020400 	.word	0x40020400

080012b0 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2110      	movs	r1, #16
 80012be:	484c      	ldr	r0, [pc, #304]	@ (80013f0 <LCD_DATA+0x140>)
 80012c0:	f006 fcdc 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	4849      	ldr	r0, [pc, #292]	@ (80013f0 <LCD_DATA+0x140>)
 80012ca:	f006 fcd7 	bl	8007c7c <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012de:	4844      	ldr	r0, [pc, #272]	@ (80013f0 <LCD_DATA+0x140>)
 80012e0:	f006 fccc 	bl	8007c7c <HAL_GPIO_WritePin>
 80012e4:	e005      	b.n	80012f2 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ec:	4840      	ldr	r0, [pc, #256]	@ (80013f0 <LCD_DATA+0x140>)
 80012ee:	f006 fcc5 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2180      	movs	r1, #128	@ 0x80
 8001300:	483c      	ldr	r0, [pc, #240]	@ (80013f4 <LCD_DATA+0x144>)
 8001302:	f006 fcbb 	bl	8007c7c <HAL_GPIO_WritePin>
 8001306:	e004      	b.n	8001312 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	4839      	ldr	r0, [pc, #228]	@ (80013f4 <LCD_DATA+0x144>)
 800130e:	f006 fcb5 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001322:	4833      	ldr	r0, [pc, #204]	@ (80013f0 <LCD_DATA+0x140>)
 8001324:	f006 fcaa 	bl	8007c7c <HAL_GPIO_WritePin>
 8001328:	e005      	b.n	8001336 <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001330:	482f      	ldr	r0, [pc, #188]	@ (80013f0 <LCD_DATA+0x140>)
 8001332:	f006 fca3 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2108      	movs	r1, #8
 8001344:	482c      	ldr	r0, [pc, #176]	@ (80013f8 <LCD_DATA+0x148>)
 8001346:	f006 fc99 	bl	8007c7c <HAL_GPIO_WritePin>
 800134a:	e004      	b.n	8001356 <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2108      	movs	r1, #8
 8001350:	4829      	ldr	r0, [pc, #164]	@ (80013f8 <LCD_DATA+0x148>)
 8001352:	f006 fc93 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	4824      	ldr	r0, [pc, #144]	@ (80013f8 <LCD_DATA+0x148>)
 8001366:	f006 fc89 	bl	8007c7c <HAL_GPIO_WritePin>
 800136a:	e004      	b.n	8001376 <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2120      	movs	r1, #32
 8001370:	4821      	ldr	r0, [pc, #132]	@ (80013f8 <LCD_DATA+0x148>)
 8001372:	f006 fc83 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	481c      	ldr	r0, [pc, #112]	@ (80013f8 <LCD_DATA+0x148>)
 8001386:	f006 fc79 	bl	8007c7c <HAL_GPIO_WritePin>
 800138a:	e004      	b.n	8001396 <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	4819      	ldr	r0, [pc, #100]	@ (80013f8 <LCD_DATA+0x148>)
 8001392:	f006 fc73 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a6:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <LCD_DATA+0x148>)
 80013a8:	f006 fc68 	bl	8007c7c <HAL_GPIO_WritePin>
 80013ac:	e005      	b.n	80013ba <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b4:	4810      	ldr	r0, [pc, #64]	@ (80013f8 <LCD_DATA+0x148>)
 80013b6:	f006 fc61 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da06      	bge.n	80013d0 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c8:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <LCD_DATA+0x140>)
 80013ca:	f006 fc57 	bl	8007c7c <HAL_GPIO_WritePin>
 80013ce:	e005      	b.n	80013dc <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d6:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <LCD_DATA+0x140>)
 80013d8:	f006 fc50 	bl	8007c7c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2102      	movs	r1, #2
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <LCD_DATA+0x140>)
 80013e2:	f006 fc4b 	bl	8007c7c <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020400 	.word	0x40020400

080013fc <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 800140a:	202a      	movs	r0, #42	@ 0x2a
 800140c:	f7ff feaa 	bl	8001164 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff4a 	bl	80012b0 <LCD_DATA>
	LCD_DATA(x1);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff45 	bl	80012b0 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff3f 	bl	80012b0 <LCD_DATA>
	LCD_DATA(x2);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff3a 	bl	80012b0 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 800143c:	202b      	movs	r0, #43	@ 0x2b
 800143e:	f7ff fe91 	bl	8001164 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff31 	bl	80012b0 <LCD_DATA>
	LCD_DATA(y1);
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff2c 	bl	80012b0 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff26 	bl	80012b0 <LCD_DATA>
	LCD_DATA(y2);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff21 	bl	80012b0 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 800146e:	202c      	movs	r0, #44	@ 0x2c
 8001470:	f7ff fe78 	bl	8001164 <LCD_CMD>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8001484:	202c      	movs	r0, #44	@ 0x2c
 8001486:	f7ff fe6d 	bl	8001164 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2110      	movs	r1, #16
 800148e:	481b      	ldr	r0, [pc, #108]	@ (80014fc <LCD_Clear+0x80>)
 8001490:	f006 fbf4 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2101      	movs	r1, #1
 8001498:	4819      	ldr	r0, [pc, #100]	@ (8001500 <LCD_Clear+0x84>)
 800149a:	f006 fbef 	bl	8007c7c <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 800149e:	23ef      	movs	r3, #239	@ 0xef
 80014a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ffa8 	bl	80013fc <SetWindows>
	for (x = 0; x < 320; x++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e016      	b.n	80014e0 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	e00d      	b.n	80014d4 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fef6 	bl	80012b0 <LCD_DATA>
			LCD_DATA(c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fef1 	bl	80012b0 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3301      	adds	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2bef      	cmp	r3, #239	@ 0xef
 80014d8:	d9ee      	bls.n	80014b8 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014e6:	d3e4      	bcc.n	80014b2 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2101      	movs	r1, #1
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <LCD_Clear+0x84>)
 80014ee:	f006 fbc5 	bl	8007c7c <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400

08001504 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001512:	202c      	movs	r0, #44	@ 0x2c
 8001514:	f7ff fe26 	bl	8001164 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	4824      	ldr	r0, [pc, #144]	@ (80015b0 <FillRect+0xac>)
 800151e:	f006 fbad 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2101      	movs	r1, #1
 8001526:	4823      	ldr	r0, [pc, #140]	@ (80015b4 <FillRect+0xb0>)
 8001528:	f006 fba8 	bl	8007c7c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1e5a      	subs	r2, r3, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3b01      	subs	r3, #1
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff ff58 	bl	80013fc <SetWindows>
	unsigned int k = w * h * 2 - 1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	3b01      	subs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	e01a      	b.n	8001596 <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	e010      	b.n	8001588 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8001566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe9f 	bl	80012b0 <LCD_DATA>
			LCD_DATA(c);
 8001572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe9a 	bl	80012b0 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	3b02      	subs	r3, #2
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8ea      	bhi.n	8001566 <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	3301      	adds	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d8e0      	bhi.n	8001560 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2101      	movs	r1, #1
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <FillRect+0xb0>)
 80015a4:	f006 fb6a 	bl	8007c7c <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400

080015b8 <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[], int flipx, int flipy) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	@ 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80015c6:	202c      	movs	r0, #44	@ 0x2c
 80015c8:	f7ff fdcc 	bl	8001164 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2110      	movs	r1, #16
 80015d0:	482f      	ldr	r0, [pc, #188]	@ (8001690 <LCD_Bitmap+0xd8>)
 80015d2:	f006 fb53 	bl	8007c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2101      	movs	r1, #1
 80015da:	482e      	ldr	r0, [pc, #184]	@ (8001694 <LCD_Bitmap+0xdc>)
 80015dc:	f006 fb4e 	bl	8007c7c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
	y2 = y + height;
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	623b      	str	r3, [r7, #32]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff fefe 	bl	80013fc <SetWindows>


	for (int i = 0; i < width; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001604:	e037      	b.n	8001676 <LCD_Bitmap+0xbe>
		int srcX = flipx ? (width-1 -i) : i;
 8001606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <LCD_Bitmap+0x5e>
 800160c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	e000      	b.n	8001618 <LCD_Bitmap+0x60>
 8001616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001618:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < height; j++) {
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800161e:	e023      	b.n	8001668 <LCD_Bitmap+0xb0>
			int srcY = flipy ? (height-1 -j) : j;
 8001620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <LCD_Bitmap+0x78>
 8001626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	e000      	b.n	8001632 <LCD_Bitmap+0x7a>
 8001630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001632:	61bb      	str	r3, [r7, #24]
			unsigned int k = (srcX*height + srcY)*2;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	fb03 f202 	mul.w	r2, r3, r2
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	617b      	str	r3, [r7, #20]
			LCD_DATA(bitmap[k]);
 8001644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe2f 	bl	80012b0 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe27 	bl	80012b0 <LCD_DATA>
		for (int j = 0; j < height; j++) {
 8001662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001664:	3301      	adds	r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8d7      	bhi.n	8001620 <LCD_Bitmap+0x68>
	for (int i = 0; i < width; i++) {
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	3301      	adds	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d8c3      	bhi.n	8001606 <LCD_Bitmap+0x4e>
			//LCD_DATA(bitmap[k]);
			//k = k + 2;
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2101      	movs	r1, #1
 8001682:	4804      	ldr	r0, [pc, #16]	@ (8001694 <LCD_Bitmap+0xdc>)
 8001684:	f006 fafa 	bl	8007c7c <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	@ 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400

08001698 <CreateBackground>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void CreateBackground(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
	uint8_t shade = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
	// celdas de 8x8 pixeles
	for (int i = 0; i < HEIGHT; i++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	e040      	b.n	800172a <CreateBackground+0x92>
		uint16_t y = i*SQ_SIZE;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	807b      	strh	r3, [r7, #2]
		for (int j = 0; j< WIDTH ; j++){
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	e02b      	b.n	800170e <CreateBackground+0x76>
			uint16_t x = j*SQ_SIZE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	803b      	strh	r3, [r7, #0]
			map[i][j] = shade;
 80016be:	491f      	ldr	r1, [pc, #124]	@ (800173c <CreateBackground+0xa4>)
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	18ca      	adds	r2, r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	701a      	strb	r2, [r3, #0]
			if (shade){
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <CreateBackground+0x5a>
				FillRect(x, y, SQ_SIZE, SQ_SIZE, 0x04C1);
 80016da:	8838      	ldrh	r0, [r7, #0]
 80016dc:	8879      	ldrh	r1, [r7, #2]
 80016de:	f240 43c1 	movw	r3, #1217	@ 0x4c1
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2310      	movs	r3, #16
 80016e6:	2210      	movs	r2, #16
 80016e8:	f7ff ff0c 	bl	8001504 <FillRect>
				shade = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e00a      	b.n	8001708 <CreateBackground+0x70>
			} else {
				FillRect(x, y, SQ_SIZE, SQ_SIZE, 0x0660);
 80016f2:	8838      	ldrh	r0, [r7, #0]
 80016f4:	8879      	ldrh	r1, [r7, #2]
 80016f6:	f44f 63cc 	mov.w	r3, #1632	@ 0x660
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2310      	movs	r3, #16
 80016fe:	2210      	movs	r2, #16
 8001700:	f7ff ff00 	bl	8001504 <FillRect>
				shade = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
		for (int j = 0; j< WIDTH ; j++){
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b13      	cmp	r3, #19
 8001712:	ddd0      	ble.n	80016b6 <CreateBackground+0x1e>
			}

		}
		if (shade == 0){
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <CreateBackground+0x88>
			shade = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e001      	b.n	8001724 <CreateBackground+0x8c>
		} else {
			shade = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < HEIGHT; i++){
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b0e      	cmp	r3, #14
 800172e:	ddbb      	ble.n	80016a8 <CreateBackground+0x10>
		}
	}
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000944c 	.word	0x2000944c

08001740 <init_random>:

void init_random(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001746:	480a      	ldr	r0, [pc, #40]	@ (8001770 <init_random+0x30>)
 8001748:	f005 f858 	bl	80067fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <init_random+0x30>)
 8001752:	f005 f925 	bl	80069a0 <HAL_ADC_PollForConversion>
	uint16_t ruido = HAL_ADC_GetValue(&hadc1);
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <init_random+0x30>)
 8001758:	f005 f9ad 	bl	8006ab6 <HAL_ADC_GetValue>
 800175c:	4603      	mov	r3, r0
 800175e:	80fb      	strh	r3, [r7, #6]
	srand(ruido);
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	4618      	mov	r0, r3
 8001764:	f00b fd1a 	bl	800d19c <srand>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20008d48 	.word	0x20008d48

08001774 <get_random>:

int get_random(int min, int max){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	return (rand() % (max - min + 1)) + min;
 800177e:	f00b fd3b 	bl	800d1f8 <rand>
 8001782:	4602      	mov	r2, r0
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	1acb      	subs	r3, r1, r3
 800178a:	3301      	adds	r3, #1
 800178c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	1ad2      	subs	r2, r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <restart_game>:

void restart_game(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af04      	add	r7, sp, #16
	sonido = 'j';
 80017aa:	4bac      	ldr	r3, [pc, #688]	@ (8001a5c <restart_game+0x2b8>)
 80017ac:	226a      	movs	r2, #106	@ 0x6a
 80017ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	49aa      	ldr	r1, [pc, #680]	@ (8001a5c <restart_game+0x2b8>)
 80017b4:	48aa      	ldr	r0, [pc, #680]	@ (8001a60 <restart_game+0x2bc>)
 80017b6:	f007 fd2b 	bl	8009210 <HAL_UART_Transmit_DMA>
	stop_animations = 0;
 80017ba:	4baa      	ldr	r3, [pc, #680]	@ (8001a64 <restart_game+0x2c0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
	game_over = 0;
 80017c0:	4ba9      	ldr	r3, [pc, #676]	@ (8001a68 <restart_game+0x2c4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
	snake1_lost = 0;
 80017c6:	4ba9      	ldr	r3, [pc, #676]	@ (8001a6c <restart_game+0x2c8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
	snake2_lost = 0;
 80017cc:	4ba8      	ldr	r3, [pc, #672]	@ (8001a70 <restart_game+0x2cc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
	orange_count = 0;
 80017d2:	4ba8      	ldr	r3, [pc, #672]	@ (8001a74 <restart_game+0x2d0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
	LCD_Clear(0x00);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fe4f 	bl	800147c <LCD_Clear>

	CreateBackground();
 80017de:	f7ff ff5b 	bl	8001698 <CreateBackground>

	//INICIALIZACION SNAKE 1
	len_snake1 = 6;
 80017e2:	4ba5      	ldr	r3, [pc, #660]	@ (8001a78 <restart_game+0x2d4>)
 80017e4:	2206      	movs	r2, #6
 80017e6:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < len_snake1; i++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e11d      	b.n	8001a2a <restart_game+0x286>
		  snake1[i][0] = 4;
 80017ee:	49a3      	ldr	r1, [pc, #652]	@ (8001a7c <restart_game+0x2d8>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	2204      	movs	r2, #4
 80017fc:	701a      	strb	r2, [r3, #0]
		  snake1[i][1] = i+5;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3305      	adds	r3, #5
 8001804:	b2d8      	uxtb	r0, r3
 8001806:	499d      	ldr	r1, [pc, #628]	@ (8001a7c <restart_game+0x2d8>)
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	440b      	add	r3, r1
 8001812:	3301      	adds	r3, #1
 8001814:	4602      	mov	r2, r0
 8001816:	701a      	strb	r2, [r3, #0]
		  snake1[i][2] = 0;
 8001818:	4998      	ldr	r1, [pc, #608]	@ (8001a7c <restart_game+0x2d8>)
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	440b      	add	r3, r1
 8001824:	3302      	adds	r3, #2
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		  map[i+5][4] += 2;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	1d5a      	adds	r2, r3, #5
 800182e:	4994      	ldr	r1, [pc, #592]	@ (8001a80 <restart_game+0x2dc>)
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3304      	adds	r3, #4
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	3205      	adds	r2, #5
 8001842:	3302      	adds	r3, #2
 8001844:	b2d8      	uxtb	r0, r3
 8001846:	498e      	ldr	r1, [pc, #568]	@ (8001a80 <restart_game+0x2dc>)
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3304      	adds	r3, #4
 8001854:	4602      	mov	r2, r0
 8001856:	701a      	strb	r2, [r3, #0]
		  snake1_current_cell_value = map[snake1[i][1]][snake1[i][0]]%2;
 8001858:	4988      	ldr	r1, [pc, #544]	@ (8001a7c <restart_game+0x2d8>)
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	440b      	add	r3, r1
 8001864:	3301      	adds	r3, #1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	4984      	ldr	r1, [pc, #528]	@ (8001a7c <restart_game+0x2d8>)
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	440b      	add	r3, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4a81      	ldr	r2, [pc, #516]	@ (8001a80 <restart_game+0x2dc>)
 800187c:	4603      	mov	r3, r0
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4403      	add	r3, r0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	440b      	add	r3, r1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b7c      	ldr	r3, [pc, #496]	@ (8001a84 <restart_game+0x2e0>)
 8001892:	701a      	strb	r2, [r3, #0]
		  if (i==0){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d13f      	bne.n	800191a <restart_game+0x176>
			  if (snake1_current_cell_value == 1){
 800189a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a84 <restart_game+0x2e0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d11d      	bne.n	80018de <restart_game+0x13a>
				  LCD_Bitmap((snake1[i][0]*SQ_SIZE), (snake1[i][1]*SQ_SIZE), SQ_SIZE, SQ_SIZE, head_snake1_up_1, 0, 0);
 80018a2:	4976      	ldr	r1, [pc, #472]	@ (8001a7c <restart_game+0x2d8>)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4618      	mov	r0, r3
 80018b4:	4971      	ldr	r1, [pc, #452]	@ (8001a7c <restart_game+0x2d8>)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	440b      	add	r3, r1
 80018c0:	3301      	adds	r3, #1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	4b6d      	ldr	r3, [pc, #436]	@ (8001a88 <restart_game+0x2e4>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2310      	movs	r3, #16
 80018d6:	2210      	movs	r2, #16
 80018d8:	f7ff fe6e 	bl	80015b8 <LCD_Bitmap>
 80018dc:	e0a2      	b.n	8001a24 <restart_game+0x280>
			  } else {
				  LCD_Bitmap(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_0, 0, 0);
 80018de:	4967      	ldr	r1, [pc, #412]	@ (8001a7c <restart_game+0x2d8>)
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	4962      	ldr	r1, [pc, #392]	@ (8001a7c <restart_game+0x2d8>)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	3301      	adds	r3, #1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4619      	mov	r1, r3
 8001904:	2300      	movs	r3, #0
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a8c <restart_game+0x2e8>)
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2310      	movs	r3, #16
 8001912:	2210      	movs	r2, #16
 8001914:	f7ff fe50 	bl	80015b8 <LCD_Bitmap>
 8001918:	e084      	b.n	8001a24 <restart_game+0x280>
			  }
		  } else if (i == len_snake1-1){
 800191a:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <restart_game+0x2d4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3b01      	subs	r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	d13f      	bne.n	80019a6 <restart_game+0x202>
			  if (snake1_current_cell_value == 1){
 8001926:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <restart_game+0x2e0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d11d      	bne.n	800196a <restart_game+0x1c6>
				  LCD_Bitmap(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_1, 0, 0);
 800192e:	4953      	ldr	r1, [pc, #332]	@ (8001a7c <restart_game+0x2d8>)
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	440b      	add	r3, r1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4618      	mov	r0, r3
 8001940:	494e      	ldr	r1, [pc, #312]	@ (8001a7c <restart_game+0x2d8>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	440b      	add	r3, r1
 800194c:	3301      	adds	r3, #1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4619      	mov	r1, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2300      	movs	r3, #0
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <restart_game+0x2ec>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2310      	movs	r3, #16
 8001962:	2210      	movs	r2, #16
 8001964:	f7ff fe28 	bl	80015b8 <LCD_Bitmap>
 8001968:	e05c      	b.n	8001a24 <restart_game+0x280>
			  } else {
				  LCD_Bitmap(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_0, 0, 0);
 800196a:	4944      	ldr	r1, [pc, #272]	@ (8001a7c <restart_game+0x2d8>)
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	440b      	add	r3, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4618      	mov	r0, r3
 800197c:	493f      	ldr	r1, [pc, #252]	@ (8001a7c <restart_game+0x2d8>)
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	440b      	add	r3, r1
 8001988:	3301      	adds	r3, #1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4619      	mov	r1, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	2300      	movs	r3, #0
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <restart_game+0x2f0>)
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2310      	movs	r3, #16
 800199e:	2210      	movs	r2, #16
 80019a0:	f7ff fe0a 	bl	80015b8 <LCD_Bitmap>
 80019a4:	e03e      	b.n	8001a24 <restart_game+0x280>
			  }
		  } else {
			  //FillRect(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x0019);
			  if (snake1_current_cell_value == 1){
 80019a6:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <restart_game+0x2e0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d11d      	bne.n	80019ea <restart_game+0x246>
				  LCD_Bitmap(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_1, 0, 0);
 80019ae:	4933      	ldr	r1, [pc, #204]	@ (8001a7c <restart_game+0x2d8>)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	492e      	ldr	r1, [pc, #184]	@ (8001a7c <restart_game+0x2d8>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	3301      	adds	r3, #1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a98 <restart_game+0x2f4>)
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2310      	movs	r3, #16
 80019e2:	2210      	movs	r2, #16
 80019e4:	f7ff fde8 	bl	80015b8 <LCD_Bitmap>
 80019e8:	e01c      	b.n	8001a24 <restart_game+0x280>
			  } else {
				  LCD_Bitmap(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_0, 0, 0);
 80019ea:	4924      	ldr	r1, [pc, #144]	@ (8001a7c <restart_game+0x2d8>)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4618      	mov	r0, r3
 80019fc:	491f      	ldr	r1, [pc, #124]	@ (8001a7c <restart_game+0x2d8>)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	3301      	adds	r3, #1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <restart_game+0x2f8>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	2210      	movs	r2, #16
 8001a20:	f7ff fdca 	bl	80015b8 <LCD_Bitmap>
	  for (int i = 0; i < len_snake1; i++){
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <restart_game+0x2d4>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	f6ff aedb 	blt.w	80017ee <restart_game+0x4a>
			  }
		  }

	  }
	  dir_snake1 = 0;
 8001a38:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <restart_game+0x2fc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	  snake1_next_x = snake1[0][0];
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <restart_game+0x2d8>)
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <restart_game+0x300>)
 8001a44:	701a      	strb	r2, [r3, #0]
	  snake1_next_y = snake1[0][1];
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <restart_game+0x2d8>)
 8001a48:	785a      	ldrb	r2, [r3, #1]
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <restart_game+0x304>)
 8001a4c:	701a      	strb	r2, [r3, #0]

	  //INICIALIZACIOIN SNAKE 2
	  len_snake2 = 6;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <restart_game+0x308>)
 8001a50:	2206      	movs	r2, #6
 8001a52:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len_snake2; i++){
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	e148      	b.n	8001cec <restart_game+0x548>
 8001a5a:	bf00      	nop
 8001a5c:	20009594 	.word	0x20009594
 8001a60:	20008e30 	.word	0x20008e30
 8001a64:	20009579 	.word	0x20009579
 8001a68:	20009578 	.word	0x20009578
 8001a6c:	200096c7 	.word	0x200096c7
 8001a70:	20009803 	.word	0x20009803
 8001a74:	20009595 	.word	0x20009595
 8001a78:	200096c4 	.word	0x200096c4
 8001a7c:	20009598 	.word	0x20009598
 8001a80:	2000944c 	.word	0x2000944c
 8001a84:	200096d0 	.word	0x200096d0
 8001a88:	20002604 	.word	0x20002604
 8001a8c:	20002404 	.word	0x20002404
 8001a90:	20005204 	.word	0x20005204
 8001a94:	20005004 	.word	0x20005004
 8001a98:	20000604 	.word	0x20000604
 8001a9c:	20000404 	.word	0x20000404
 8001aa0:	200096c5 	.word	0x200096c5
 8001aa4:	200096cb 	.word	0x200096cb
 8001aa8:	200096cc 	.word	0x200096cc
 8001aac:	20009800 	.word	0x20009800
		  snake2[i][0] = WIDTH-5;
 8001ab0:	4999      	ldr	r1, [pc, #612]	@ (8001d18 <restart_game+0x574>)
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	220f      	movs	r2, #15
 8001abe:	701a      	strb	r2, [r3, #0]
		  snake2[i][1] = i+5;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3305      	adds	r3, #5
 8001ac6:	b2d8      	uxtb	r0, r3
 8001ac8:	4993      	ldr	r1, [pc, #588]	@ (8001d18 <restart_game+0x574>)
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	701a      	strb	r2, [r3, #0]
		  snake2[i][2] = 0;
 8001ada:	498f      	ldr	r1, [pc, #572]	@ (8001d18 <restart_game+0x574>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		  map[i+5][WIDTH-5] += 4;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	1d5a      	adds	r2, r3, #5
 8001af0:	498a      	ldr	r1, [pc, #552]	@ (8001d1c <restart_game+0x578>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	330f      	adds	r3, #15
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	3205      	adds	r2, #5
 8001b04:	3304      	adds	r3, #4
 8001b06:	b2d8      	uxtb	r0, r3
 8001b08:	4984      	ldr	r1, [pc, #528]	@ (8001d1c <restart_game+0x578>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	330f      	adds	r3, #15
 8001b16:	4602      	mov	r2, r0
 8001b18:	701a      	strb	r2, [r3, #0]
		  snake2_current_cell_value = map[snake2[i][1]][snake2[i][0]]%2;
 8001b1a:	497f      	ldr	r1, [pc, #508]	@ (8001d18 <restart_game+0x574>)
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	497a      	ldr	r1, [pc, #488]	@ (8001d18 <restart_game+0x574>)
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4a77      	ldr	r2, [pc, #476]	@ (8001d1c <restart_game+0x578>)
 8001b3e:	4603      	mov	r3, r0
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4403      	add	r3, r0
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b73      	ldr	r3, [pc, #460]	@ (8001d20 <restart_game+0x57c>)
 8001b54:	701a      	strb	r2, [r3, #0]
		  if (i==0){
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d13f      	bne.n	8001bdc <restart_game+0x438>
			  if (snake2_current_cell_value == 1){
 8001b5c:	4b70      	ldr	r3, [pc, #448]	@ (8001d20 <restart_game+0x57c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d11d      	bne.n	8001ba0 <restart_game+0x3fc>
				  LCD_Bitmap(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_1, 0, 0);
 8001b64:	496c      	ldr	r1, [pc, #432]	@ (8001d18 <restart_game+0x574>)
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	4968      	ldr	r1, [pc, #416]	@ (8001d18 <restart_game+0x574>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	3301      	adds	r3, #1
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <restart_game+0x580>)
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2310      	movs	r3, #16
 8001b98:	2210      	movs	r2, #16
 8001b9a:	f7ff fd0d 	bl	80015b8 <LCD_Bitmap>
 8001b9e:	e0a2      	b.n	8001ce6 <restart_game+0x542>
			  } else {
				  LCD_Bitmap(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_0, 0, 0);
 8001ba0:	495d      	ldr	r1, [pc, #372]	@ (8001d18 <restart_game+0x574>)
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4959      	ldr	r1, [pc, #356]	@ (8001d18 <restart_game+0x574>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	4b56      	ldr	r3, [pc, #344]	@ (8001d28 <restart_game+0x584>)
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	f7ff fcef 	bl	80015b8 <LCD_Bitmap>
 8001bda:	e084      	b.n	8001ce6 <restart_game+0x542>
			  }
		  } else if (i == len_snake1-1){
 8001bdc:	4b53      	ldr	r3, [pc, #332]	@ (8001d2c <restart_game+0x588>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d13f      	bne.n	8001c68 <restart_game+0x4c4>
			  if (snake2_current_cell_value == 1){
 8001be8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d20 <restart_game+0x57c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d11d      	bne.n	8001c2c <restart_game+0x488>
				  LCD_Bitmap(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_1, 0, 0);
 8001bf0:	4949      	ldr	r1, [pc, #292]	@ (8001d18 <restart_game+0x574>)
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	4945      	ldr	r1, [pc, #276]	@ (8001d18 <restart_game+0x574>)
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3301      	adds	r3, #1
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	2300      	movs	r3, #0
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	4b44      	ldr	r3, [pc, #272]	@ (8001d30 <restart_game+0x58c>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2310      	movs	r3, #16
 8001c24:	2210      	movs	r2, #16
 8001c26:	f7ff fcc7 	bl	80015b8 <LCD_Bitmap>
 8001c2a:	e05c      	b.n	8001ce6 <restart_game+0x542>
			  } else {
				  LCD_Bitmap(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_0, 0, 0);
 8001c2c:	493a      	ldr	r1, [pc, #232]	@ (8001d18 <restart_game+0x574>)
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4936      	ldr	r1, [pc, #216]	@ (8001d18 <restart_game+0x574>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2300      	movs	r3, #0
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <restart_game+0x590>)
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2310      	movs	r3, #16
 8001c60:	2210      	movs	r2, #16
 8001c62:	f7ff fca9 	bl	80015b8 <LCD_Bitmap>
 8001c66:	e03e      	b.n	8001ce6 <restart_game+0x542>
			  }
		  } else {
			  //FillRect(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x0019);
			  if (snake2_current_cell_value == 1){
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <restart_game+0x57c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d11d      	bne.n	8001cac <restart_game+0x508>
				  LCD_Bitmap(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_1, 0, 0);
 8001c70:	4929      	ldr	r1, [pc, #164]	@ (8001d18 <restart_game+0x574>)
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4618      	mov	r0, r3
 8001c82:	4925      	ldr	r1, [pc, #148]	@ (8001d18 <restart_game+0x574>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3301      	adds	r3, #1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <restart_game+0x594>)
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2310      	movs	r3, #16
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f7ff fc87 	bl	80015b8 <LCD_Bitmap>
 8001caa:	e01c      	b.n	8001ce6 <restart_game+0x542>
			  } else {
				  LCD_Bitmap(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_0, 0, 0);
 8001cac:	491a      	ldr	r1, [pc, #104]	@ (8001d18 <restart_game+0x574>)
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4916      	ldr	r1, [pc, #88]	@ (8001d18 <restart_game+0x574>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3301      	adds	r3, #1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <restart_game+0x598>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2310      	movs	r3, #16
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	f7ff fc69 	bl	80015b8 <LCD_Bitmap>
		for (int i = 0; i < len_snake2; i++){
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <restart_game+0x59c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	f6ff aedb 	blt.w	8001ab0 <restart_game+0x30c>
			  }
		  }
		}
		dir_snake2 = 0;
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <restart_game+0x5a0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
		snake2_next_x = snake2[0][0];
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <restart_game+0x574>)
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <restart_game+0x5a4>)
 8001d06:	701a      	strb	r2, [r3, #0]
		snake2_next_y = snake2[0][1];
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <restart_game+0x574>)
 8001d0a:	785a      	ldrb	r2, [r3, #1]
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <restart_game+0x5a8>)
 8001d0e:	701a      	strb	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200096d4 	.word	0x200096d4
 8001d1c:	2000944c 	.word	0x2000944c
 8001d20:	2000980c 	.word	0x2000980c
 8001d24:	20003e04 	.word	0x20003e04
 8001d28:	20003c04 	.word	0x20003c04
 8001d2c:	200096c4 	.word	0x200096c4
 8001d30:	20005a04 	.word	0x20005a04
 8001d34:	20005804 	.word	0x20005804
 8001d38:	20000e04 	.word	0x20000e04
 8001d3c:	20000c04 	.word	0x20000c04
 8001d40:	20009800 	.word	0x20009800
 8001d44:	20009801 	.word	0x20009801
 8001d48:	20009807 	.word	0x20009807
 8001d4c:	20009808 	.word	0x20009808

08001d50 <display_menu>:

void display_menu(void){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af04      	add	r7, sp, #16
	menu = 1;
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <display_menu+0xe8>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
	game_over = 1;
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <display_menu+0xec>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
	menu_window = 0;
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <display_menu+0xf0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
	menu_option = 0;
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <display_menu+0xf4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
	select_option = 0;
 8001d6e:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <display_menu+0xf8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
	update_buttons = 1;
 8001d74:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <display_menu+0xfc>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
	sonido = 'm';
 8001d7a:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <display_menu+0x100>)
 8001d7c:	226d      	movs	r2, #109	@ 0x6d
 8001d7e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 8001d80:	2201      	movs	r2, #1
 8001d82:	4933      	ldr	r1, [pc, #204]	@ (8001e50 <display_menu+0x100>)
 8001d84:	4833      	ldr	r0, [pc, #204]	@ (8001e54 <display_menu+0x104>)
 8001d86:	f007 fa43 	bl	8009210 <HAL_UART_Transmit_DMA>

	LCD_Clear(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fb76 	bl	800147c <LCD_Clear>



	//Montar el sistema de archivos
	  fres = f_mount(&fs, "", 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	4931      	ldr	r1, [pc, #196]	@ (8001e58 <display_menu+0x108>)
 8001d94:	4831      	ldr	r0, [pc, #196]	@ (8001e5c <display_menu+0x10c>)
 8001d96:	f00a fcc9 	bl	800c72c <f_mount>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <display_menu+0x110>)
 8001da0:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK){
 8001da2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e60 <display_menu+0x110>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d13e      	bne.n	8001e28 <display_menu+0xd8>
		  fres = f_open(&fil, "menu_0.bin", FA_READ);
 8001daa:	2201      	movs	r2, #1
 8001dac:	492d      	ldr	r1, [pc, #180]	@ (8001e64 <display_menu+0x114>)
 8001dae:	482e      	ldr	r0, [pc, #184]	@ (8001e68 <display_menu+0x118>)
 8001db0:	f00a fd02 	bl	800c7b8 <f_open>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <display_menu+0x110>)
 8001dba:	701a      	strb	r2, [r3, #0]
		  if (fres == FR_OK) {
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <display_menu+0x110>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12c      	bne.n	8001e1e <display_menu+0xce>
			  for (uint16_t row = 0; row < 240; row+=2){
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	80fb      	strh	r3, [r7, #6]
 8001dc8:	e023      	b.n	8001e12 <display_menu+0xc2>
				  fres = f_read(&fil, menu_buf, sizeof(menu_buf), &br);
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <display_menu+0x11c>)
 8001dcc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001dd0:	4927      	ldr	r1, [pc, #156]	@ (8001e70 <display_menu+0x120>)
 8001dd2:	4825      	ldr	r0, [pc, #148]	@ (8001e68 <display_menu+0x118>)
 8001dd4:	f00a feb8 	bl	800cb48 <f_read>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <display_menu+0x110>)
 8001dde:	701a      	strb	r2, [r3, #0]
				  if ((fres == FR_OK)&&(br == sizeof(menu_buf))){
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <display_menu+0x110>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <display_menu+0xbc>
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <display_menu+0x11c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001df0:	d10c      	bne.n	8001e0c <display_menu+0xbc>
					  LCD_Bitmap(0, row, 320, 2, menu_buf, 0, 0);
 8001df2:	88f9      	ldrh	r1, [r7, #6]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <display_menu+0x120>)
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2302      	movs	r3, #2
 8001e02:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fbd6 	bl	80015b8 <LCD_Bitmap>
			  for (uint16_t row = 0; row < 240; row+=2){
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2bef      	cmp	r3, #239	@ 0xef
 8001e16:	d9d8      	bls.n	8001dca <display_menu+0x7a>
				  }
			  }
			f_close(&fil);
 8001e18:	4813      	ldr	r0, [pc, #76]	@ (8001e68 <display_menu+0x118>)
 8001e1a:	f00b f872 	bl	800cf02 <f_close>


		}
		  f_mount(NULL, "", 1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	490d      	ldr	r1, [pc, #52]	@ (8001e58 <display_menu+0x108>)
 8001e22:	2000      	movs	r0, #0
 8001e24:	f00a fc82 	bl	800c72c <f_mount>
	  }

	  showed_window = 1;
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <display_menu+0x124>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
	  /*if (fres == FR_OK){
		  transmit_uart("Card Unmounted");
	  } else if (fres != FR_OK){
	      transmit_uart("Card not Unmounted");
	  }*/
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000957a 	.word	0x2000957a
 8001e3c:	20009578 	.word	0x20009578
 8001e40:	2000957b 	.word	0x2000957b
 8001e44:	2000957d 	.word	0x2000957d
 8001e48:	2000957e 	.word	0x2000957e
 8001e4c:	2000957f 	.word	0x2000957f
 8001e50:	20009594 	.word	0x20009594
 8001e54:	20008e30 	.word	0x20008e30
 8001e58:	0800e1c8 	.word	0x0800e1c8
 8001e5c:	20006cd8 	.word	0x20006cd8
 8001e60:	20008d40 	.word	0x20008d40
 8001e64:	0800e1cc 	.word	0x0800e1cc
 8001e68:	20007d10 	.word	0x20007d10
 8001e6c:	20008d44 	.word	0x20008d44
 8001e70:	20008f48 	.word	0x20008f48
 8001e74:	2000957c 	.word	0x2000957c

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b095      	sub	sp, #84	@ 0x54
 8001e7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7e:	f004 fbe3 	bl	8006648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e82:	f003 fe95 	bl	8005bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e86:	f004 f805 	bl	8005e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e8a:	f003 ffdb 	bl	8005e44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e8e:	f003 ff85 	bl	8005d9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001e92:	f003 fefb 	bl	8005c8c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001e96:	f003 ffab 	bl	8005df0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001e9a:	f003 ff49 	bl	8005d30 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001e9e:	f008 f9fb 	bl	800a298 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001ea2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ea6:	f004 fc41 	bl	800672c <HAL_Delay>

  HAL_UART_Receive_IT(&huart3, input_controles, 1);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	49a1      	ldr	r1, [pc, #644]	@ (8002134 <main+0x2bc>)
 8001eae:	48a2      	ldr	r0, [pc, #648]	@ (8002138 <main+0x2c0>)
 8001eb0:	f007 f988 	bl	80091c4 <HAL_UART_Receive_IT>

  init_random();
 8001eb4:	f7ff fc44 	bl	8001740 <init_random>

  LCD_Init();
 8001eb8:	f7ff f858 	bl	8000f6c <LCD_Init>

  //restart_game();

  display_menu();
 8001ebc:	f7ff ff48 	bl	8001d50 <display_menu>
	  // I -> izquierda snake 1
	  // D -> derecha snake 1
	  // A -> arriba snake 1
	  // B -> abajo  snake 1
	  // P -> botón 1
	  if (received_input == 1){
 8001ec0:	4b9e      	ldr	r3, [pc, #632]	@ (800213c <main+0x2c4>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 814e 	bne.w	8002166 <main+0x2ee>
		  received_input = 0;
 8001eca:	4b9c      	ldr	r3, [pc, #624]	@ (800213c <main+0x2c4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
		  char command = input_controles[0];
 8001ed0:	4b98      	ldr	r3, [pc, #608]	@ (8002134 <main+0x2bc>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	74fb      	strb	r3, [r7, #19]
		  if (game_over == 0){
 8001ed6:	4b9a      	ldr	r3, [pc, #616]	@ (8002140 <main+0x2c8>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 80ab 	bne.w	8002036 <main+0x1be>
			  switch (command){
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	3b41      	subs	r3, #65	@ 0x41
 8001ee4:	2b28      	cmp	r3, #40	@ 0x28
 8001ee6:	f200 8095 	bhi.w	8002014 <main+0x19c>
 8001eea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef0 <main+0x78>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001ff5 	.word	0x08001ff5
 8001ef4:	08002005 	.word	0x08002005
 8001ef8:	08002015 	.word	0x08002015
 8001efc:	08001fe5 	.word	0x08001fe5
 8001f00:	08002015 	.word	0x08002015
 8001f04:	08002015 	.word	0x08002015
 8001f08:	08002015 	.word	0x08002015
 8001f0c:	08002015 	.word	0x08002015
 8001f10:	08001fd5 	.word	0x08001fd5
 8001f14:	08002015 	.word	0x08002015
 8001f18:	08002015 	.word	0x08002015
 8001f1c:	08002015 	.word	0x08002015
 8001f20:	08002015 	.word	0x08002015
 8001f24:	08002015 	.word	0x08002015
 8001f28:	08002015 	.word	0x08002015
 8001f2c:	08002015 	.word	0x08002015
 8001f30:	08002015 	.word	0x08002015
 8001f34:	08002015 	.word	0x08002015
 8001f38:	08002015 	.word	0x08002015
 8001f3c:	08002015 	.word	0x08002015
 8001f40:	08002015 	.word	0x08002015
 8001f44:	08002015 	.word	0x08002015
 8001f48:	08002015 	.word	0x08002015
 8001f4c:	08002015 	.word	0x08002015
 8001f50:	08002015 	.word	0x08002015
 8001f54:	08002015 	.word	0x08002015
 8001f58:	08002015 	.word	0x08002015
 8001f5c:	08002015 	.word	0x08002015
 8001f60:	08002015 	.word	0x08002015
 8001f64:	08002015 	.word	0x08002015
 8001f68:	08002015 	.word	0x08002015
 8001f6c:	08002015 	.word	0x08002015
 8001f70:	08001fb5 	.word	0x08001fb5
 8001f74:	08001fc5 	.word	0x08001fc5
 8001f78:	08002015 	.word	0x08002015
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	08002015 	.word	0x08002015
 8001f84:	08002015 	.word	0x08002015
 8001f88:	08002015 	.word	0x08002015
 8001f8c:	08002015 	.word	0x08002015
 8001f90:	08001f95 	.word	0x08001f95
			  //Snake 1
			  case 'i':
				  if (dir_snake1 != 3){
 8001f94:	4b6b      	ldr	r3, [pc, #428]	@ (8002144 <main+0x2cc>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d03d      	beq.n	8002018 <main+0x1a0>
					  dir_snake1 = 2;
 8001f9c:	4b69      	ldr	r3, [pc, #420]	@ (8002144 <main+0x2cc>)
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8001fa2:	e039      	b.n	8002018 <main+0x1a0>
			  case 'd':
				  if (dir_snake1 != 2){
 8001fa4:	4b67      	ldr	r3, [pc, #412]	@ (8002144 <main+0x2cc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d037      	beq.n	800201c <main+0x1a4>
					  dir_snake1 = 3;
 8001fac:	4b65      	ldr	r3, [pc, #404]	@ (8002144 <main+0x2cc>)
 8001fae:	2203      	movs	r2, #3
 8001fb0:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8001fb2:	e033      	b.n	800201c <main+0x1a4>
			  case 'a':
				  if (dir_snake1 != 1){
 8001fb4:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <main+0x2cc>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d031      	beq.n	8002020 <main+0x1a8>
					  dir_snake1 = 0;
 8001fbc:	4b61      	ldr	r3, [pc, #388]	@ (8002144 <main+0x2cc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8001fc2:	e02d      	b.n	8002020 <main+0x1a8>
			  case 'b':
				  if (dir_snake1 != 0){
 8001fc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002144 <main+0x2cc>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02b      	beq.n	8002024 <main+0x1ac>
					  dir_snake1 = 1;
 8001fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8002144 <main+0x2cc>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8001fd2:	e027      	b.n	8002024 <main+0x1ac>
			  //Snake 2
			  case 'I':
				  if (dir_snake2 != 3){
 8001fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <main+0x2d0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d025      	beq.n	8002028 <main+0x1b0>
					  dir_snake2 = 2;
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8002148 <main+0x2d0>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8001fe2:	e021      	b.n	8002028 <main+0x1b0>
			  case 'D':
				  if (dir_snake2 != 2){
 8001fe4:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <main+0x2d0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d01f      	beq.n	800202c <main+0x1b4>
					  dir_snake2 = 3;
 8001fec:	4b56      	ldr	r3, [pc, #344]	@ (8002148 <main+0x2d0>)
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8001ff2:	e01b      	b.n	800202c <main+0x1b4>
			  case 'A':
				  if (dir_snake2 != 1){
 8001ff4:	4b54      	ldr	r3, [pc, #336]	@ (8002148 <main+0x2d0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d019      	beq.n	8002030 <main+0x1b8>
					  dir_snake2 = 0;
 8001ffc:	4b52      	ldr	r3, [pc, #328]	@ (8002148 <main+0x2d0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002002:	e015      	b.n	8002030 <main+0x1b8>
			  case 'B':
				  if (dir_snake2 != 0){
 8002004:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <main+0x2d0>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <main+0x1bc>
					  dir_snake2 = 1;
 800200c:	4b4e      	ldr	r3, [pc, #312]	@ (8002148 <main+0x2d0>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002012:	e00f      	b.n	8002034 <main+0x1bc>
			  default:
				  break;
 8002014:	bf00      	nop
 8002016:	e00e      	b.n	8002036 <main+0x1be>
				  break;
 8002018:	bf00      	nop
 800201a:	e00c      	b.n	8002036 <main+0x1be>
				  break;
 800201c:	bf00      	nop
 800201e:	e00a      	b.n	8002036 <main+0x1be>
				  break;
 8002020:	bf00      	nop
 8002022:	e008      	b.n	8002036 <main+0x1be>
				  break;
 8002024:	bf00      	nop
 8002026:	e006      	b.n	8002036 <main+0x1be>
				  break;
 8002028:	bf00      	nop
 800202a:	e004      	b.n	8002036 <main+0x1be>
				  break;
 800202c:	bf00      	nop
 800202e:	e002      	b.n	8002036 <main+0x1be>
				  break;
 8002030:	bf00      	nop
 8002032:	e000      	b.n	8002036 <main+0x1be>
				  break;
 8002034:	bf00      	nop
			  }
		  }

		  if (menu){
 8002036:	4b45      	ldr	r3, [pc, #276]	@ (800214c <main+0x2d4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8093 	beq.w	8002166 <main+0x2ee>
			  update_buttons = 1;
 8002040:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <main+0x2d8>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
			  switch (command){
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	3b61      	subs	r3, #97	@ 0x61
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f200 808b 	bhi.w	8002166 <main+0x2ee>
 8002050:	a201      	add	r2, pc, #4	@ (adr r2, 8002058 <main+0x1e0>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	08002099 	.word	0x08002099
 800205c:	080020af 	.word	0x080020af
 8002060:	08002167 	.word	0x08002167
 8002064:	08002101 	.word	0x08002101
 8002068:	08002167 	.word	0x08002167
 800206c:	08002167 	.word	0x08002167
 8002070:	08002167 	.word	0x08002167
 8002074:	08002167 	.word	0x08002167
 8002078:	080020e3 	.word	0x080020e3
 800207c:	08002167 	.word	0x08002167
 8002080:	08002167 	.word	0x08002167
 8002084:	08002167 	.word	0x08002167
 8002088:	08002167 	.word	0x08002167
 800208c:	08002167 	.word	0x08002167
 8002090:	08002167 	.word	0x08002167
 8002094:	0800211f 	.word	0x0800211f
			  case 'a':
				  if (menu_option != 0){
 8002098:	4b2e      	ldr	r3, [pc, #184]	@ (8002154 <main+0x2dc>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d042      	beq.n	8002126 <main+0x2ae>
					  menu_option -= 1;
 80020a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <main+0x2dc>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <main+0x2dc>)
 80020aa:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 80020ac:	e03b      	b.n	8002126 <main+0x2ae>
			  case 'b':
				  if (menu_window){
 80020ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <main+0x2e0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <main+0x254>
					  if (menu_option < 3){
 80020b6:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <main+0x2dc>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d835      	bhi.n	800212a <main+0x2b2>
						  menu_option += 1;
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <main+0x2dc>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <main+0x2dc>)
 80020c8:	701a      	strb	r2, [r3, #0]
				  } else {
					  if (menu_option < 1){
						  menu_option += 1;
					  }
				  }
				  break;
 80020ca:	e02e      	b.n	800212a <main+0x2b2>
					  if (menu_option < 1){
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <main+0x2dc>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d12a      	bne.n	800212a <main+0x2b2>
						  menu_option += 1;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <main+0x2dc>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <main+0x2dc>)
 80020de:	701a      	strb	r2, [r3, #0]
				  break;
 80020e0:	e023      	b.n	800212a <main+0x2b2>
			  case 'i':
				  if (menu_option == 2){
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <main+0x2dc>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d121      	bne.n	800212e <main+0x2b6>
					  if (max_oranges > 1){
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <main+0x2e4>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d91d      	bls.n	800212e <main+0x2b6>
						  max_oranges -= 1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <main+0x2e4>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <main+0x2e4>)
 80020fc:	701a      	strb	r2, [r3, #0]
					  }
				  }
				  break;
 80020fe:	e016      	b.n	800212e <main+0x2b6>
			  case 'd':
				  if (menu_option == 2){
 8002100:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <main+0x2dc>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d12d      	bne.n	8002164 <main+0x2ec>
					  if (max_oranges < 30){
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <main+0x2e4>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b1d      	cmp	r3, #29
 800210e:	d829      	bhi.n	8002164 <main+0x2ec>
						  max_oranges += 1;
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <main+0x2e4>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b10      	ldr	r3, [pc, #64]	@ (800215c <main+0x2e4>)
 800211a:	701a      	strb	r2, [r3, #0]
					  }
				  }
				  break;
 800211c:	e022      	b.n	8002164 <main+0x2ec>
			  case 'p':
				  select_option = 1;
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <main+0x2e8>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
				  break;
 8002124:	e01f      	b.n	8002166 <main+0x2ee>
				  break;
 8002126:	bf00      	nop
 8002128:	e01d      	b.n	8002166 <main+0x2ee>
				  break;
 800212a:	bf00      	nop
 800212c:	e01b      	b.n	8002166 <main+0x2ee>
				  break;
 800212e:	bf00      	nop
 8002130:	e019      	b.n	8002166 <main+0x2ee>
 8002132:	bf00      	nop
 8002134:	20009448 	.word	0x20009448
 8002138:	20008e30 	.word	0x20008e30
 800213c:	20009449 	.word	0x20009449
 8002140:	20009578 	.word	0x20009578
 8002144:	200096c5 	.word	0x200096c5
 8002148:	20009801 	.word	0x20009801
 800214c:	2000957a 	.word	0x2000957a
 8002150:	2000957f 	.word	0x2000957f
 8002154:	2000957d 	.word	0x2000957d
 8002158:	2000957b 	.word	0x2000957b
 800215c:	20006c34 	.word	0x20006c34
 8002160:	2000957e 	.word	0x2000957e
				  break;
 8002164:	bf00      	nop
			  }
		  }
	  }

	  if (menu){
 8002166:	4ba0      	ldr	r3, [pc, #640]	@ (80023e8 <main+0x570>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8316 	beq.w	800279c <main+0x924>
		  if (menu_window){ //Ventana de ajustes
 8002170:	4b9e      	ldr	r3, [pc, #632]	@ (80023ec <main+0x574>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 823d 	beq.w	80025f4 <main+0x77c>
			  if (select_option){
 800217a:	4b9d      	ldr	r3, [pc, #628]	@ (80023f0 <main+0x578>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d040      	beq.n	8002204 <main+0x38c>
				  select_option = 0;
 8002182:	4b9b      	ldr	r3, [pc, #620]	@ (80023f0 <main+0x578>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
				  switch (menu_option){
 8002188:	4b9a      	ldr	r3, [pc, #616]	@ (80023f4 <main+0x57c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b03      	cmp	r3, #3
 800218e:	f200 8305 	bhi.w	800279c <main+0x924>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <main+0x320>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021d9 	.word	0x080021d9
 80021a0:	0800279d 	.word	0x0800279d
 80021a4:	080021f1 	.word	0x080021f1
				  case 0:
					  if (speed == 450){
 80021a8:	4b93      	ldr	r3, [pc, #588]	@ (80023f8 <main+0x580>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80021b0:	d104      	bne.n	80021bc <main+0x344>
						  speed = 300;
 80021b2:	4b91      	ldr	r3, [pc, #580]	@ (80023f8 <main+0x580>)
 80021b4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021b8:	601a      	str	r2, [r3, #0]
					  } else if (speed == 300){
						  speed = 150;
					  } else {
						  speed = 450;
					  }
					  break;
 80021ba:	e2ef      	b.n	800279c <main+0x924>
					  } else if (speed == 300){
 80021bc:	4b8e      	ldr	r3, [pc, #568]	@ (80023f8 <main+0x580>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80021c4:	d103      	bne.n	80021ce <main+0x356>
						  speed = 150;
 80021c6:	4b8c      	ldr	r3, [pc, #560]	@ (80023f8 <main+0x580>)
 80021c8:	2296      	movs	r2, #150	@ 0x96
 80021ca:	601a      	str	r2, [r3, #0]
					  break;
 80021cc:	e2e6      	b.n	800279c <main+0x924>
						  speed = 450;
 80021ce:	4b8a      	ldr	r3, [pc, #552]	@ (80023f8 <main+0x580>)
 80021d0:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80021d4:	601a      	str	r2, [r3, #0]
					  break;
 80021d6:	e2e1      	b.n	800279c <main+0x924>
				  case 1:
					  if (infinity_mode){
 80021d8:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <main+0x584>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <main+0x370>
						  infinity_mode = 0;
 80021e0:	4b86      	ldr	r3, [pc, #536]	@ (80023fc <main+0x584>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
					  } else {
						  infinity_mode = 1;
					  }
					  break;
 80021e6:	e2d9      	b.n	800279c <main+0x924>
						  infinity_mode = 1;
 80021e8:	4b84      	ldr	r3, [pc, #528]	@ (80023fc <main+0x584>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
					  break;
 80021ee:	e2d5      	b.n	800279c <main+0x924>
				  case 2:
					  break;
				  case 3:
					  menu_window = 0;
 80021f0:	4b7e      	ldr	r3, [pc, #504]	@ (80023ec <main+0x574>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
					  showed_window = 0;
 80021f6:	4b82      	ldr	r3, [pc, #520]	@ (8002400 <main+0x588>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
					  menu_option = 0;
 80021fc:	4b7d      	ldr	r3, [pc, #500]	@ (80023f4 <main+0x57c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
					  break;
 8002202:	e2cb      	b.n	800279c <main+0x924>
				  }
			  } else {
				  // GRAPHICS SETTINGS WINDOW
				  if (showed_window == 0){
 8002204:	4b7e      	ldr	r3, [pc, #504]	@ (8002400 <main+0x588>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d14e      	bne.n	80022aa <main+0x432>
					  fres = f_mount(&fs, "", 0);
 800220c:	2200      	movs	r2, #0
 800220e:	497d      	ldr	r1, [pc, #500]	@ (8002404 <main+0x58c>)
 8002210:	487d      	ldr	r0, [pc, #500]	@ (8002408 <main+0x590>)
 8002212:	f00a fa8b 	bl	800c72c <f_mount>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	4b7c      	ldr	r3, [pc, #496]	@ (800240c <main+0x594>)
 800221c:	701a      	strb	r2, [r3, #0]
					  if (fres == FR_OK){
 800221e:	4b7b      	ldr	r3, [pc, #492]	@ (800240c <main+0x594>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d13e      	bne.n	80022a4 <main+0x42c>
						  fres = f_open(&fil, "menu_1.bin", FA_READ);
 8002226:	2201      	movs	r2, #1
 8002228:	4979      	ldr	r1, [pc, #484]	@ (8002410 <main+0x598>)
 800222a:	487a      	ldr	r0, [pc, #488]	@ (8002414 <main+0x59c>)
 800222c:	f00a fac4 	bl	800c7b8 <f_open>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b75      	ldr	r3, [pc, #468]	@ (800240c <main+0x594>)
 8002236:	701a      	strb	r2, [r3, #0]
						  if (fres == FR_OK) {
 8002238:	4b74      	ldr	r3, [pc, #464]	@ (800240c <main+0x594>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d12c      	bne.n	800229a <main+0x422>
							  for (uint16_t row = 0; row < 240; row+=2){
 8002240:	2300      	movs	r3, #0
 8002242:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002244:	e023      	b.n	800228e <main+0x416>
								  fres = f_read(&fil, menu_buf, sizeof(menu_buf), &br);
 8002246:	4b74      	ldr	r3, [pc, #464]	@ (8002418 <main+0x5a0>)
 8002248:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800224c:	4973      	ldr	r1, [pc, #460]	@ (800241c <main+0x5a4>)
 800224e:	4871      	ldr	r0, [pc, #452]	@ (8002414 <main+0x59c>)
 8002250:	f00a fc7a 	bl	800cb48 <f_read>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b6c      	ldr	r3, [pc, #432]	@ (800240c <main+0x594>)
 800225a:	701a      	strb	r2, [r3, #0]
								  if ((fres == FR_OK)&&(br == sizeof(menu_buf))){
 800225c:	4b6b      	ldr	r3, [pc, #428]	@ (800240c <main+0x594>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <main+0x410>
 8002264:	4b6c      	ldr	r3, [pc, #432]	@ (8002418 <main+0x5a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800226c:	d10c      	bne.n	8002288 <main+0x410>
									  LCD_Bitmap(0, row, 320, 2, menu_buf, 0, 0);
 800226e:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8002270:	2300      	movs	r3, #0
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	4b68      	ldr	r3, [pc, #416]	@ (800241c <main+0x5a4>)
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2302      	movs	r3, #2
 800227e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff f998 	bl	80015b8 <LCD_Bitmap>
							  for (uint16_t row = 0; row < 240; row+=2){
 8002288:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800228a:	3302      	adds	r3, #2
 800228c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800228e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002290:	2bef      	cmp	r3, #239	@ 0xef
 8002292:	d9d8      	bls.n	8002246 <main+0x3ce>
								  }
							  }
							f_close(&fil);
 8002294:	485f      	ldr	r0, [pc, #380]	@ (8002414 <main+0x59c>)
 8002296:	f00a fe34 	bl	800cf02 <f_close>


						}
						  f_mount(NULL, "", 1);
 800229a:	2201      	movs	r2, #1
 800229c:	4959      	ldr	r1, [pc, #356]	@ (8002404 <main+0x58c>)
 800229e:	2000      	movs	r0, #0
 80022a0:	f00a fa44 	bl	800c72c <f_mount>
					  }
					  showed_window = 1;
 80022a4:	4b56      	ldr	r3, [pc, #344]	@ (8002400 <main+0x588>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
				  }
				  if (update_buttons){
 80022aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002420 <main+0x5a8>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8274 	beq.w	800279c <main+0x924>
					  update_buttons = 0;
 80022b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002420 <main+0x5a8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
					  if (speed == 450){
 80022ba:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <main+0x580>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80022c2:	d11d      	bne.n	8002300 <main+0x488>
						  if (menu_option == 0){
 80022c4:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <main+0x57c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10c      	bne.n	80022e6 <main+0x46e>
							  LCD_Bitmap(123, 45, button_speed_low_1_width, button_speed_low_1_height, button_speed_low_1_data, 0, 0);
 80022cc:	2300      	movs	r3, #0
 80022ce:	9302      	str	r3, [sp, #8]
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <main+0x5ac>)
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2316      	movs	r3, #22
 80022da:	2244      	movs	r2, #68	@ 0x44
 80022dc:	212d      	movs	r1, #45	@ 0x2d
 80022de:	207b      	movs	r0, #123	@ 0x7b
 80022e0:	f7ff f96a 	bl	80015b8 <LCD_Bitmap>
 80022e4:	e04c      	b.n	8002380 <main+0x508>
						  } else {
							  LCD_Bitmap(123, 45, button_speed_low_0_width, button_speed_low_0_height, button_speed_low_0_data, 0, 0);
 80022e6:	2300      	movs	r3, #0
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002428 <main+0x5b0>)
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2316      	movs	r3, #22
 80022f4:	2244      	movs	r2, #68	@ 0x44
 80022f6:	212d      	movs	r1, #45	@ 0x2d
 80022f8:	207b      	movs	r0, #123	@ 0x7b
 80022fa:	f7ff f95d 	bl	80015b8 <LCD_Bitmap>
 80022fe:	e03f      	b.n	8002380 <main+0x508>
						  }
					  } else if (speed == 300){
 8002300:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <main+0x580>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002308:	d11d      	bne.n	8002346 <main+0x4ce>
						  if (menu_option == 0){
 800230a:	4b3a      	ldr	r3, [pc, #232]	@ (80023f4 <main+0x57c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <main+0x4b4>
							  LCD_Bitmap(123, 45, button_speed_medium_1_width, button_speed_medium_1_height, button_speed_medium_1_data, 0, 0);
 8002312:	2300      	movs	r3, #0
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	2300      	movs	r3, #0
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	4b44      	ldr	r3, [pc, #272]	@ (800242c <main+0x5b4>)
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2316      	movs	r3, #22
 8002320:	2244      	movs	r2, #68	@ 0x44
 8002322:	212d      	movs	r1, #45	@ 0x2d
 8002324:	207b      	movs	r0, #123	@ 0x7b
 8002326:	f7ff f947 	bl	80015b8 <LCD_Bitmap>
 800232a:	e029      	b.n	8002380 <main+0x508>
						  } else {
							  LCD_Bitmap(123, 45, button_speed_medium_0_width, button_speed_medium_0_height, button_speed_medium_0_data, 0, 0);
 800232c:	2300      	movs	r3, #0
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	4b3e      	ldr	r3, [pc, #248]	@ (8002430 <main+0x5b8>)
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2316      	movs	r3, #22
 800233a:	2244      	movs	r2, #68	@ 0x44
 800233c:	212d      	movs	r1, #45	@ 0x2d
 800233e:	207b      	movs	r0, #123	@ 0x7b
 8002340:	f7ff f93a 	bl	80015b8 <LCD_Bitmap>
 8002344:	e01c      	b.n	8002380 <main+0x508>
						  }
					  } else {
						  if (menu_option == 0){
 8002346:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <main+0x57c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <main+0x4f0>
							  LCD_Bitmap(123, 45, button_speed_high_1_width, button_speed_high_1_height, button_speed_high_1_data, 0, 0);
 800234e:	2300      	movs	r3, #0
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	2300      	movs	r3, #0
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	4b37      	ldr	r3, [pc, #220]	@ (8002434 <main+0x5bc>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2316      	movs	r3, #22
 800235c:	2244      	movs	r2, #68	@ 0x44
 800235e:	212d      	movs	r1, #45	@ 0x2d
 8002360:	207b      	movs	r0, #123	@ 0x7b
 8002362:	f7ff f929 	bl	80015b8 <LCD_Bitmap>
 8002366:	e00b      	b.n	8002380 <main+0x508>
						  } else {
							  LCD_Bitmap(123, 45, button_speed_high_0_width, button_speed_high_0_height, button_speed_high_0_data, 0, 0);
 8002368:	2300      	movs	r3, #0
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <main+0x5c0>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2316      	movs	r3, #22
 8002376:	2244      	movs	r2, #68	@ 0x44
 8002378:	212d      	movs	r1, #45	@ 0x2d
 800237a:	207b      	movs	r0, #123	@ 0x7b
 800237c:	f7ff f91c 	bl	80015b8 <LCD_Bitmap>
						  }
					  }
					  if (infinity_mode){
 8002380:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <main+0x584>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01d      	beq.n	80023c4 <main+0x54c>
						  if (menu_option == 1){
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <main+0x57c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10c      	bne.n	80023aa <main+0x532>
							  LCD_Bitmap(122, 104, button_mode_infinity_1_width, button_mode_infinity_1_height, button_mode_infinity_1_data, 0, 0);
 8002390:	2300      	movs	r3, #0
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2300      	movs	r3, #0
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	4b28      	ldr	r3, [pc, #160]	@ (800243c <main+0x5c4>)
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2318      	movs	r3, #24
 800239e:	2245      	movs	r2, #69	@ 0x45
 80023a0:	2168      	movs	r1, #104	@ 0x68
 80023a2:	207a      	movs	r0, #122	@ 0x7a
 80023a4:	f7ff f908 	bl	80015b8 <LCD_Bitmap>
 80023a8:	e05a      	b.n	8002460 <main+0x5e8>
						  } else {
							  LCD_Bitmap(122, 104, button_mode_infinity_0_width, button_mode_infinity_0_height, button_mode_infinity_0_data, 0, 0);
 80023aa:	2300      	movs	r3, #0
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <main+0x5c8>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2318      	movs	r3, #24
 80023b8:	2245      	movs	r2, #69	@ 0x45
 80023ba:	2168      	movs	r1, #104	@ 0x68
 80023bc:	207a      	movs	r0, #122	@ 0x7a
 80023be:	f7ff f8fb 	bl	80015b8 <LCD_Bitmap>
 80023c2:	e04d      	b.n	8002460 <main+0x5e8>
						  }
					  } else {
						  if (menu_option == 1){
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <main+0x57c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d13d      	bne.n	8002448 <main+0x5d0>
							  LCD_Bitmap(122, 104, button_mode_limited_1_width, button_mode_limited_1_height, button_mode_limited_1_data, 0, 0);
 80023cc:	2300      	movs	r3, #0
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <main+0x5cc>)
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2318      	movs	r3, #24
 80023da:	2245      	movs	r2, #69	@ 0x45
 80023dc:	2168      	movs	r1, #104	@ 0x68
 80023de:	207a      	movs	r0, #122	@ 0x7a
 80023e0:	f7ff f8ea 	bl	80015b8 <LCD_Bitmap>
 80023e4:	e03c      	b.n	8002460 <main+0x5e8>
 80023e6:	bf00      	nop
 80023e8:	2000957a 	.word	0x2000957a
 80023ec:	2000957b 	.word	0x2000957b
 80023f0:	2000957e 	.word	0x2000957e
 80023f4:	2000957d 	.word	0x2000957d
 80023f8:	20006c30 	.word	0x20006c30
 80023fc:	20006c2c 	.word	0x20006c2c
 8002400:	2000957c 	.word	0x2000957c
 8002404:	0800e1c8 	.word	0x0800e1c8
 8002408:	20006cd8 	.word	0x20006cd8
 800240c:	20008d40 	.word	0x20008d40
 8002410:	0800e1d8 	.word	0x0800e1d8
 8002414:	20007d10 	.word	0x20007d10
 8002418:	20008d44 	.word	0x20008d44
 800241c:	20008f48 	.word	0x20008f48
 8002420:	2000957f 	.word	0x2000957f
 8002424:	08011d3c 	.word	0x08011d3c
 8002428:	080181f4 	.word	0x080181f4
 800242c:	080128ec 	.word	0x080128ec
 8002430:	08018da4 	.word	0x08018da4
 8002434:	0801118c 	.word	0x0801118c
 8002438:	08017644 	.word	0x08017644
 800243c:	0800f02c 	.word	0x0800f02c
 8002440:	080134ec 	.word	0x080134ec
 8002444:	0800fd1c 	.word	0x0800fd1c
						  } else {
							  LCD_Bitmap(122, 104, button_mode_limited_0_width, button_mode_limited_0_height, button_mode_limited_0_data, 0, 0);
 8002448:	2300      	movs	r3, #0
 800244a:	9302      	str	r3, [sp, #8]
 800244c:	2300      	movs	r3, #0
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	4b85      	ldr	r3, [pc, #532]	@ (8002668 <main+0x7f0>)
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2318      	movs	r3, #24
 8002456:	2245      	movs	r2, #69	@ 0x45
 8002458:	2168      	movs	r1, #104	@ 0x68
 800245a:	207a      	movs	r0, #122	@ 0x7a
 800245c:	f7ff f8ac 	bl	80015b8 <LCD_Bitmap>
						  }
					  }
					  // NUMBERS ORANGES
					  if (menu_option == 2){
 8002460:	4b82      	ldr	r3, [pc, #520]	@ (800266c <main+0x7f4>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d134      	bne.n	80024d2 <main+0x65a>
						  if (max_oranges > 1){
 8002468:	4b81      	ldr	r3, [pc, #516]	@ (8002670 <main+0x7f8>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d90c      	bls.n	800248a <main+0x612>
							  LCD_Bitmap(137, 160, button_arrow_left_1_width, button_arrow_left_1_height, button_arrow_left_1_data, 0, 0);
 8002470:	2300      	movs	r3, #0
 8002472:	9302      	str	r3, [sp, #8]
 8002474:	2300      	movs	r3, #0
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	4b7e      	ldr	r3, [pc, #504]	@ (8002674 <main+0x7fc>)
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	230e      	movs	r3, #14
 800247e:	2207      	movs	r2, #7
 8002480:	21a0      	movs	r1, #160	@ 0xa0
 8002482:	2089      	movs	r0, #137	@ 0x89
 8002484:	f7ff f898 	bl	80015b8 <LCD_Bitmap>
 8002488:	e008      	b.n	800249c <main+0x624>
						  } else {
							  FillRect(137, 160, button_arrow_left_1_width, button_arrow_left_1_height, 0xE302);
 800248a:	f24e 3302 	movw	r3, #58114	@ 0xe302
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	230e      	movs	r3, #14
 8002492:	2207      	movs	r2, #7
 8002494:	21a0      	movs	r1, #160	@ 0xa0
 8002496:	2089      	movs	r0, #137	@ 0x89
 8002498:	f7ff f834 	bl	8001504 <FillRect>
						  }
						  if (max_oranges < 30){
 800249c:	4b74      	ldr	r3, [pc, #464]	@ (8002670 <main+0x7f8>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b1d      	cmp	r3, #29
 80024a2:	d80c      	bhi.n	80024be <main+0x646>
							  LCD_Bitmap(176, 160, button_arrow_right_1_width, button_arrow_right_1_height, button_arrow_right_1_data, 0, 0);
 80024a4:	2300      	movs	r3, #0
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <main+0x800>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	230e      	movs	r3, #14
 80024b2:	2207      	movs	r2, #7
 80024b4:	21a0      	movs	r1, #160	@ 0xa0
 80024b6:	20b0      	movs	r0, #176	@ 0xb0
 80024b8:	f7ff f87e 	bl	80015b8 <LCD_Bitmap>
 80024bc:	e03d      	b.n	800253a <main+0x6c2>
						  } else {
							  FillRect(176, 160, button_arrow_right_1_width, button_arrow_right_1_height, 0xE302);
 80024be:	f24e 3302 	movw	r3, #58114	@ 0xe302
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	230e      	movs	r3, #14
 80024c6:	2207      	movs	r2, #7
 80024c8:	21a0      	movs	r1, #160	@ 0xa0
 80024ca:	20b0      	movs	r0, #176	@ 0xb0
 80024cc:	f7ff f81a 	bl	8001504 <FillRect>
 80024d0:	e033      	b.n	800253a <main+0x6c2>
						  }
					  } else {
						  if (max_oranges > 1){
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <main+0x7f8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d90c      	bls.n	80024f4 <main+0x67c>
							  LCD_Bitmap(137, 160, button_arrow_left_0_width, button_arrow_left_0_height, button_arrow_left_0_data, 0, 0);
 80024da:	2300      	movs	r3, #0
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	4b66      	ldr	r3, [pc, #408]	@ (800267c <main+0x804>)
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	230e      	movs	r3, #14
 80024e8:	2207      	movs	r2, #7
 80024ea:	21a0      	movs	r1, #160	@ 0xa0
 80024ec:	2089      	movs	r0, #137	@ 0x89
 80024ee:	f7ff f863 	bl	80015b8 <LCD_Bitmap>
 80024f2:	e008      	b.n	8002506 <main+0x68e>
						  } else {
							  FillRect(137, 160, button_arrow_left_0_width, button_arrow_left_0_height, 0xE302);
 80024f4:	f24e 3302 	movw	r3, #58114	@ 0xe302
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	230e      	movs	r3, #14
 80024fc:	2207      	movs	r2, #7
 80024fe:	21a0      	movs	r1, #160	@ 0xa0
 8002500:	2089      	movs	r0, #137	@ 0x89
 8002502:	f7fe ffff 	bl	8001504 <FillRect>
						  }
						  if (max_oranges < 30){
 8002506:	4b5a      	ldr	r3, [pc, #360]	@ (8002670 <main+0x7f8>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b1d      	cmp	r3, #29
 800250c:	d80c      	bhi.n	8002528 <main+0x6b0>
							  LCD_Bitmap(176, 160, button_arrow_right_0_width, button_arrow_right_0_height, button_arrow_right_0_data, 0, 0);
 800250e:	2300      	movs	r3, #0
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	2300      	movs	r3, #0
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <main+0x808>)
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	230e      	movs	r3, #14
 800251c:	2207      	movs	r2, #7
 800251e:	21a0      	movs	r1, #160	@ 0xa0
 8002520:	20b0      	movs	r0, #176	@ 0xb0
 8002522:	f7ff f849 	bl	80015b8 <LCD_Bitmap>
 8002526:	e008      	b.n	800253a <main+0x6c2>
						  } else {
							  FillRect(176, 160, button_arrow_right_0_width, button_arrow_right_0_height, 0xE302);
 8002528:	f24e 3302 	movw	r3, #58114	@ 0xe302
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	230e      	movs	r3, #14
 8002530:	2207      	movs	r2, #7
 8002532:	21a0      	movs	r1, #160	@ 0xa0
 8002534:	20b0      	movs	r0, #176	@ 0xb0
 8002536:	f7fe ffe5 	bl	8001504 <FillRect>
						  }
					  }
					  uint8_t d_max_oranges = max_oranges / 10;
 800253a:	4b4d      	ldr	r3, [pc, #308]	@ (8002670 <main+0x7f8>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4a51      	ldr	r2, [pc, #324]	@ (8002684 <main+0x80c>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	74bb      	strb	r3, [r7, #18]
					  uint8_t u_max_oranges = max_oranges % 10;
 8002548:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <main+0x7f8>)
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	4b4d      	ldr	r3, [pc, #308]	@ (8002684 <main+0x80c>)
 800254e:	fba3 1302 	umull	r1, r3, r3, r2
 8002552:	08d9      	lsrs	r1, r3, #3
 8002554:	460b      	mov	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	747b      	strb	r3, [r7, #17]
					  LCD_Bitmap(147, 162, button_numbers_width[d_max_oranges], button_numbers_height[d_max_oranges], button_numbers_data[d_max_oranges], 0, 0);
 8002560:	7cbb      	ldrb	r3, [r7, #18]
 8002562:	4a49      	ldr	r2, [pc, #292]	@ (8002688 <main+0x810>)
 8002564:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002568:	7cbb      	ldrb	r3, [r7, #18]
 800256a:	4948      	ldr	r1, [pc, #288]	@ (800268c <main+0x814>)
 800256c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002570:	7cbb      	ldrb	r3, [r7, #18]
 8002572:	4847      	ldr	r0, [pc, #284]	@ (8002690 <main+0x818>)
 8002574:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002578:	2000      	movs	r0, #0
 800257a:	9002      	str	r0, [sp, #8]
 800257c:	2000      	movs	r0, #0
 800257e:	9001      	str	r0, [sp, #4]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	21a2      	movs	r1, #162	@ 0xa2
 8002586:	2093      	movs	r0, #147	@ 0x93
 8002588:	f7ff f816 	bl	80015b8 <LCD_Bitmap>
					  LCD_Bitmap(162, 162, button_numbers_width[u_max_oranges], button_numbers_height[u_max_oranges], button_numbers_data[u_max_oranges], 0, 0);
 800258c:	7c7b      	ldrb	r3, [r7, #17]
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <main+0x810>)
 8002590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002594:	7c7b      	ldrb	r3, [r7, #17]
 8002596:	493d      	ldr	r1, [pc, #244]	@ (800268c <main+0x814>)
 8002598:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800259c:	7c7b      	ldrb	r3, [r7, #17]
 800259e:	483c      	ldr	r0, [pc, #240]	@ (8002690 <main+0x818>)
 80025a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80025a4:	2000      	movs	r0, #0
 80025a6:	9002      	str	r0, [sp, #8]
 80025a8:	2000      	movs	r0, #0
 80025aa:	9001      	str	r0, [sp, #4]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	460b      	mov	r3, r1
 80025b0:	21a2      	movs	r1, #162	@ 0xa2
 80025b2:	20a2      	movs	r0, #162	@ 0xa2
 80025b4:	f7ff f800 	bl	80015b8 <LCD_Bitmap>
					  // ------------------
					  if (menu_option == 3){
 80025b8:	4b2c      	ldr	r3, [pc, #176]	@ (800266c <main+0x7f4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d10c      	bne.n	80025da <main+0x762>
						  LCD_Bitmap(138, 189, button_back_1_width, button_back_1_height, button_back_1_data, 0, 0);
 80025c0:	2300      	movs	r3, #0
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	4b32      	ldr	r3, [pc, #200]	@ (8002694 <main+0x81c>)
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2310      	movs	r3, #16
 80025ce:	222b      	movs	r2, #43	@ 0x2b
 80025d0:	21bd      	movs	r1, #189	@ 0xbd
 80025d2:	208a      	movs	r0, #138	@ 0x8a
 80025d4:	f7fe fff0 	bl	80015b8 <LCD_Bitmap>
 80025d8:	e0e0      	b.n	800279c <main+0x924>
					  } else {
						  LCD_Bitmap(138, 189, button_back_0_width, button_back_0_height, button_back_0_data, 0, 0);
 80025da:	2300      	movs	r3, #0
 80025dc:	9302      	str	r3, [sp, #8]
 80025de:	2300      	movs	r3, #0
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <main+0x820>)
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2310      	movs	r3, #16
 80025e8:	222b      	movs	r2, #43	@ 0x2b
 80025ea:	21bd      	movs	r1, #189	@ 0xbd
 80025ec:	208a      	movs	r0, #138	@ 0x8a
 80025ee:	f7fe ffe3 	bl	80015b8 <LCD_Bitmap>
 80025f2:	e0d3      	b.n	800279c <main+0x924>
				  //---------------------------
			  }


		  } else { // Ventana principal
			  if (select_option){
 80025f4:	4b29      	ldr	r3, [pc, #164]	@ (800269c <main+0x824>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <main+0x7ac>
				  select_option = 0;
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <main+0x824>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
				  if (menu_option){ // SELECT SETTINGS
 8002602:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <main+0x7f4>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <main+0x7a0>
					  menu_window = 1;
 800260a:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <main+0x828>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
					  showed_window = 0;
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <main+0x82c>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e0c1      	b.n	800279c <main+0x924>
				  } else {
					  menu = 0;
 8002618:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <main+0x830>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
					  restart_game();
 800261e:	f7ff f8c1 	bl	80017a4 <restart_game>
 8002622:	e0bb      	b.n	800279c <main+0x924>
				  }
			  } else {
				  // GRAPHICS MAIN WINDOW
				  if (showed_window == 0){
 8002624:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <main+0x82c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d17b      	bne.n	8002724 <main+0x8ac>
					  fres = f_mount(&fs, "", 0);
 800262c:	2200      	movs	r2, #0
 800262e:	491f      	ldr	r1, [pc, #124]	@ (80026ac <main+0x834>)
 8002630:	481f      	ldr	r0, [pc, #124]	@ (80026b0 <main+0x838>)
 8002632:	f00a f87b 	bl	800c72c <f_mount>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <main+0x83c>)
 800263c:	701a      	strb	r2, [r3, #0]
					  if (fres == FR_OK){
 800263e:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <main+0x83c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d16b      	bne.n	800271e <main+0x8a6>
						  fres = f_open(&fil, "menu_0.bin", FA_READ);
 8002646:	2201      	movs	r2, #1
 8002648:	491b      	ldr	r1, [pc, #108]	@ (80026b8 <main+0x840>)
 800264a:	481c      	ldr	r0, [pc, #112]	@ (80026bc <main+0x844>)
 800264c:	f00a f8b4 	bl	800c7b8 <f_open>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <main+0x83c>)
 8002656:	701a      	strb	r2, [r3, #0]
						  if (fres == FR_OK) {
 8002658:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <main+0x83c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d159      	bne.n	8002714 <main+0x89c>
							  for (uint16_t row = 0; row < 240; row+=2){
 8002660:	2300      	movs	r3, #0
 8002662:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002664:	e050      	b.n	8002708 <main+0x890>
 8002666:	bf00      	nop
 8002668:	080141dc 	.word	0x080141dc
 800266c:	2000957d 	.word	0x2000957d
 8002670:	20006c34 	.word	0x20006c34
 8002674:	0800e320 	.word	0x0800e320
 8002678:	0800e4a8 	.word	0x0800e4a8
 800267c:	0800e25c 	.word	0x0800e25c
 8002680:	0800e3e4 	.word	0x0800e3e4
 8002684:	cccccccd 	.word	0xcccccccd
 8002688:	0801349c 	.word	0x0801349c
 800268c:	080134c4 	.word	0x080134c4
 8002690:	20006c04 	.word	0x20006c04
 8002694:	0800eacc 	.word	0x0800eacc
 8002698:	0800e56c 	.word	0x0800e56c
 800269c:	2000957e 	.word	0x2000957e
 80026a0:	2000957b 	.word	0x2000957b
 80026a4:	2000957c 	.word	0x2000957c
 80026a8:	2000957a 	.word	0x2000957a
 80026ac:	0800e1c8 	.word	0x0800e1c8
 80026b0:	20006cd8 	.word	0x20006cd8
 80026b4:	20008d40 	.word	0x20008d40
 80026b8:	0800e1cc 	.word	0x0800e1cc
 80026bc:	20007d10 	.word	0x20007d10
								  fres = f_read(&fil, menu_buf, sizeof(menu_buf), &br);
 80026c0:	4b9d      	ldr	r3, [pc, #628]	@ (8002938 <main+0xac0>)
 80026c2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80026c6:	499d      	ldr	r1, [pc, #628]	@ (800293c <main+0xac4>)
 80026c8:	489d      	ldr	r0, [pc, #628]	@ (8002940 <main+0xac8>)
 80026ca:	f00a fa3d 	bl	800cb48 <f_read>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b9c      	ldr	r3, [pc, #624]	@ (8002944 <main+0xacc>)
 80026d4:	701a      	strb	r2, [r3, #0]
								  if ((fres == FR_OK)&&(br == sizeof(menu_buf))){
 80026d6:	4b9b      	ldr	r3, [pc, #620]	@ (8002944 <main+0xacc>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <main+0x88a>
 80026de:	4b96      	ldr	r3, [pc, #600]	@ (8002938 <main+0xac0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80026e6:	d10c      	bne.n	8002702 <main+0x88a>
									  LCD_Bitmap(0, row, 320, 2, menu_buf, 0, 0);
 80026e8:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80026ea:	2300      	movs	r3, #0
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	4b92      	ldr	r3, [pc, #584]	@ (800293c <main+0xac4>)
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2302      	movs	r3, #2
 80026f8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe ff5b 	bl	80015b8 <LCD_Bitmap>
							  for (uint16_t row = 0; row < 240; row+=2){
 8002702:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002704:	3302      	adds	r3, #2
 8002706:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002708:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800270a:	2bef      	cmp	r3, #239	@ 0xef
 800270c:	d9d8      	bls.n	80026c0 <main+0x848>
								  }
							  }
							f_close(&fil);
 800270e:	488c      	ldr	r0, [pc, #560]	@ (8002940 <main+0xac8>)
 8002710:	f00a fbf7 	bl	800cf02 <f_close>


						}
						  f_mount(NULL, "", 1);
 8002714:	2201      	movs	r2, #1
 8002716:	498c      	ldr	r1, [pc, #560]	@ (8002948 <main+0xad0>)
 8002718:	2000      	movs	r0, #0
 800271a:	f00a f807 	bl	800c72c <f_mount>
					  }
					  showed_window = 1;
 800271e:	4b8b      	ldr	r3, [pc, #556]	@ (800294c <main+0xad4>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
				  }
				  //LCD_Bitmap(40, 40, button_arrow_left_0_width, button_arrow_left_0_height, button_arrow_left_0_data, 0, 0);
				  if (update_buttons){
 8002724:	4b8a      	ldr	r3, [pc, #552]	@ (8002950 <main+0xad8>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d037      	beq.n	800279c <main+0x924>
					  update_buttons = 0;
 800272c:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <main+0xad8>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
					  if (menu_option){
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <main+0xadc>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d018      	beq.n	800276c <main+0x8f4>
						  LCD_Bitmap(108, 157, button_settings_1_width, button_settings_1_height, button_settings_1_data, 0, 0);
 800273a:	2300      	movs	r3, #0
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	2300      	movs	r3, #0
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	4b85      	ldr	r3, [pc, #532]	@ (8002958 <main+0xae0>)
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2319      	movs	r3, #25
 8002748:	2265      	movs	r2, #101	@ 0x65
 800274a:	219d      	movs	r1, #157	@ 0x9d
 800274c:	206c      	movs	r0, #108	@ 0x6c
 800274e:	f7fe ff33 	bl	80015b8 <LCD_Bitmap>
						  LCD_Bitmap(124, 131, button_start_0_width, button_start_0_height, button_start_0_data, 0, 0);
 8002752:	2300      	movs	r3, #0
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	2300      	movs	r3, #0
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	4b80      	ldr	r3, [pc, #512]	@ (800295c <main+0xae4>)
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2317      	movs	r3, #23
 8002760:	2245      	movs	r2, #69	@ 0x45
 8002762:	2183      	movs	r1, #131	@ 0x83
 8002764:	207c      	movs	r0, #124	@ 0x7c
 8002766:	f7fe ff27 	bl	80015b8 <LCD_Bitmap>
 800276a:	e017      	b.n	800279c <main+0x924>
					  } else {
						  LCD_Bitmap(108, 157, button_settings_0_width, button_settings_0_height, button_settings_0_data, 0, 0);
 800276c:	2300      	movs	r3, #0
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2300      	movs	r3, #0
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	4b7a      	ldr	r3, [pc, #488]	@ (8002960 <main+0xae8>)
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2319      	movs	r3, #25
 800277a:	2265      	movs	r2, #101	@ 0x65
 800277c:	219d      	movs	r1, #157	@ 0x9d
 800277e:	206c      	movs	r0, #108	@ 0x6c
 8002780:	f7fe ff1a 	bl	80015b8 <LCD_Bitmap>
						  LCD_Bitmap(124, 131, button_start_1_width, button_start_1_height, button_start_1_data, 0, 0);
 8002784:	2300      	movs	r3, #0
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	2300      	movs	r3, #0
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <main+0xaec>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2317      	movs	r3, #23
 8002792:	2245      	movs	r2, #69	@ 0x45
 8002794:	2183      	movs	r1, #131	@ 0x83
 8002796:	207c      	movs	r0, #124	@ 0x7c
 8002798:	f7fe ff0e 	bl	80015b8 <LCD_Bitmap>

		  }
	  }


	  uint32_t currentTick = HAL_GetTick();
 800279c:	f003 ffba 	bl	8006714 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]
	  if ((currentTick-lastInterruptTick)>speed){
 80027a2:	4b71      	ldr	r3, [pc, #452]	@ (8002968 <main+0xaf0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	4a70      	ldr	r2, [pc, #448]	@ (800296c <main+0xaf4>)
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f67f ab86 	bls.w	8001ec0 <main+0x48>
		  lastInterruptTick = currentTick;
 80027b4:	4a6c      	ldr	r2, [pc, #432]	@ (8002968 <main+0xaf0>)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6013      	str	r3, [r2, #0]

		  if (game_over == 0){
 80027ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <main+0xaf8>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 853f 	bne.w	8003242 <main+0x13ca>
			  //GENERACION NARANJAS
			  uint32_t currentTick = HAL_GetTick();
 80027c4:	f003 ffa6 	bl	8006714 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
			  if ((currentTick - lastITick_orange)>speed*2){
 80027ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002974 <main+0xafc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	4a66      	ldr	r2, [pc, #408]	@ (800296c <main+0xaf4>)
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	0052      	lsls	r2, r2, #1
 80027d8:	4293      	cmp	r3, r2
 80027da:	f240 80f3 	bls.w	80029c4 <main+0xb4c>
				  lastITick_orange = currentTick;
 80027de:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <main+0xafc>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	6013      	str	r3, [r2, #0]
				  if (orange_count < max_oranges){
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <main+0xb00>)
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	4b64      	ldr	r3, [pc, #400]	@ (800297c <main+0xb04>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f080 80e9 	bcs.w	80029c4 <main+0xb4c>
					  available_cells = HEIGHT*WIDTH-len_snake1-len_snake2-orange_count;
 80027f2:	4b63      	ldr	r3, [pc, #396]	@ (8002980 <main+0xb08>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80027fa:	4a62      	ldr	r2, [pc, #392]	@ (8002984 <main+0xb0c>)
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	4a5d      	ldr	r2, [pc, #372]	@ (8002978 <main+0xb00>)
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	4a60      	ldr	r2, [pc, #384]	@ (8002988 <main+0xb10>)
 8002808:	6013      	str	r3, [r2, #0]
					  orange_random_pos = get_random(0, available_cells-1);
 800280a:	4b5f      	ldr	r3, [pc, #380]	@ (8002988 <main+0xb10>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3b01      	subs	r3, #1
 8002810:	4619      	mov	r1, r3
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe ffae 	bl	8001774 <get_random>
 8002818:	4603      	mov	r3, r0
 800281a:	4a5c      	ldr	r2, [pc, #368]	@ (800298c <main+0xb14>)
 800281c:	6013      	str	r3, [r2, #0]
					  cell_count = -1;
 800281e:	4b5c      	ldr	r3, [pc, #368]	@ (8002990 <main+0xb18>)
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	601a      	str	r2, [r3, #0]
					  positioned_orange = 0;
 8002826:	4b5b      	ldr	r3, [pc, #364]	@ (8002994 <main+0xb1c>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
					  for  (int i = 0; i<HEIGHT; i++){
 800282c:	2300      	movs	r3, #0
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002830:	e0c2      	b.n	80029b8 <main+0xb40>
						  for (int j = 0; j<WIDTH; j++){
 8002832:	2300      	movs	r3, #0
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
 8002836:	e07b      	b.n	8002930 <main+0xab8>
							  possible_orange_cell = map[i][j] - map[i][j]%2;
 8002838:	4957      	ldr	r1, [pc, #348]	@ (8002998 <main+0xb20>)
 800283a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	18ca      	adds	r2, r1, r3
 8002846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	4a52      	ldr	r2, [pc, #328]	@ (800299c <main+0xb24>)
 8002852:	6013      	str	r3, [r2, #0]
							  if ((possible_orange_cell != 6)&&(possible_orange_cell != 4)&&(possible_orange_cell != 2)){
 8002854:	4b51      	ldr	r3, [pc, #324]	@ (800299c <main+0xb24>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b06      	cmp	r3, #6
 800285a:	d00c      	beq.n	8002876 <main+0x9fe>
 800285c:	4b4f      	ldr	r3, [pc, #316]	@ (800299c <main+0xb24>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d008      	beq.n	8002876 <main+0x9fe>
 8002864:	4b4d      	ldr	r3, [pc, #308]	@ (800299c <main+0xb24>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d004      	beq.n	8002876 <main+0x9fe>
								  cell_count += 1;
 800286c:	4b48      	ldr	r3, [pc, #288]	@ (8002990 <main+0xb18>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a47      	ldr	r2, [pc, #284]	@ (8002990 <main+0xb18>)
 8002874:	6013      	str	r3, [r2, #0]
							  }
							  if (cell_count == orange_random_pos){
 8002876:	4b46      	ldr	r3, [pc, #280]	@ (8002990 <main+0xb18>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b44      	ldr	r3, [pc, #272]	@ (800298c <main+0xb14>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d14f      	bne.n	8002922 <main+0xaaa>
								  map[i][j] += 6;
 8002882:	4945      	ldr	r1, [pc, #276]	@ (8002998 <main+0xb20>)
 8002884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	18ca      	adds	r2, r1, r3
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	3306      	adds	r3, #6
 8002898:	b2d8      	uxtb	r0, r3
 800289a:	493f      	ldr	r1, [pc, #252]	@ (8002998 <main+0xb20>)
 800289c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	18ca      	adds	r2, r1, r3
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	4413      	add	r3, r2
 80028ac:	4602      	mov	r2, r0
 80028ae:	701a      	strb	r2, [r3, #0]
								  if (map[i][j]%2 == 1){
 80028b0:	4939      	ldr	r1, [pc, #228]	@ (8002998 <main+0xb20>)
 80028b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	18ca      	adds	r2, r1, r3
 80028be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <main+0xa78>
									  LCD_Bitmap(j*SQ_SIZE, i*SQ_SIZE, SQ_SIZE, SQ_SIZE, orange_1, 0, 0);
 80028ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4618      	mov	r0, r3
 80028d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	9302      	str	r3, [sp, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	4b2f      	ldr	r3, [pc, #188]	@ (80029a0 <main+0xb28>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2310      	movs	r3, #16
 80028e8:	2210      	movs	r2, #16
 80028ea:	f7fe fe65 	bl	80015b8 <LCD_Bitmap>
 80028ee:	e00f      	b.n	8002910 <main+0xa98>
								  } else {
									  LCD_Bitmap(j*SQ_SIZE, i*SQ_SIZE, SQ_SIZE, SQ_SIZE, orange_0, 0, 0);
 80028f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4618      	mov	r0, r3
 80028f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	2300      	movs	r3, #0
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <main+0xb2c>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2310      	movs	r3, #16
 800290a:	2210      	movs	r2, #16
 800290c:	f7fe fe54 	bl	80015b8 <LCD_Bitmap>
								  }
								  //FillRect(j*SQ_SIZE, i*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0xFC00);
								  orange_count += 1;
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <main+0xb00>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <main+0xb00>)
 800291a:	701a      	strb	r2, [r3, #0]
								  positioned_orange = 1;
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <main+0xb1c>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]
							  }
							  if (positioned_orange == 1){
 8002922:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <main+0xb1c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d03e      	beq.n	80029a8 <main+0xb30>
						  for (int j = 0; j<WIDTH; j++){
 800292a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800292c:	3301      	adds	r3, #1
 800292e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002932:	2b13      	cmp	r3, #19
 8002934:	dd80      	ble.n	8002838 <main+0x9c0>
 8002936:	e038      	b.n	80029aa <main+0xb32>
 8002938:	20008d44 	.word	0x20008d44
 800293c:	20008f48 	.word	0x20008f48
 8002940:	20007d10 	.word	0x20007d10
 8002944:	20008d40 	.word	0x20008d40
 8002948:	0800e1c8 	.word	0x0800e1c8
 800294c:	2000957c 	.word	0x2000957c
 8002950:	2000957f 	.word	0x2000957f
 8002954:	2000957d 	.word	0x2000957d
 8002958:	08016288 	.word	0x08016288
 800295c:	08019954 	.word	0x08019954
 8002960:	08014ecc 	.word	0x08014ecc
 8002964:	0801a5bc 	.word	0x0801a5bc
 8002968:	20008f38 	.word	0x20008f38
 800296c:	20006c30 	.word	0x20006c30
 8002970:	20009578 	.word	0x20009578
 8002974:	20008f3c 	.word	0x20008f3c
 8002978:	20009595 	.word	0x20009595
 800297c:	20006c34 	.word	0x20006c34
 8002980:	200096c4 	.word	0x200096c4
 8002984:	20009800 	.word	0x20009800
 8002988:	20009580 	.word	0x20009580
 800298c:	20009584 	.word	0x20009584
 8002990:	20009588 	.word	0x20009588
 8002994:	20009590 	.word	0x20009590
 8002998:	2000944c 	.word	0x2000944c
 800299c:	2000958c 	.word	0x2000958c
 80029a0:	20004a04 	.word	0x20004a04
 80029a4:	20004804 	.word	0x20004804
								  break;
 80029a8:	bf00      	nop
							  }
						  }
						  if (positioned_orange == 1){
 80029aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002c24 <main+0xdac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d007      	beq.n	80029c2 <main+0xb4a>
					  for  (int i = 0; i<HEIGHT; i++){
 80029b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b4:	3301      	adds	r3, #1
 80029b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ba:	2b0e      	cmp	r3, #14
 80029bc:	f77f af39 	ble.w	8002832 <main+0x9ba>
 80029c0:	e000      	b.n	80029c4 <main+0xb4c>
							  break;
 80029c2:	bf00      	nop
					  }
				  }
			  }

			  // LOGICA MOVIMIENTO SERPIENTE 1
			  snake1_prev_x = snake1[len_snake1-1][0];
 80029c4:	4b98      	ldr	r3, [pc, #608]	@ (8002c28 <main+0xdb0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	4998      	ldr	r1, [pc, #608]	@ (8002c2c <main+0xdb4>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	440b      	add	r3, r1
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	4b96      	ldr	r3, [pc, #600]	@ (8002c30 <main+0xdb8>)
 80029d8:	701a      	strb	r2, [r3, #0]
			  snake1_prev_y = snake1[len_snake1-1][1];
 80029da:	4b93      	ldr	r3, [pc, #588]	@ (8002c28 <main+0xdb0>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	1e5a      	subs	r2, r3, #1
 80029e0:	4992      	ldr	r1, [pc, #584]	@ (8002c2c <main+0xdb4>)
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	3301      	adds	r3, #1
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	4b91      	ldr	r3, [pc, #580]	@ (8002c34 <main+0xdbc>)
 80029f0:	701a      	strb	r2, [r3, #0]
			  //snake1_prev_dir = snake1[len_snake1-1][2];
			  if (((snake1[len_snake1-2][1] - snake1[len_snake1-3][1]) == 1)||((snake1[len_snake1-2][1] - snake1[len_snake1-3][1]) == -(HEIGHT-1))){
 80029f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002c28 <main+0xdb0>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	1e9a      	subs	r2, r3, #2
 80029f8:	498c      	ldr	r1, [pc, #560]	@ (8002c2c <main+0xdb4>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	3301      	adds	r3, #1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	4b87      	ldr	r3, [pc, #540]	@ (8002c28 <main+0xdb0>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	1eda      	subs	r2, r3, #3
 8002a0e:	4987      	ldr	r1, [pc, #540]	@ (8002c2c <main+0xdb4>)
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	3301      	adds	r3, #1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	1ac3      	subs	r3, r0, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d018      	beq.n	8002a54 <main+0xbdc>
 8002a22:	4b81      	ldr	r3, [pc, #516]	@ (8002c28 <main+0xdb0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	1e9a      	subs	r2, r3, #2
 8002a28:	4980      	ldr	r1, [pc, #512]	@ (8002c2c <main+0xdb4>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	3301      	adds	r3, #1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	4b7b      	ldr	r3, [pc, #492]	@ (8002c28 <main+0xdb0>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	1eda      	subs	r2, r3, #3
 8002a3e:	497b      	ldr	r1, [pc, #492]	@ (8002c2c <main+0xdb4>)
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	3301      	adds	r3, #1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	1ac3      	subs	r3, r0, r3
 8002a4e:	f113 0f0e 	cmn.w	r3, #14
 8002a52:	d103      	bne.n	8002a5c <main+0xbe4>
				  snake1_prev_dir = 0;
 8002a54:	4b78      	ldr	r3, [pc, #480]	@ (8002c38 <main+0xdc0>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e068      	b.n	8002b2e <main+0xcb6>
			  } else if (((snake1[len_snake1-2][1] - snake1[len_snake1-3][1]) == -1)||((snake1[len_snake1-2][1] - snake1[len_snake1-3][1]) == (HEIGHT-1))){
 8002a5c:	4b72      	ldr	r3, [pc, #456]	@ (8002c28 <main+0xdb0>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	1e9a      	subs	r2, r3, #2
 8002a62:	4972      	ldr	r1, [pc, #456]	@ (8002c2c <main+0xdb4>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	4b6d      	ldr	r3, [pc, #436]	@ (8002c28 <main+0xdb0>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	1eda      	subs	r2, r3, #3
 8002a78:	496c      	ldr	r1, [pc, #432]	@ (8002c2c <main+0xdb4>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	3301      	adds	r3, #1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	1ac3      	subs	r3, r0, r3
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d017      	beq.n	8002abe <main+0xc46>
 8002a8e:	4b66      	ldr	r3, [pc, #408]	@ (8002c28 <main+0xdb0>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	1e9a      	subs	r2, r3, #2
 8002a94:	4965      	ldr	r1, [pc, #404]	@ (8002c2c <main+0xdb4>)
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4b60      	ldr	r3, [pc, #384]	@ (8002c28 <main+0xdb0>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	1eda      	subs	r2, r3, #3
 8002aaa:	4960      	ldr	r1, [pc, #384]	@ (8002c2c <main+0xdb4>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	1ac3      	subs	r3, r0, r3
 8002aba:	2b0e      	cmp	r3, #14
 8002abc:	d103      	bne.n	8002ac6 <main+0xc4e>
				  snake1_prev_dir = 1;
 8002abe:	4b5e      	ldr	r3, [pc, #376]	@ (8002c38 <main+0xdc0>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e033      	b.n	8002b2e <main+0xcb6>
			  } else if (((snake1[len_snake1-2][0] - snake1[len_snake1-3][0]) == 1)||((snake1[len_snake1-2][0] - snake1[len_snake1-3][0]) == -(WIDTH-1))){
 8002ac6:	4b58      	ldr	r3, [pc, #352]	@ (8002c28 <main+0xdb0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	1e9a      	subs	r2, r3, #2
 8002acc:	4957      	ldr	r1, [pc, #348]	@ (8002c2c <main+0xdb4>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <main+0xdb0>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	1eda      	subs	r2, r3, #3
 8002ae0:	4952      	ldr	r1, [pc, #328]	@ (8002c2c <main+0xdb4>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	1ac3      	subs	r3, r0, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d016      	beq.n	8002b20 <main+0xca8>
 8002af2:	4b4d      	ldr	r3, [pc, #308]	@ (8002c28 <main+0xdb0>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	1e9a      	subs	r2, r3, #2
 8002af8:	494c      	ldr	r1, [pc, #304]	@ (8002c2c <main+0xdb4>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	4b48      	ldr	r3, [pc, #288]	@ (8002c28 <main+0xdb0>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	1eda      	subs	r2, r3, #3
 8002b0c:	4947      	ldr	r1, [pc, #284]	@ (8002c2c <main+0xdb4>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	1ac3      	subs	r3, r0, r3
 8002b1a:	f113 0f13 	cmn.w	r3, #19
 8002b1e:	d103      	bne.n	8002b28 <main+0xcb0>
				  snake1_prev_dir = 2;
 8002b20:	4b45      	ldr	r3, [pc, #276]	@ (8002c38 <main+0xdc0>)
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e002      	b.n	8002b2e <main+0xcb6>
			  } else {
				  snake1_prev_dir = 3;
 8002b28:	4b43      	ldr	r3, [pc, #268]	@ (8002c38 <main+0xdc0>)
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	701a      	strb	r2, [r3, #0]
			  }
			  switch (dir_snake1){
 8002b2e:	4b43      	ldr	r3, [pc, #268]	@ (8002c3c <main+0xdc4>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	f200 8121 	bhi.w	8002d7a <main+0xf02>
 8002b38:	a201      	add	r2, pc, #4	@ (adr r2, 8002b40 <main+0xcc8>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002bcf 	.word	0x08002bcf
 8002b48:	08002c7f 	.word	0x08002c7f
 8002b4c:	08002cfd 	.word	0x08002cfd
			  case 0: // Arriba
				  snake1_next_x = snake1[0][0];
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <main+0xdb4>)
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <main+0xdc8>)
 8002b56:	701a      	strb	r2, [r3, #0]
				  if (snake1[0][1] == 0){
 8002b58:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <main+0xdb4>)
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <main+0xd00>
					  if (infinity_mode){
 8002b60:	4b38      	ldr	r3, [pc, #224]	@ (8002c44 <main+0xdcc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <main+0xcf8>
						  snake1_next_y = HEIGHT-1;
 8002b68:	4b37      	ldr	r3, [pc, #220]	@ (8002c48 <main+0xdd0>)
 8002b6a:	220e      	movs	r2, #14
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e009      	b.n	8002b84 <main+0xd0c>
					  } else {
						  snake1_lost = 1;
 8002b70:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <main+0xdd4>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e005      	b.n	8002b84 <main+0xd0c>
					  }
				  } else {
					  snake1_next_y -= 1;
 8002b78:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <main+0xdd0>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b31      	ldr	r3, [pc, #196]	@ (8002c48 <main+0xdd0>)
 8002b82:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake1[0][2] == 2)||(snake1[0][2] == 4)||(snake1[0][2] == 6)){
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <main+0xdb4>)
 8002b86:	789b      	ldrb	r3, [r3, #2]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d007      	beq.n	8002b9c <main+0xd24>
 8002b8c:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <main+0xdb4>)
 8002b8e:	789b      	ldrb	r3, [r3, #2]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d003      	beq.n	8002b9c <main+0xd24>
 8002b94:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <main+0xdb4>)
 8002b96:	789b      	ldrb	r3, [r3, #2]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d103      	bne.n	8002ba4 <main+0xd2c>
					  snake1_next_dir = 7;
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <main+0xdd8>)
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e013      	b.n	8002bcc <main+0xd54>
				  } else if ((snake1[0][2] == 3)||(snake1[0][2] == 5)||(snake1[0][2] == 7)){
 8002ba4:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <main+0xdb4>)
 8002ba6:	789b      	ldrb	r3, [r3, #2]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d007      	beq.n	8002bbc <main+0xd44>
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <main+0xdb4>)
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d003      	beq.n	8002bbc <main+0xd44>
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <main+0xdb4>)
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	2b07      	cmp	r3, #7
 8002bba:	d103      	bne.n	8002bc4 <main+0xd4c>
					  snake1_next_dir = 6;
 8002bbc:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <main+0xdd8>)
 8002bbe:	2206      	movs	r2, #6
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e003      	b.n	8002bcc <main+0xd54>
				  } else {
					  snake1_next_dir = 0;
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <main+0xdd8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002bca:	e0d6      	b.n	8002d7a <main+0xf02>
 8002bcc:	e0d5      	b.n	8002d7a <main+0xf02>
			  case 1: // Abajo
				  snake1_next_x = snake1[0][0];
 8002bce:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <main+0xdb4>)
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <main+0xdc8>)
 8002bd4:	701a      	strb	r2, [r3, #0]
				  if (snake1[0][1] == HEIGHT-1){
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <main+0xdb4>)
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	2b0e      	cmp	r3, #14
 8002bdc:	d10b      	bne.n	8002bf6 <main+0xd7e>
					  if (infinity_mode){
 8002bde:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <main+0xdcc>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <main+0xd76>
						  snake1_next_y = 0;
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <main+0xdd0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e009      	b.n	8002c02 <main+0xd8a>
					  } else {
						  snake1_lost = 1;
 8002bee:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <main+0xdd4>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e005      	b.n	8002c02 <main+0xd8a>
					  }
				  } else {
					  snake1_next_y += 1;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <main+0xdd0>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <main+0xdd0>)
 8002c00:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake1[0][2] == 2)||(snake1[0][2] == 4)||(snake1[0][2] == 6)){
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <main+0xdb4>)
 8002c04:	789b      	ldrb	r3, [r3, #2]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d007      	beq.n	8002c1a <main+0xda2>
 8002c0a:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <main+0xdb4>)
 8002c0c:	789b      	ldrb	r3, [r3, #2]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <main+0xda2>
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <main+0xdb4>)
 8002c14:	789b      	ldrb	r3, [r3, #2]
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d11c      	bne.n	8002c54 <main+0xddc>
					  snake1_next_dir = 5;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <main+0xdd8>)
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e02c      	b.n	8002c7c <main+0xe04>
 8002c22:	bf00      	nop
 8002c24:	20009590 	.word	0x20009590
 8002c28:	200096c4 	.word	0x200096c4
 8002c2c:	20009598 	.word	0x20009598
 8002c30:	200096c8 	.word	0x200096c8
 8002c34:	200096c9 	.word	0x200096c9
 8002c38:	200096ca 	.word	0x200096ca
 8002c3c:	200096c5 	.word	0x200096c5
 8002c40:	200096cb 	.word	0x200096cb
 8002c44:	20006c2c 	.word	0x20006c2c
 8002c48:	200096cc 	.word	0x200096cc
 8002c4c:	200096c7 	.word	0x200096c7
 8002c50:	200096cd 	.word	0x200096cd
				  } else if ((snake1[0][2] == 3)||(snake1[0][2] == 5)||(snake1[0][2] == 7)){
 8002c54:	4b89      	ldr	r3, [pc, #548]	@ (8002e7c <main+0x1004>)
 8002c56:	789b      	ldrb	r3, [r3, #2]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d007      	beq.n	8002c6c <main+0xdf4>
 8002c5c:	4b87      	ldr	r3, [pc, #540]	@ (8002e7c <main+0x1004>)
 8002c5e:	789b      	ldrb	r3, [r3, #2]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d003      	beq.n	8002c6c <main+0xdf4>
 8002c64:	4b85      	ldr	r3, [pc, #532]	@ (8002e7c <main+0x1004>)
 8002c66:	789b      	ldrb	r3, [r3, #2]
 8002c68:	2b07      	cmp	r3, #7
 8002c6a:	d103      	bne.n	8002c74 <main+0xdfc>
					  snake1_next_dir = 4;
 8002c6c:	4b84      	ldr	r3, [pc, #528]	@ (8002e80 <main+0x1008>)
 8002c6e:	2204      	movs	r2, #4
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e003      	b.n	8002c7c <main+0xe04>
				  } else {
					  snake1_next_dir = 1;
 8002c74:	4b82      	ldr	r3, [pc, #520]	@ (8002e80 <main+0x1008>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002c7a:	e07e      	b.n	8002d7a <main+0xf02>
 8002c7c:	e07d      	b.n	8002d7a <main+0xf02>
			  case 2: // Izquierda
				  snake1_next_y = snake1[0][1];
 8002c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e7c <main+0x1004>)
 8002c80:	785a      	ldrb	r2, [r3, #1]
 8002c82:	4b80      	ldr	r3, [pc, #512]	@ (8002e84 <main+0x100c>)
 8002c84:	701a      	strb	r2, [r3, #0]
				  if (snake1[0][0] == 0){
 8002c86:	4b7d      	ldr	r3, [pc, #500]	@ (8002e7c <main+0x1004>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <main+0xe2e>
					  if (infinity_mode){
 8002c8e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e88 <main+0x1010>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <main+0xe26>
						  snake1_next_x = WIDTH-1;
 8002c96:	4b7d      	ldr	r3, [pc, #500]	@ (8002e8c <main+0x1014>)
 8002c98:	2213      	movs	r2, #19
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e009      	b.n	8002cb2 <main+0xe3a>
					  } else {
						  snake1_lost = 1;
 8002c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e90 <main+0x1018>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e005      	b.n	8002cb2 <main+0xe3a>
					  }
				  } else {
					  snake1_next_x -= 1;
 8002ca6:	4b79      	ldr	r3, [pc, #484]	@ (8002e8c <main+0x1014>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b77      	ldr	r3, [pc, #476]	@ (8002e8c <main+0x1014>)
 8002cb0:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake1[0][2] == 0)||(snake1[0][2] == 7)||(snake1[0][2] == 6)){
 8002cb2:	4b72      	ldr	r3, [pc, #456]	@ (8002e7c <main+0x1004>)
 8002cb4:	789b      	ldrb	r3, [r3, #2]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <main+0xe52>
 8002cba:	4b70      	ldr	r3, [pc, #448]	@ (8002e7c <main+0x1004>)
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	2b07      	cmp	r3, #7
 8002cc0:	d003      	beq.n	8002cca <main+0xe52>
 8002cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e7c <main+0x1004>)
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d103      	bne.n	8002cd2 <main+0xe5a>
					  snake1_next_dir = 4;
 8002cca:	4b6d      	ldr	r3, [pc, #436]	@ (8002e80 <main+0x1008>)
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e013      	b.n	8002cfa <main+0xe82>
				  } else if ((snake1[0][2] == 1)||(snake1[0][2] == 4)||(snake1[0][2] == 5)){
 8002cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <main+0x1004>)
 8002cd4:	789b      	ldrb	r3, [r3, #2]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d007      	beq.n	8002cea <main+0xe72>
 8002cda:	4b68      	ldr	r3, [pc, #416]	@ (8002e7c <main+0x1004>)
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d003      	beq.n	8002cea <main+0xe72>
 8002ce2:	4b66      	ldr	r3, [pc, #408]	@ (8002e7c <main+0x1004>)
 8002ce4:	789b      	ldrb	r3, [r3, #2]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d103      	bne.n	8002cf2 <main+0xe7a>
					  snake1_next_dir = 6;
 8002cea:	4b65      	ldr	r3, [pc, #404]	@ (8002e80 <main+0x1008>)
 8002cec:	2206      	movs	r2, #6
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e003      	b.n	8002cfa <main+0xe82>
				  } else {
					  snake1_next_dir = 2;
 8002cf2:	4b63      	ldr	r3, [pc, #396]	@ (8002e80 <main+0x1008>)
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002cf8:	e03f      	b.n	8002d7a <main+0xf02>
 8002cfa:	e03e      	b.n	8002d7a <main+0xf02>
			  case 3: // Derecha
				  snake1_next_y = snake1[0][1];
 8002cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <main+0x1004>)
 8002cfe:	785a      	ldrb	r2, [r3, #1]
 8002d00:	4b60      	ldr	r3, [pc, #384]	@ (8002e84 <main+0x100c>)
 8002d02:	701a      	strb	r2, [r3, #0]
				  if (snake1[0][0] == WIDTH-1){
 8002d04:	4b5d      	ldr	r3, [pc, #372]	@ (8002e7c <main+0x1004>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b13      	cmp	r3, #19
 8002d0a:	d10b      	bne.n	8002d24 <main+0xeac>
					  if (infinity_mode){
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e88 <main+0x1010>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <main+0xea4>
						  snake1_next_x = 0;
 8002d14:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <main+0x1014>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e009      	b.n	8002d30 <main+0xeb8>
					  } else {
						  snake1_lost = 1;
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002e90 <main+0x1018>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e005      	b.n	8002d30 <main+0xeb8>
					  }
				  } else {
					  snake1_next_x += 1;
 8002d24:	4b59      	ldr	r3, [pc, #356]	@ (8002e8c <main+0x1014>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b57      	ldr	r3, [pc, #348]	@ (8002e8c <main+0x1014>)
 8002d2e:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake1[0][2] == 0)||(snake1[0][2] == 7)||(snake1[0][2] == 6)){
 8002d30:	4b52      	ldr	r3, [pc, #328]	@ (8002e7c <main+0x1004>)
 8002d32:	789b      	ldrb	r3, [r3, #2]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <main+0xed0>
 8002d38:	4b50      	ldr	r3, [pc, #320]	@ (8002e7c <main+0x1004>)
 8002d3a:	789b      	ldrb	r3, [r3, #2]
 8002d3c:	2b07      	cmp	r3, #7
 8002d3e:	d003      	beq.n	8002d48 <main+0xed0>
 8002d40:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <main+0x1004>)
 8002d42:	789b      	ldrb	r3, [r3, #2]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d103      	bne.n	8002d50 <main+0xed8>
					  snake1_next_dir = 5;
 8002d48:	4b4d      	ldr	r3, [pc, #308]	@ (8002e80 <main+0x1008>)
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e013      	b.n	8002d78 <main+0xf00>
				  } else if ((snake1[0][2] == 1)||(snake1[0][2] == 4)||(snake1[0][2] == 5)){
 8002d50:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <main+0x1004>)
 8002d52:	789b      	ldrb	r3, [r3, #2]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d007      	beq.n	8002d68 <main+0xef0>
 8002d58:	4b48      	ldr	r3, [pc, #288]	@ (8002e7c <main+0x1004>)
 8002d5a:	789b      	ldrb	r3, [r3, #2]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d003      	beq.n	8002d68 <main+0xef0>
 8002d60:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <main+0x1004>)
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d103      	bne.n	8002d70 <main+0xef8>
					  snake1_next_dir = 7;
 8002d68:	4b45      	ldr	r3, [pc, #276]	@ (8002e80 <main+0x1008>)
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e003      	b.n	8002d78 <main+0xf00>
				  } else {
					  snake1_next_dir = 3;
 8002d70:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <main+0x1008>)
 8002d72:	2203      	movs	r2, #3
 8002d74:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002d76:	e7ff      	b.n	8002d78 <main+0xf00>
 8002d78:	bf00      	nop
			  }

			  // LOGICA MOVIMIENTO SERPIENTE 2

			  snake2_prev_x = snake2[len_snake2-1][0];
 8002d7a:	4b46      	ldr	r3, [pc, #280]	@ (8002e94 <main+0x101c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	4945      	ldr	r1, [pc, #276]	@ (8002e98 <main+0x1020>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	4b43      	ldr	r3, [pc, #268]	@ (8002e9c <main+0x1024>)
 8002d8e:	701a      	strb	r2, [r3, #0]
			  snake2_prev_y = snake2[len_snake2-1][1];
 8002d90:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <main+0x101c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	4940      	ldr	r1, [pc, #256]	@ (8002e98 <main+0x1020>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3301      	adds	r3, #1
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea0 <main+0x1028>)
 8002da6:	701a      	strb	r2, [r3, #0]
			  //snake2_prev_dir = snake2[len_snake2-1][2];
			  if (((snake2[len_snake2-2][1] - snake2[len_snake2-3][1]) == 1)||((snake2[len_snake2-2][1] - snake2[len_snake2-3][1]) == -(HEIGHT-1))){
 8002da8:	4b3a      	ldr	r3, [pc, #232]	@ (8002e94 <main+0x101c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	1e9a      	subs	r2, r3, #2
 8002dae:	493a      	ldr	r1, [pc, #232]	@ (8002e98 <main+0x1020>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	3301      	adds	r3, #1
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	4b35      	ldr	r3, [pc, #212]	@ (8002e94 <main+0x101c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	1eda      	subs	r2, r3, #3
 8002dc4:	4934      	ldr	r1, [pc, #208]	@ (8002e98 <main+0x1020>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3301      	adds	r3, #1
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	1ac3      	subs	r3, r0, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d018      	beq.n	8002e0a <main+0xf92>
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e94 <main+0x101c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	1e9a      	subs	r2, r3, #2
 8002dde:	492e      	ldr	r1, [pc, #184]	@ (8002e98 <main+0x1020>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	3301      	adds	r3, #1
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <main+0x101c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	1eda      	subs	r2, r3, #3
 8002df4:	4928      	ldr	r1, [pc, #160]	@ (8002e98 <main+0x1020>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3301      	adds	r3, #1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	1ac3      	subs	r3, r0, r3
 8002e04:	f113 0f0e 	cmn.w	r3, #14
 8002e08:	d103      	bne.n	8002e12 <main+0xf9a>
				  snake2_prev_dir = 0;
 8002e0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ea4 <main+0x102c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e07e      	b.n	8002f10 <main+0x1098>
			  } else if (((snake2[len_snake2-2][1] - snake2[len_snake2-3][1]) == -1)||((snake2[len_snake2-2][1] - snake2[len_snake2-3][1]) == (HEIGHT-1))){
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <main+0x101c>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	1e9a      	subs	r2, r3, #2
 8002e18:	491f      	ldr	r1, [pc, #124]	@ (8002e98 <main+0x1020>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	3301      	adds	r3, #1
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <main+0x101c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	1eda      	subs	r2, r3, #3
 8002e2e:	491a      	ldr	r1, [pc, #104]	@ (8002e98 <main+0x1020>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	3301      	adds	r3, #1
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	1ac3      	subs	r3, r0, r3
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d017      	beq.n	8002e74 <main+0xffc>
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <main+0x101c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	1e9a      	subs	r2, r3, #2
 8002e4a:	4913      	ldr	r1, [pc, #76]	@ (8002e98 <main+0x1020>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	3301      	adds	r3, #1
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <main+0x101c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	1eda      	subs	r2, r3, #3
 8002e60:	490d      	ldr	r1, [pc, #52]	@ (8002e98 <main+0x1020>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	1ac3      	subs	r3, r0, r3
 8002e70:	2b0e      	cmp	r3, #14
 8002e72:	d119      	bne.n	8002ea8 <main+0x1030>
				  snake2_prev_dir = 1;
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <main+0x102c>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e049      	b.n	8002f10 <main+0x1098>
 8002e7c:	20009598 	.word	0x20009598
 8002e80:	200096cd 	.word	0x200096cd
 8002e84:	200096cc 	.word	0x200096cc
 8002e88:	20006c2c 	.word	0x20006c2c
 8002e8c:	200096cb 	.word	0x200096cb
 8002e90:	200096c7 	.word	0x200096c7
 8002e94:	20009800 	.word	0x20009800
 8002e98:	200096d4 	.word	0x200096d4
 8002e9c:	20009804 	.word	0x20009804
 8002ea0:	20009805 	.word	0x20009805
 8002ea4:	20009806 	.word	0x20009806
			  } else if (((snake2[len_snake2-2][0] - snake2[len_snake2-3][0]) == 1)||((snake2[len_snake2-2][0] - snake2[len_snake2-3][0]) == -(WIDTH-1))){
 8002ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80030d4 <main+0x125c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	1e9a      	subs	r2, r3, #2
 8002eae:	498a      	ldr	r1, [pc, #552]	@ (80030d8 <main+0x1260>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	4b85      	ldr	r3, [pc, #532]	@ (80030d4 <main+0x125c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	1eda      	subs	r2, r3, #3
 8002ec2:	4985      	ldr	r1, [pc, #532]	@ (80030d8 <main+0x1260>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	1ac3      	subs	r3, r0, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d016      	beq.n	8002f02 <main+0x108a>
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	@ (80030d4 <main+0x125c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	1e9a      	subs	r2, r3, #2
 8002eda:	497f      	ldr	r1, [pc, #508]	@ (80030d8 <main+0x1260>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80030d4 <main+0x125c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	1eda      	subs	r2, r3, #3
 8002eee:	497a      	ldr	r1, [pc, #488]	@ (80030d8 <main+0x1260>)
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	1ac3      	subs	r3, r0, r3
 8002efc:	f113 0f13 	cmn.w	r3, #19
 8002f00:	d103      	bne.n	8002f0a <main+0x1092>
				  snake2_prev_dir = 2;
 8002f02:	4b76      	ldr	r3, [pc, #472]	@ (80030dc <main+0x1264>)
 8002f04:	2202      	movs	r2, #2
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e002      	b.n	8002f10 <main+0x1098>
			  } else {
				  snake2_prev_dir = 3;
 8002f0a:	4b74      	ldr	r3, [pc, #464]	@ (80030dc <main+0x1264>)
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	701a      	strb	r2, [r3, #0]
			  }
			  switch (dir_snake2){
 8002f10:	4b73      	ldr	r3, [pc, #460]	@ (80030e0 <main+0x1268>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	f200 8120 	bhi.w	800315a <main+0x12e2>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <main+0x10a8>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002faf 	.word	0x08002faf
 8002f28:	0800302d 	.word	0x0800302d
 8002f2c:	080030ab 	.word	0x080030ab
			  case 0: // Arriba
				  snake2_next_x = snake2[0][0];
 8002f30:	4b69      	ldr	r3, [pc, #420]	@ (80030d8 <main+0x1260>)
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	4b6b      	ldr	r3, [pc, #428]	@ (80030e4 <main+0x126c>)
 8002f36:	701a      	strb	r2, [r3, #0]
				  if (snake2[0][1] == 0){
 8002f38:	4b67      	ldr	r3, [pc, #412]	@ (80030d8 <main+0x1260>)
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <main+0x10e0>
					  if (infinity_mode){
 8002f40:	4b69      	ldr	r3, [pc, #420]	@ (80030e8 <main+0x1270>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <main+0x10d8>
						  snake2_next_y = HEIGHT-1;
 8002f48:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <main+0x1274>)
 8002f4a:	220e      	movs	r2, #14
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e009      	b.n	8002f64 <main+0x10ec>
					  } else {
						  snake2_lost = 1;
 8002f50:	4b67      	ldr	r3, [pc, #412]	@ (80030f0 <main+0x1278>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e005      	b.n	8002f64 <main+0x10ec>
					  }
				  } else {
					  snake2_next_y -= 1;
 8002f58:	4b64      	ldr	r3, [pc, #400]	@ (80030ec <main+0x1274>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <main+0x1274>)
 8002f62:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake2[0][2] == 2)||(snake2[0][2] == 4)||(snake2[0][2] == 6)){
 8002f64:	4b5c      	ldr	r3, [pc, #368]	@ (80030d8 <main+0x1260>)
 8002f66:	789b      	ldrb	r3, [r3, #2]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d007      	beq.n	8002f7c <main+0x1104>
 8002f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80030d8 <main+0x1260>)
 8002f6e:	789b      	ldrb	r3, [r3, #2]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d003      	beq.n	8002f7c <main+0x1104>
 8002f74:	4b58      	ldr	r3, [pc, #352]	@ (80030d8 <main+0x1260>)
 8002f76:	789b      	ldrb	r3, [r3, #2]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d103      	bne.n	8002f84 <main+0x110c>
					  snake2_next_dir = 7;
 8002f7c:	4b5d      	ldr	r3, [pc, #372]	@ (80030f4 <main+0x127c>)
 8002f7e:	2207      	movs	r2, #7
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e013      	b.n	8002fac <main+0x1134>
				  } else if ((snake2[0][2] == 3)||(snake2[0][2] == 5)||(snake2[0][2] == 7)){
 8002f84:	4b54      	ldr	r3, [pc, #336]	@ (80030d8 <main+0x1260>)
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d007      	beq.n	8002f9c <main+0x1124>
 8002f8c:	4b52      	ldr	r3, [pc, #328]	@ (80030d8 <main+0x1260>)
 8002f8e:	789b      	ldrb	r3, [r3, #2]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d003      	beq.n	8002f9c <main+0x1124>
 8002f94:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <main+0x1260>)
 8002f96:	789b      	ldrb	r3, [r3, #2]
 8002f98:	2b07      	cmp	r3, #7
 8002f9a:	d103      	bne.n	8002fa4 <main+0x112c>
					  snake2_next_dir = 6;
 8002f9c:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <main+0x127c>)
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e003      	b.n	8002fac <main+0x1134>
				  } else {
					  snake2_next_dir = 0;
 8002fa4:	4b53      	ldr	r3, [pc, #332]	@ (80030f4 <main+0x127c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8002faa:	e0d6      	b.n	800315a <main+0x12e2>
 8002fac:	e0d5      	b.n	800315a <main+0x12e2>
			  case 1: // Abajo
				  snake2_next_x = snake2[0][0];
 8002fae:	4b4a      	ldr	r3, [pc, #296]	@ (80030d8 <main+0x1260>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80030e4 <main+0x126c>)
 8002fb4:	701a      	strb	r2, [r3, #0]
				  if (snake2[0][1] == HEIGHT-1){
 8002fb6:	4b48      	ldr	r3, [pc, #288]	@ (80030d8 <main+0x1260>)
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	2b0e      	cmp	r3, #14
 8002fbc:	d10b      	bne.n	8002fd6 <main+0x115e>
					  if (infinity_mode){
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80030e8 <main+0x1270>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <main+0x1156>
						  snake2_next_y = 0;
 8002fc6:	4b49      	ldr	r3, [pc, #292]	@ (80030ec <main+0x1274>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e009      	b.n	8002fe2 <main+0x116a>
					  } else {
						  snake2_lost = 1;
 8002fce:	4b48      	ldr	r3, [pc, #288]	@ (80030f0 <main+0x1278>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e005      	b.n	8002fe2 <main+0x116a>
					  }
				  } else {
					  snake2_next_y += 1;
 8002fd6:	4b45      	ldr	r3, [pc, #276]	@ (80030ec <main+0x1274>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4b43      	ldr	r3, [pc, #268]	@ (80030ec <main+0x1274>)
 8002fe0:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake2[0][2] == 2)||(snake2[0][2] == 4)||(snake2[0][2] == 6)){
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <main+0x1260>)
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d007      	beq.n	8002ffa <main+0x1182>
 8002fea:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <main+0x1260>)
 8002fec:	789b      	ldrb	r3, [r3, #2]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d003      	beq.n	8002ffa <main+0x1182>
 8002ff2:	4b39      	ldr	r3, [pc, #228]	@ (80030d8 <main+0x1260>)
 8002ff4:	789b      	ldrb	r3, [r3, #2]
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d103      	bne.n	8003002 <main+0x118a>
					  snake2_next_dir = 5;
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <main+0x127c>)
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e013      	b.n	800302a <main+0x11b2>
				  } else if ((snake2[0][2] == 3)||(snake2[0][2] == 5)||(snake2[0][2] == 7)){
 8003002:	4b35      	ldr	r3, [pc, #212]	@ (80030d8 <main+0x1260>)
 8003004:	789b      	ldrb	r3, [r3, #2]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d007      	beq.n	800301a <main+0x11a2>
 800300a:	4b33      	ldr	r3, [pc, #204]	@ (80030d8 <main+0x1260>)
 800300c:	789b      	ldrb	r3, [r3, #2]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d003      	beq.n	800301a <main+0x11a2>
 8003012:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <main+0x1260>)
 8003014:	789b      	ldrb	r3, [r3, #2]
 8003016:	2b07      	cmp	r3, #7
 8003018:	d103      	bne.n	8003022 <main+0x11aa>
					  snake2_next_dir = 4;
 800301a:	4b36      	ldr	r3, [pc, #216]	@ (80030f4 <main+0x127c>)
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e003      	b.n	800302a <main+0x11b2>
				  } else {
					  snake2_next_dir = 1;
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <main+0x127c>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8003028:	e097      	b.n	800315a <main+0x12e2>
 800302a:	e096      	b.n	800315a <main+0x12e2>
			  case 2: // Izquierda
				  snake2_next_y = snake2[0][1];
 800302c:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <main+0x1260>)
 800302e:	785a      	ldrb	r2, [r3, #1]
 8003030:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <main+0x1274>)
 8003032:	701a      	strb	r2, [r3, #0]
				  if (snake2[0][0] == 0){
 8003034:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <main+0x1260>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <main+0x11dc>
					  if (infinity_mode){
 800303c:	4b2a      	ldr	r3, [pc, #168]	@ (80030e8 <main+0x1270>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <main+0x11d4>
						  snake2_next_x = WIDTH-1;
 8003044:	4b27      	ldr	r3, [pc, #156]	@ (80030e4 <main+0x126c>)
 8003046:	2213      	movs	r2, #19
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e009      	b.n	8003060 <main+0x11e8>
					  } else {
						  snake2_lost = 1;
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <main+0x1278>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e005      	b.n	8003060 <main+0x11e8>
					  }
				  } else {
					  snake2_next_x -= 1;
 8003054:	4b23      	ldr	r3, [pc, #140]	@ (80030e4 <main+0x126c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <main+0x126c>)
 800305e:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake2[0][2] == 0)||(snake2[0][2] == 7)||(snake2[0][2] == 6)){
 8003060:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <main+0x1260>)
 8003062:	789b      	ldrb	r3, [r3, #2]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <main+0x1200>
 8003068:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <main+0x1260>)
 800306a:	789b      	ldrb	r3, [r3, #2]
 800306c:	2b07      	cmp	r3, #7
 800306e:	d003      	beq.n	8003078 <main+0x1200>
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <main+0x1260>)
 8003072:	789b      	ldrb	r3, [r3, #2]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d103      	bne.n	8003080 <main+0x1208>
					  snake2_next_dir = 4;
 8003078:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <main+0x127c>)
 800307a:	2204      	movs	r2, #4
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e013      	b.n	80030a8 <main+0x1230>
				  } else if ((snake2[0][2] == 1)||(snake2[0][2] == 4)||(snake2[0][2] == 5)){
 8003080:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <main+0x1260>)
 8003082:	789b      	ldrb	r3, [r3, #2]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d007      	beq.n	8003098 <main+0x1220>
 8003088:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <main+0x1260>)
 800308a:	789b      	ldrb	r3, [r3, #2]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d003      	beq.n	8003098 <main+0x1220>
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <main+0x1260>)
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d103      	bne.n	80030a0 <main+0x1228>
					  snake2_next_dir = 6;
 8003098:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <main+0x127c>)
 800309a:	2206      	movs	r2, #6
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e003      	b.n	80030a8 <main+0x1230>
				  } else {
					  snake2_next_dir = 2;
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <main+0x127c>)
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 80030a6:	e058      	b.n	800315a <main+0x12e2>
 80030a8:	e057      	b.n	800315a <main+0x12e2>
			  case 3: // Derecha
				  snake2_next_y = snake2[0][1];
 80030aa:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <main+0x1260>)
 80030ac:	785a      	ldrb	r2, [r3, #1]
 80030ae:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <main+0x1274>)
 80030b0:	701a      	strb	r2, [r3, #0]
				  if (snake2[0][0] == WIDTH-1){
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <main+0x1260>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b13      	cmp	r3, #19
 80030b8:	d11e      	bne.n	80030f8 <main+0x1280>
					  if (infinity_mode){
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <main+0x1270>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <main+0x1252>
						  snake2_next_x = 0;
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <main+0x126c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e01c      	b.n	8003104 <main+0x128c>
					  } else {
						  snake2_lost = 1;
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <main+0x1278>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e018      	b.n	8003104 <main+0x128c>
 80030d2:	bf00      	nop
 80030d4:	20009800 	.word	0x20009800
 80030d8:	200096d4 	.word	0x200096d4
 80030dc:	20009806 	.word	0x20009806
 80030e0:	20009801 	.word	0x20009801
 80030e4:	20009807 	.word	0x20009807
 80030e8:	20006c2c 	.word	0x20006c2c
 80030ec:	20009808 	.word	0x20009808
 80030f0:	20009803 	.word	0x20009803
 80030f4:	20009809 	.word	0x20009809
					  }
				  } else {
					  snake2_next_x += 1;
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <main+0x12d4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <main+0x12d4>)
 8003102:	701a      	strb	r2, [r3, #0]
				  }
				  if ((snake2[0][2] == 0)||(snake2[0][2] == 7)||(snake2[0][2] == 6)){
 8003104:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <main+0x12d8>)
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <main+0x12a4>
 800310c:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <main+0x12d8>)
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	2b07      	cmp	r3, #7
 8003112:	d003      	beq.n	800311c <main+0x12a4>
 8003114:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <main+0x12d8>)
 8003116:	789b      	ldrb	r3, [r3, #2]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d103      	bne.n	8003124 <main+0x12ac>
					  snake2_next_dir = 5;
 800311c:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <main+0x12dc>)
 800311e:	2205      	movs	r2, #5
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e019      	b.n	8003158 <main+0x12e0>
				  } else if ((snake2[0][2] == 1)||(snake2[0][2] == 4)||(snake2[0][2] == 5)){
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <main+0x12d8>)
 8003126:	789b      	ldrb	r3, [r3, #2]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d007      	beq.n	800313c <main+0x12c4>
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <main+0x12d8>)
 800312e:	789b      	ldrb	r3, [r3, #2]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d003      	beq.n	800313c <main+0x12c4>
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <main+0x12d8>)
 8003136:	789b      	ldrb	r3, [r3, #2]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d103      	bne.n	8003144 <main+0x12cc>
					  snake2_next_dir = 7;
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <main+0x12dc>)
 800313e:	2207      	movs	r2, #7
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e009      	b.n	8003158 <main+0x12e0>
				  } else {
					  snake2_next_dir = 3;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <main+0x12dc>)
 8003146:	2203      	movs	r2, #3
 8003148:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 800314a:	e005      	b.n	8003158 <main+0x12e0>
 800314c:	20009807 	.word	0x20009807
 8003150:	200096d4 	.word	0x200096d4
 8003154:	20009809 	.word	0x20009809
 8003158:	bf00      	nop
			  }

			  // VERIFICAR COLISION SNAKES
			  snake1_next_cell_value = map[snake1_next_y][snake1_next_x] - map[snake1_next_y][snake1_next_x]%2;
 800315a:	4ba4      	ldr	r3, [pc, #656]	@ (80033ec <main+0x1574>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4ba3      	ldr	r3, [pc, #652]	@ (80033f0 <main+0x1578>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	4aa3      	ldr	r2, [pc, #652]	@ (80033f4 <main+0x157c>)
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	4403      	add	r3, r0
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b9e      	ldr	r3, [pc, #632]	@ (80033f8 <main+0x1580>)
 800317e:	701a      	strb	r2, [r3, #0]
			  snake2_next_cell_value = map[snake2_next_y][snake2_next_x] - map[snake2_next_y][snake2_next_x]%2;
 8003180:	4b9e      	ldr	r3, [pc, #632]	@ (80033fc <main+0x1584>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	4b9e      	ldr	r3, [pc, #632]	@ (8003400 <main+0x1588>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	4a99      	ldr	r2, [pc, #612]	@ (80033f4 <main+0x157c>)
 800318e:	460b      	mov	r3, r1
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	4403      	add	r3, r0
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b98      	ldr	r3, [pc, #608]	@ (8003404 <main+0x158c>)
 80031a4:	701a      	strb	r2, [r3, #0]

			  if ((snake1_next_y != snake2_prev_y)||(snake1_next_x != snake2_prev_x)){
 80031a6:	4b91      	ldr	r3, [pc, #580]	@ (80033ec <main+0x1574>)
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	4b97      	ldr	r3, [pc, #604]	@ (8003408 <main+0x1590>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d105      	bne.n	80031be <main+0x1346>
 80031b2:	4b8f      	ldr	r3, [pc, #572]	@ (80033f0 <main+0x1578>)
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	4b95      	ldr	r3, [pc, #596]	@ (800340c <main+0x1594>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d00a      	beq.n	80031d4 <main+0x135c>
				  if ((snake1_next_cell_value == 2) || (snake1_next_cell_value == 4)){
 80031be:	4b8e      	ldr	r3, [pc, #568]	@ (80033f8 <main+0x1580>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d003      	beq.n	80031ce <main+0x1356>
 80031c6:	4b8c      	ldr	r3, [pc, #560]	@ (80033f8 <main+0x1580>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d102      	bne.n	80031d4 <main+0x135c>
					  //game_over = 1;
					  snake1_lost = 1;
 80031ce:	4b90      	ldr	r3, [pc, #576]	@ (8003410 <main+0x1598>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if ((snake2_next_y != snake1_prev_y)||(snake2_next_x != snake1_prev_x)){
 80031d4:	4b89      	ldr	r3, [pc, #548]	@ (80033fc <main+0x1584>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <main+0x159c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d105      	bne.n	80031ec <main+0x1374>
 80031e0:	4b87      	ldr	r3, [pc, #540]	@ (8003400 <main+0x1588>)
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003418 <main+0x15a0>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d00a      	beq.n	8003202 <main+0x138a>
				  if ((snake2_next_cell_value == 2) || (snake2_next_cell_value == 4)){
 80031ec:	4b85      	ldr	r3, [pc, #532]	@ (8003404 <main+0x158c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d003      	beq.n	80031fc <main+0x1384>
 80031f4:	4b83      	ldr	r3, [pc, #524]	@ (8003404 <main+0x158c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d102      	bne.n	8003202 <main+0x138a>
					  //game_over = 1;
					  snake2_lost = 1;
 80031fc:	4b87      	ldr	r3, [pc, #540]	@ (800341c <main+0x15a4>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if ((snake1_next_x == snake2_next_x)&&(snake1_next_y == snake2_next_y)){
 8003202:	4b7b      	ldr	r3, [pc, #492]	@ (80033f0 <main+0x1578>)
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	4b7e      	ldr	r3, [pc, #504]	@ (8003400 <main+0x1588>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d10b      	bne.n	8003226 <main+0x13ae>
 800320e:	4b77      	ldr	r3, [pc, #476]	@ (80033ec <main+0x1574>)
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4b7a      	ldr	r3, [pc, #488]	@ (80033fc <main+0x1584>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d105      	bne.n	8003226 <main+0x13ae>
				  snake1_lost = 1;
 800321a:	4b7d      	ldr	r3, [pc, #500]	@ (8003410 <main+0x1598>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
				  snake2_lost = 1;
 8003220:	4b7e      	ldr	r3, [pc, #504]	@ (800341c <main+0x15a4>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
			  }
			  if (snake1_next_cell_value == 6){
 8003226:	4b74      	ldr	r3, [pc, #464]	@ (80033f8 <main+0x1580>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d102      	bne.n	8003234 <main+0x13bc>
				  snake1_eats = 1;
 800322e:	4b7c      	ldr	r3, [pc, #496]	@ (8003420 <main+0x15a8>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
			  }
			  if (snake2_next_cell_value == 6){
 8003234:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <main+0x158c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b06      	cmp	r3, #6
 800323a:	d102      	bne.n	8003242 <main+0x13ca>
				  snake2_eats = 1;
 800323c:	4b79      	ldr	r3, [pc, #484]	@ (8003424 <main+0x15ac>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
		  }




		  if (game_over == 0){
 8003242:	4b79      	ldr	r3, [pc, #484]	@ (8003428 <main+0x15b0>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f041 8566 	bne.w	8004d18 <main+0x2ea0>

			  // ACTUALIZAR MAPA
			  if (snake1_lost == 0){
 800324c:	4b70      	ldr	r3, [pc, #448]	@ (8003410 <main+0x1598>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d164      	bne.n	800331e <main+0x14a6>
				  if (snake1_eats == 0){
 8003254:	4b72      	ldr	r3, [pc, #456]	@ (8003420 <main+0x15a8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11e      	bne.n	800329a <main+0x1422>
					  map[snake1_prev_y][snake1_prev_x] -= 2;
 800325c:	4b6d      	ldr	r3, [pc, #436]	@ (8003414 <main+0x159c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	4b6d      	ldr	r3, [pc, #436]	@ (8003418 <main+0x15a0>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	4a62      	ldr	r2, [pc, #392]	@ (80033f4 <main+0x157c>)
 800326a:	460b      	mov	r3, r1
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	4403      	add	r3, r0
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4a66      	ldr	r2, [pc, #408]	@ (8003414 <main+0x159c>)
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	4611      	mov	r1, r2
 800327e:	4a66      	ldr	r2, [pc, #408]	@ (8003418 <main+0x15a0>)
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	4614      	mov	r4, r2
 8003284:	3b02      	subs	r3, #2
 8003286:	b2d8      	uxtb	r0, r3
 8003288:	4a5a      	ldr	r2, [pc, #360]	@ (80033f4 <main+0x157c>)
 800328a:	460b      	mov	r3, r1
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	4423      	add	r3, r4
 8003296:	4602      	mov	r2, r0
 8003298:	701a      	strb	r2, [r3, #0]
				  }
				  if (snake1_eats == 1){
 800329a:	4b61      	ldr	r3, [pc, #388]	@ (8003420 <main+0x15a8>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d11e      	bne.n	80032e0 <main+0x1468>
					  map[snake1_next_y][snake1_next_x] -= 6;
 80032a2:	4b52      	ldr	r3, [pc, #328]	@ (80033ec <main+0x1574>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	4619      	mov	r1, r3
 80032a8:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <main+0x1578>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	4a51      	ldr	r2, [pc, #324]	@ (80033f4 <main+0x157c>)
 80032b0:	460b      	mov	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	4403      	add	r3, r0
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	4a4b      	ldr	r2, [pc, #300]	@ (80033ec <main+0x1574>)
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <main+0x1578>)
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	4614      	mov	r4, r2
 80032ca:	3b06      	subs	r3, #6
 80032cc:	b2d8      	uxtb	r0, r3
 80032ce:	4a49      	ldr	r2, [pc, #292]	@ (80033f4 <main+0x157c>)
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	4423      	add	r3, r4
 80032dc:	4602      	mov	r2, r0
 80032de:	701a      	strb	r2, [r3, #0]
				  }
				  map[snake1_next_y][snake1_next_x] += 2;
 80032e0:	4b42      	ldr	r3, [pc, #264]	@ (80033ec <main+0x1574>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	4b42      	ldr	r3, [pc, #264]	@ (80033f0 <main+0x1578>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	4a41      	ldr	r2, [pc, #260]	@ (80033f4 <main+0x157c>)
 80032ee:	460b      	mov	r3, r1
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	4403      	add	r3, r0
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4a3b      	ldr	r2, [pc, #236]	@ (80033ec <main+0x1574>)
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	4611      	mov	r1, r2
 8003302:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <main+0x1578>)
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	4614      	mov	r4, r2
 8003308:	3302      	adds	r3, #2
 800330a:	b2d8      	uxtb	r0, r3
 800330c:	4a39      	ldr	r2, [pc, #228]	@ (80033f4 <main+0x157c>)
 800330e:	460b      	mov	r3, r1
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	4423      	add	r3, r4
 800331a:	4602      	mov	r2, r0
 800331c:	701a      	strb	r2, [r3, #0]
			  }
			  if (snake2_lost == 0){
 800331e:	4b3f      	ldr	r3, [pc, #252]	@ (800341c <main+0x15a4>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8086 	bne.w	8003434 <main+0x15bc>
				  if (snake2_eats == 0){
 8003328:	4b3e      	ldr	r3, [pc, #248]	@ (8003424 <main+0x15ac>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11e      	bne.n	800336e <main+0x14f6>
					  map[snake2_prev_y][snake2_prev_x] -= 4;
 8003330:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <main+0x1590>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	4b35      	ldr	r3, [pc, #212]	@ (800340c <main+0x1594>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <main+0x157c>)
 800333e:	460b      	mov	r3, r1
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	4403      	add	r3, r0
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4a2e      	ldr	r2, [pc, #184]	@ (8003408 <main+0x1590>)
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	4611      	mov	r1, r2
 8003352:	4a2e      	ldr	r2, [pc, #184]	@ (800340c <main+0x1594>)
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	4614      	mov	r4, r2
 8003358:	3b04      	subs	r3, #4
 800335a:	b2d8      	uxtb	r0, r3
 800335c:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <main+0x157c>)
 800335e:	460b      	mov	r3, r1
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	4423      	add	r3, r4
 800336a:	4602      	mov	r2, r0
 800336c:	701a      	strb	r2, [r3, #0]
				  }
				  if (snake2_eats == 1){
 800336e:	4b2d      	ldr	r3, [pc, #180]	@ (8003424 <main+0x15ac>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11e      	bne.n	80033b4 <main+0x153c>
					  map[snake2_next_y][snake2_next_x] -= 6;
 8003376:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <main+0x1584>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <main+0x1588>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <main+0x157c>)
 8003384:	460b      	mov	r3, r1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	4403      	add	r3, r0
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <main+0x1584>)
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	4611      	mov	r1, r2
 8003398:	4a19      	ldr	r2, [pc, #100]	@ (8003400 <main+0x1588>)
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	4614      	mov	r4, r2
 800339e:	3b06      	subs	r3, #6
 80033a0:	b2d8      	uxtb	r0, r3
 80033a2:	4a14      	ldr	r2, [pc, #80]	@ (80033f4 <main+0x157c>)
 80033a4:	460b      	mov	r3, r1
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	4423      	add	r3, r4
 80033b0:	4602      	mov	r2, r0
 80033b2:	701a      	strb	r2, [r3, #0]
				  }
				  map[snake2_next_y][snake2_next_x] += 4;
 80033b4:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <main+0x1584>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <main+0x1588>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <main+0x157c>)
 80033c2:	460b      	mov	r3, r1
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	4403      	add	r3, r0
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <main+0x1584>)
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <main+0x1588>)
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	4614      	mov	r4, r2
 80033dc:	3304      	adds	r3, #4
 80033de:	b2d8      	uxtb	r0, r3
 80033e0:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <main+0x157c>)
 80033e2:	460b      	mov	r3, r1
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	e01f      	b.n	800342c <main+0x15b4>
 80033ec:	200096cc 	.word	0x200096cc
 80033f0:	200096cb 	.word	0x200096cb
 80033f4:	2000944c 	.word	0x2000944c
 80033f8:	200096ce 	.word	0x200096ce
 80033fc:	20009808 	.word	0x20009808
 8003400:	20009807 	.word	0x20009807
 8003404:	2000980a 	.word	0x2000980a
 8003408:	20009805 	.word	0x20009805
 800340c:	20009804 	.word	0x20009804
 8003410:	200096c7 	.word	0x200096c7
 8003414:	200096c9 	.word	0x200096c9
 8003418:	200096c8 	.word	0x200096c8
 800341c:	20009803 	.word	0x20009803
 8003420:	200096cf 	.word	0x200096cf
 8003424:	2000980b 	.word	0x2000980b
 8003428:	20009578 	.word	0x20009578
 800342c:	4413      	add	r3, r2
 800342e:	4423      	add	r3, r4
 8003430:	4602      	mov	r2, r0
 8003432:	701a      	strb	r2, [r3, #0]
			  }

			  // MOVER SERPIENTES
			  // SERPIENTE 1
			  if (snake1_lost == 0){
 8003434:	4ba8      	ldr	r3, [pc, #672]	@ (80036d8 <main+0x1860>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d158      	bne.n	80034ee <main+0x1676>
				  if (snake1_eats == 1){
 800343c:	4ba7      	ldr	r3, [pc, #668]	@ (80036dc <main+0x1864>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <main+0x15d8>
					  len_snake1 += 1;
 8003444:	4ba6      	ldr	r3, [pc, #664]	@ (80036e0 <main+0x1868>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	4ba4      	ldr	r3, [pc, #656]	@ (80036e0 <main+0x1868>)
 800344e:	701a      	strb	r2, [r3, #0]
				  }
				  for (int i = len_snake1-1; i > 0; i--){
 8003450:	4ba3      	ldr	r3, [pc, #652]	@ (80036e0 <main+0x1868>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	3b01      	subs	r3, #1
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
 8003458:	e036      	b.n	80034c8 <main+0x1650>
					  snake1[i][0] = snake1[i-1][0];
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	49a1      	ldr	r1, [pc, #644]	@ (80036e4 <main+0x186c>)
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	440b      	add	r3, r1
 8003468:	7818      	ldrb	r0, [r3, #0]
 800346a:	499e      	ldr	r1, [pc, #632]	@ (80036e4 <main+0x186c>)
 800346c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	440b      	add	r3, r1
 8003476:	4602      	mov	r2, r0
 8003478:	701a      	strb	r2, [r3, #0]
					  snake1[i][1] = snake1[i-1][1];
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	4999      	ldr	r1, [pc, #612]	@ (80036e4 <main+0x186c>)
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	440b      	add	r3, r1
 8003488:	3301      	adds	r3, #1
 800348a:	7818      	ldrb	r0, [r3, #0]
 800348c:	4995      	ldr	r1, [pc, #596]	@ (80036e4 <main+0x186c>)
 800348e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003490:	4613      	mov	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	440b      	add	r3, r1
 8003498:	3301      	adds	r3, #1
 800349a:	4602      	mov	r2, r0
 800349c:	701a      	strb	r2, [r3, #0]
					  snake1[i][2] = snake1[i-1][2];
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	1e5a      	subs	r2, r3, #1
 80034a2:	4990      	ldr	r1, [pc, #576]	@ (80036e4 <main+0x186c>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	3302      	adds	r3, #2
 80034ae:	7818      	ldrb	r0, [r3, #0]
 80034b0:	498c      	ldr	r1, [pc, #560]	@ (80036e4 <main+0x186c>)
 80034b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	3302      	adds	r3, #2
 80034be:	4602      	mov	r2, r0
 80034c0:	701a      	strb	r2, [r3, #0]
				  for (int i = len_snake1-1; i > 0; i--){
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	3b01      	subs	r3, #1
 80034c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dcc5      	bgt.n	800345a <main+0x15e2>
				  }
				  snake1[0][0] = snake1_next_x;
 80034ce:	4b86      	ldr	r3, [pc, #536]	@ (80036e8 <main+0x1870>)
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	4b84      	ldr	r3, [pc, #528]	@ (80036e4 <main+0x186c>)
 80034d4:	701a      	strb	r2, [r3, #0]
				  snake1[0][1] = snake1_next_y;
 80034d6:	4b85      	ldr	r3, [pc, #532]	@ (80036ec <main+0x1874>)
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	4b82      	ldr	r3, [pc, #520]	@ (80036e4 <main+0x186c>)
 80034dc:	705a      	strb	r2, [r3, #1]
				  snake1[0][2] = dir_snake1;
 80034de:	4b84      	ldr	r3, [pc, #528]	@ (80036f0 <main+0x1878>)
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	4b80      	ldr	r3, [pc, #512]	@ (80036e4 <main+0x186c>)
 80034e4:	709a      	strb	r2, [r3, #2]
				  snake1[1][2] = snake1_next_dir;
 80034e6:	4b83      	ldr	r3, [pc, #524]	@ (80036f4 <main+0x187c>)
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	4b7e      	ldr	r3, [pc, #504]	@ (80036e4 <main+0x186c>)
 80034ec:	715a      	strb	r2, [r3, #5]
			  }

			  // SERPIENTE 2
			  if (snake2_lost == 0){
 80034ee:	4b82      	ldr	r3, [pc, #520]	@ (80036f8 <main+0x1880>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d158      	bne.n	80035a8 <main+0x1730>
				  if (snake2_eats == 1){
 80034f6:	4b81      	ldr	r3, [pc, #516]	@ (80036fc <main+0x1884>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <main+0x1692>
					  len_snake2 += 1;
 80034fe:	4b80      	ldr	r3, [pc, #512]	@ (8003700 <main+0x1888>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	3301      	adds	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b7e      	ldr	r3, [pc, #504]	@ (8003700 <main+0x1888>)
 8003508:	701a      	strb	r2, [r3, #0]
				  }
				  for (int i = len_snake2-1; i > 0; i--){
 800350a:	4b7d      	ldr	r3, [pc, #500]	@ (8003700 <main+0x1888>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	3b01      	subs	r3, #1
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003512:	e036      	b.n	8003582 <main+0x170a>
					  snake2[i][0] = snake2[i-1][0];
 8003514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	497a      	ldr	r1, [pc, #488]	@ (8003704 <main+0x188c>)
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	440b      	add	r3, r1
 8003522:	7818      	ldrb	r0, [r3, #0]
 8003524:	4977      	ldr	r1, [pc, #476]	@ (8003704 <main+0x188c>)
 8003526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	440b      	add	r3, r1
 8003530:	4602      	mov	r2, r0
 8003532:	701a      	strb	r2, [r3, #0]
					  snake2[i][1] = snake2[i-1][1];
 8003534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	4972      	ldr	r1, [pc, #456]	@ (8003704 <main+0x188c>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	440b      	add	r3, r1
 8003542:	3301      	adds	r3, #1
 8003544:	7818      	ldrb	r0, [r3, #0]
 8003546:	496f      	ldr	r1, [pc, #444]	@ (8003704 <main+0x188c>)
 8003548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	440b      	add	r3, r1
 8003552:	3301      	adds	r3, #1
 8003554:	4602      	mov	r2, r0
 8003556:	701a      	strb	r2, [r3, #0]
					  snake2[i][2] = snake2[i-1][2];
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	1e5a      	subs	r2, r3, #1
 800355c:	4969      	ldr	r1, [pc, #420]	@ (8003704 <main+0x188c>)
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	440b      	add	r3, r1
 8003566:	3302      	adds	r3, #2
 8003568:	7818      	ldrb	r0, [r3, #0]
 800356a:	4966      	ldr	r1, [pc, #408]	@ (8003704 <main+0x188c>)
 800356c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	440b      	add	r3, r1
 8003576:	3302      	adds	r3, #2
 8003578:	4602      	mov	r2, r0
 800357a:	701a      	strb	r2, [r3, #0]
				  for (int i = len_snake2-1; i > 0; i--){
 800357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357e:	3b01      	subs	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	dcc5      	bgt.n	8003514 <main+0x169c>
				  }
				  snake2[0][0] = snake2_next_x;
 8003588:	4b5f      	ldr	r3, [pc, #380]	@ (8003708 <main+0x1890>)
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	4b5d      	ldr	r3, [pc, #372]	@ (8003704 <main+0x188c>)
 800358e:	701a      	strb	r2, [r3, #0]
				  snake2[0][1] = snake2_next_y;
 8003590:	4b5e      	ldr	r3, [pc, #376]	@ (800370c <main+0x1894>)
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	4b5b      	ldr	r3, [pc, #364]	@ (8003704 <main+0x188c>)
 8003596:	705a      	strb	r2, [r3, #1]
				  snake2[0][2] = dir_snake2;
 8003598:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <main+0x1898>)
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	4b59      	ldr	r3, [pc, #356]	@ (8003704 <main+0x188c>)
 800359e:	709a      	strb	r2, [r3, #2]
				  snake2[1][2] = snake2_next_dir;
 80035a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <main+0x189c>)
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	4b57      	ldr	r3, [pc, #348]	@ (8003704 <main+0x188c>)
 80035a6:	715a      	strb	r2, [r3, #5]
			  }

			  // PINTAR COLAS
			  // SERPIENTE 1
			  if ((snake1_lost == 0)&&(snake1_eats == 0)){
 80035a8:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <main+0x1860>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 81bb 	bne.w	8003928 <main+0x1ab0>
 80035b2:	4b4a      	ldr	r3, [pc, #296]	@ (80036dc <main+0x1864>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 81b6 	bne.w	8003928 <main+0x1ab0>
				  snake1_tail_shade = map[snake1_prev_y][snake1_prev_x] % 2;
 80035bc:	4b56      	ldr	r3, [pc, #344]	@ (8003718 <main+0x18a0>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	4619      	mov	r1, r3
 80035c2:	4b56      	ldr	r3, [pc, #344]	@ (800371c <main+0x18a4>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	4a55      	ldr	r2, [pc, #340]	@ (8003720 <main+0x18a8>)
 80035ca:	460b      	mov	r3, r1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	4403      	add	r3, r0
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <main+0x18ac>)
 80035e0:	701a      	strb	r2, [r3, #0]
				  if (snake1_tail_shade == 1){
 80035e2:	4b50      	ldr	r3, [pc, #320]	@ (8003724 <main+0x18ac>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10f      	bne.n	800360a <main+0x1792>
					  FillRect(snake1_prev_x*SQ_SIZE, snake1_prev_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x04C1);
 80035ea:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <main+0x18a4>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <main+0x18a0>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	f240 43c1 	movw	r3, #1217	@ 0x4c1
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2310      	movs	r3, #16
 8003602:	2210      	movs	r2, #16
 8003604:	f7fd ff7e 	bl	8001504 <FillRect>
 8003608:	e00e      	b.n	8003628 <main+0x17b0>
				  } else {
					  FillRect(snake1_prev_x*SQ_SIZE, snake1_prev_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x0660);
 800360a:	4b44      	ldr	r3, [pc, #272]	@ (800371c <main+0x18a4>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	4b41      	ldr	r3, [pc, #260]	@ (8003718 <main+0x18a0>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	f44f 63cc 	mov.w	r3, #1632	@ 0x660
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2310      	movs	r3, #16
 8003622:	2210      	movs	r2, #16
 8003624:	f7fd ff6e 	bl	8001504 <FillRect>
				  }
				  snake1_current_cell_value = map[snake1[len_snake1-1][1]][snake1[len_snake1-1][0]] % 2;
 8003628:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <main+0x1868>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	492d      	ldr	r1, [pc, #180]	@ (80036e4 <main+0x186c>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	440b      	add	r3, r1
 8003638:	3301      	adds	r3, #1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	4b28      	ldr	r3, [pc, #160]	@ (80036e0 <main+0x1868>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	4927      	ldr	r1, [pc, #156]	@ (80036e4 <main+0x186c>)
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	440b      	add	r3, r1
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	4a33      	ldr	r2, [pc, #204]	@ (8003720 <main+0x18a8>)
 8003654:	4603      	mov	r3, r0
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	440b      	add	r3, r1
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b2f      	ldr	r3, [pc, #188]	@ (8003728 <main+0x18b0>)
 800366a:	701a      	strb	r2, [r3, #0]
				  switch (snake1_prev_dir){
 800366c:	4b2f      	ldr	r3, [pc, #188]	@ (800372c <main+0x18b4>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b03      	cmp	r3, #3
 8003672:	f200 8159 	bhi.w	8003928 <main+0x1ab0>
 8003676:	a201      	add	r2, pc, #4	@ (adr r2, 800367c <main+0x1804>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	08003779 	.word	0x08003779
 8003684:	08003809 	.word	0x08003809
 8003688:	08003899 	.word	0x08003899
				  case 0:
					  if (snake1_current_cell_value == 1){
 800368c:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <main+0x18b0>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d14f      	bne.n	8003734 <main+0x18bc>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_1, 0, 0);
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <main+0x1868>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	4912      	ldr	r1, [pc, #72]	@ (80036e4 <main+0x186c>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <main+0x1868>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	490c      	ldr	r1, [pc, #48]	@ (80036e4 <main+0x186c>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	440b      	add	r3, r1
 80036ba:	3301      	adds	r3, #1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	2300      	movs	r3, #0
 80036c4:	9302      	str	r3, [sp, #8]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <main+0x18b8>)
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2310      	movs	r3, #16
 80036d0:	2210      	movs	r2, #16
 80036d2:	f7fd ff71 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_0, 0, 0);
					  }
					  break;
 80036d6:	e127      	b.n	8003928 <main+0x1ab0>
 80036d8:	200096c7 	.word	0x200096c7
 80036dc:	200096cf 	.word	0x200096cf
 80036e0:	200096c4 	.word	0x200096c4
 80036e4:	20009598 	.word	0x20009598
 80036e8:	200096cb 	.word	0x200096cb
 80036ec:	200096cc 	.word	0x200096cc
 80036f0:	200096c5 	.word	0x200096c5
 80036f4:	200096cd 	.word	0x200096cd
 80036f8:	20009803 	.word	0x20009803
 80036fc:	2000980b 	.word	0x2000980b
 8003700:	20009800 	.word	0x20009800
 8003704:	200096d4 	.word	0x200096d4
 8003708:	20009807 	.word	0x20009807
 800370c:	20009808 	.word	0x20009808
 8003710:	20009801 	.word	0x20009801
 8003714:	20009809 	.word	0x20009809
 8003718:	200096c9 	.word	0x200096c9
 800371c:	200096c8 	.word	0x200096c8
 8003720:	2000944c 	.word	0x2000944c
 8003724:	200096c6 	.word	0x200096c6
 8003728:	200096d0 	.word	0x200096d0
 800372c:	200096ca 	.word	0x200096ca
 8003730:	20005204 	.word	0x20005204
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_0, 0, 0);
 8003734:	4b95      	ldr	r3, [pc, #596]	@ (800398c <main+0x1b14>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	4995      	ldr	r1, [pc, #596]	@ (8003990 <main+0x1b18>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	440b      	add	r3, r1
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4618      	mov	r0, r3
 800374a:	4b90      	ldr	r3, [pc, #576]	@ (800398c <main+0x1b14>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	498f      	ldr	r1, [pc, #572]	@ (8003990 <main+0x1b18>)
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	440b      	add	r3, r1
 800375a:	3301      	adds	r3, #1
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	2300      	movs	r3, #0
 8003764:	9302      	str	r3, [sp, #8]
 8003766:	2300      	movs	r3, #0
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	4b8a      	ldr	r3, [pc, #552]	@ (8003994 <main+0x1b1c>)
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2310      	movs	r3, #16
 8003770:	2210      	movs	r2, #16
 8003772:	f7fd ff21 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003776:	e0d7      	b.n	8003928 <main+0x1ab0>
				  case 1:
					  if (snake1_current_cell_value == 1){
 8003778:	4b87      	ldr	r3, [pc, #540]	@ (8003998 <main+0x1b20>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d121      	bne.n	80037c4 <main+0x194c>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_1, 1, 0);
 8003780:	4b82      	ldr	r3, [pc, #520]	@ (800398c <main+0x1b14>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	1e5a      	subs	r2, r3, #1
 8003786:	4982      	ldr	r1, [pc, #520]	@ (8003990 <main+0x1b18>)
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	440b      	add	r3, r1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	4b7d      	ldr	r3, [pc, #500]	@ (800398c <main+0x1b14>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	497c      	ldr	r1, [pc, #496]	@ (8003990 <main+0x1b18>)
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	3301      	adds	r3, #1
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	9302      	str	r3, [sp, #8]
 80037b2:	2301      	movs	r3, #1
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	4b79      	ldr	r3, [pc, #484]	@ (800399c <main+0x1b24>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2310      	movs	r3, #16
 80037bc:	2210      	movs	r2, #16
 80037be:	f7fd fefb 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_0, 1, 0);
					  }
					  break;
 80037c2:	e0b1      	b.n	8003928 <main+0x1ab0>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_up_0, 1, 0);
 80037c4:	4b71      	ldr	r3, [pc, #452]	@ (800398c <main+0x1b14>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	4971      	ldr	r1, [pc, #452]	@ (8003990 <main+0x1b18>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4618      	mov	r0, r3
 80037da:	4b6c      	ldr	r3, [pc, #432]	@ (800398c <main+0x1b14>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	496b      	ldr	r1, [pc, #428]	@ (8003990 <main+0x1b18>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	440b      	add	r3, r1
 80037ea:	3301      	adds	r3, #1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	2301      	movs	r3, #1
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	4b66      	ldr	r3, [pc, #408]	@ (8003994 <main+0x1b1c>)
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2310      	movs	r3, #16
 8003800:	2210      	movs	r2, #16
 8003802:	f7fd fed9 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003806:	e08f      	b.n	8003928 <main+0x1ab0>
				  case 2:
					  if (snake1_current_cell_value == 1){
 8003808:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <main+0x1b20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d121      	bne.n	8003854 <main+0x19dc>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_right_1, 0, 1);
 8003810:	4b5e      	ldr	r3, [pc, #376]	@ (800398c <main+0x1b14>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	495e      	ldr	r1, [pc, #376]	@ (8003990 <main+0x1b18>)
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	440b      	add	r3, r1
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4618      	mov	r0, r3
 8003826:	4b59      	ldr	r3, [pc, #356]	@ (800398c <main+0x1b14>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	4958      	ldr	r1, [pc, #352]	@ (8003990 <main+0x1b18>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	440b      	add	r3, r1
 8003836:	3301      	adds	r3, #1
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	2301      	movs	r3, #1
 8003840:	9302      	str	r3, [sp, #8]
 8003842:	2300      	movs	r3, #0
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	4b56      	ldr	r3, [pc, #344]	@ (80039a0 <main+0x1b28>)
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2310      	movs	r3, #16
 800384c:	2210      	movs	r2, #16
 800384e:	f7fd feb3 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_right_0, 0, 1);
					  }
					  break;
 8003852:	e069      	b.n	8003928 <main+0x1ab0>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_right_0, 0, 1);
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <main+0x1b14>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	1e5a      	subs	r2, r3, #1
 800385a:	494d      	ldr	r1, [pc, #308]	@ (8003990 <main+0x1b18>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	440b      	add	r3, r1
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	4618      	mov	r0, r3
 800386a:	4b48      	ldr	r3, [pc, #288]	@ (800398c <main+0x1b14>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	1e5a      	subs	r2, r3, #1
 8003870:	4947      	ldr	r1, [pc, #284]	@ (8003990 <main+0x1b18>)
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	440b      	add	r3, r1
 800387a:	3301      	adds	r3, #1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	2301      	movs	r3, #1
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	2300      	movs	r3, #0
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	4b46      	ldr	r3, [pc, #280]	@ (80039a4 <main+0x1b2c>)
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2310      	movs	r3, #16
 8003890:	2210      	movs	r2, #16
 8003892:	f7fd fe91 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003896:	e047      	b.n	8003928 <main+0x1ab0>
				  case 3:
					  if (snake1_current_cell_value == 1){
 8003898:	4b3f      	ldr	r3, [pc, #252]	@ (8003998 <main+0x1b20>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d121      	bne.n	80038e4 <main+0x1a6c>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_right_1, 0, 0);
 80038a0:	4b3a      	ldr	r3, [pc, #232]	@ (800398c <main+0x1b14>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	493a      	ldr	r1, [pc, #232]	@ (8003990 <main+0x1b18>)
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	4b35      	ldr	r3, [pc, #212]	@ (800398c <main+0x1b14>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	1e5a      	subs	r2, r3, #1
 80038bc:	4934      	ldr	r1, [pc, #208]	@ (8003990 <main+0x1b18>)
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	440b      	add	r3, r1
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	2300      	movs	r3, #0
 80038d0:	9302      	str	r3, [sp, #8]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	4b32      	ldr	r3, [pc, #200]	@ (80039a0 <main+0x1b28>)
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	2310      	movs	r3, #16
 80038dc:	2210      	movs	r2, #16
 80038de:	f7fd fe6b 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_right_0, 0, 0);
					  }
					  break;
 80038e2:	e020      	b.n	8003926 <main+0x1aae>
						  LCD_Bitmap(snake1[len_snake1-1][0]*SQ_SIZE, snake1[len_snake1-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake1_right_0, 0, 0);
 80038e4:	4b29      	ldr	r3, [pc, #164]	@ (800398c <main+0x1b14>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	4929      	ldr	r1, [pc, #164]	@ (8003990 <main+0x1b18>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	4b24      	ldr	r3, [pc, #144]	@ (800398c <main+0x1b14>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	4923      	ldr	r1, [pc, #140]	@ (8003990 <main+0x1b18>)
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	440b      	add	r3, r1
 800390a:	3301      	adds	r3, #1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	2300      	movs	r3, #0
 8003914:	9302      	str	r3, [sp, #8]
 8003916:	2300      	movs	r3, #0
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <main+0x1b2c>)
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2310      	movs	r3, #16
 8003920:	2210      	movs	r2, #16
 8003922:	f7fd fe49 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003926:	bf00      	nop
				  }
			  }

			  // SERPIENTE 2
			  if ((snake2_lost == 0)&&(snake2_eats == 0)){
 8003928:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <main+0x1b30>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 81bf 	bne.w	8003cb0 <main+0x1e38>
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <main+0x1b34>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 81ba 	bne.w	8003cb0 <main+0x1e38>
				  snake2_tail_shade = map[snake2_prev_y][snake2_prev_x] % 2;
 800393c:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <main+0x1b38>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4619      	mov	r1, r3
 8003942:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <main+0x1b3c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <main+0x1b40>)
 800394a:	460b      	mov	r3, r1
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	4403      	add	r3, r0
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <main+0x1b44>)
 8003960:	701a      	strb	r2, [r3, #0]
				  if (snake2_tail_shade == 1){
 8003962:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <main+0x1b44>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d12a      	bne.n	80039c0 <main+0x1b48>
					  FillRect(snake2_prev_x*SQ_SIZE, snake2_prev_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x04C1);
 800396a:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <main+0x1b3c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <main+0x1b38>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	f240 43c1 	movw	r3, #1217	@ 0x4c1
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2310      	movs	r3, #16
 8003982:	2210      	movs	r2, #16
 8003984:	f7fd fdbe 	bl	8001504 <FillRect>
 8003988:	e029      	b.n	80039de <main+0x1b66>
 800398a:	bf00      	nop
 800398c:	200096c4 	.word	0x200096c4
 8003990:	20009598 	.word	0x20009598
 8003994:	20005004 	.word	0x20005004
 8003998:	200096d0 	.word	0x200096d0
 800399c:	20005204 	.word	0x20005204
 80039a0:	20004e04 	.word	0x20004e04
 80039a4:	20004c04 	.word	0x20004c04
 80039a8:	20009803 	.word	0x20009803
 80039ac:	2000980b 	.word	0x2000980b
 80039b0:	20009805 	.word	0x20009805
 80039b4:	20009804 	.word	0x20009804
 80039b8:	2000944c 	.word	0x2000944c
 80039bc:	20009802 	.word	0x20009802
				  } else {
					  FillRect(snake2_prev_x*SQ_SIZE, snake2_prev_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x0660);
 80039c0:	4b9f      	ldr	r3, [pc, #636]	@ (8003c40 <main+0x1dc8>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	4618      	mov	r0, r3
 80039c8:	4b9e      	ldr	r3, [pc, #632]	@ (8003c44 <main+0x1dcc>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	f44f 63cc 	mov.w	r3, #1632	@ 0x660
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2310      	movs	r3, #16
 80039d8:	2210      	movs	r2, #16
 80039da:	f7fd fd93 	bl	8001504 <FillRect>
				  }
				  snake2_current_cell_value = map[snake2[len_snake2-1][1]][snake2[len_snake2-1][0]] % 2;
 80039de:	4b9a      	ldr	r3, [pc, #616]	@ (8003c48 <main+0x1dd0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	4999      	ldr	r1, [pc, #612]	@ (8003c4c <main+0x1dd4>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	3301      	adds	r3, #1
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	4b94      	ldr	r3, [pc, #592]	@ (8003c48 <main+0x1dd0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	1e5a      	subs	r2, r3, #1
 80039fa:	4994      	ldr	r1, [pc, #592]	@ (8003c4c <main+0x1dd4>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	440b      	add	r3, r1
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	4a91      	ldr	r2, [pc, #580]	@ (8003c50 <main+0x1dd8>)
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4403      	add	r3, r0
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c54 <main+0x1ddc>)
 8003a20:	701a      	strb	r2, [r3, #0]
				  switch (snake2_prev_dir){
 8003a22:	4b8d      	ldr	r3, [pc, #564]	@ (8003c58 <main+0x1de0>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	f200 8142 	bhi.w	8003cb0 <main+0x1e38>
 8003a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <main+0x1bbc>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003ad5 	.word	0x08003ad5
 8003a3c:	08003b65 	.word	0x08003b65
 8003a40:	08003bf5 	.word	0x08003bf5
				  case 0:
					  if (snake2_current_cell_value == 1){
 8003a44:	4b83      	ldr	r3, [pc, #524]	@ (8003c54 <main+0x1ddc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d121      	bne.n	8003a90 <main+0x1c18>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_1, 0, 0);
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c48 <main+0x1dd0>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	497e      	ldr	r1, [pc, #504]	@ (8003c4c <main+0x1dd4>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <main+0x1dd0>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	4978      	ldr	r1, [pc, #480]	@ (8003c4c <main+0x1dd4>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	3301      	adds	r3, #1
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <main+0x1de4>)
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2310      	movs	r3, #16
 8003a88:	2210      	movs	r2, #16
 8003a8a:	f7fd fd95 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_0, 0, 0);
					  }
					  break;
 8003a8e:	e10f      	b.n	8003cb0 <main+0x1e38>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_0, 0, 0);
 8003a90:	4b6d      	ldr	r3, [pc, #436]	@ (8003c48 <main+0x1dd0>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	496d      	ldr	r1, [pc, #436]	@ (8003c4c <main+0x1dd4>)
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	4b68      	ldr	r3, [pc, #416]	@ (8003c48 <main+0x1dd0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	1e5a      	subs	r2, r3, #1
 8003aac:	4967      	ldr	r1, [pc, #412]	@ (8003c4c <main+0x1dd4>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	4b66      	ldr	r3, [pc, #408]	@ (8003c60 <main+0x1de8>)
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2310      	movs	r3, #16
 8003acc:	2210      	movs	r2, #16
 8003ace:	f7fd fd73 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003ad2:	e0ed      	b.n	8003cb0 <main+0x1e38>
				  case 1:
					  if (snake2_current_cell_value == 1){
 8003ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8003c54 <main+0x1ddc>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d121      	bne.n	8003b20 <main+0x1ca8>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_1, 1, 0);
 8003adc:	4b5a      	ldr	r3, [pc, #360]	@ (8003c48 <main+0x1dd0>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	495a      	ldr	r1, [pc, #360]	@ (8003c4c <main+0x1dd4>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	440b      	add	r3, r1
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	4b55      	ldr	r3, [pc, #340]	@ (8003c48 <main+0x1dd0>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	4954      	ldr	r1, [pc, #336]	@ (8003c4c <main+0x1dd4>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	3301      	adds	r3, #1
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9302      	str	r3, [sp, #8]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	4b52      	ldr	r3, [pc, #328]	@ (8003c5c <main+0x1de4>)
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2310      	movs	r3, #16
 8003b18:	2210      	movs	r2, #16
 8003b1a:	f7fd fd4d 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_0, 1, 0);
					  }
					  break;
 8003b1e:	e0c7      	b.n	8003cb0 <main+0x1e38>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_up_0, 1, 0);
 8003b20:	4b49      	ldr	r3, [pc, #292]	@ (8003c48 <main+0x1dd0>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	4949      	ldr	r1, [pc, #292]	@ (8003c4c <main+0x1dd4>)
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	440b      	add	r3, r1
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <main+0x1dd0>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	1e5a      	subs	r2, r3, #1
 8003b3c:	4943      	ldr	r1, [pc, #268]	@ (8003c4c <main+0x1dd4>)
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	3301      	adds	r3, #1
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	2301      	movs	r3, #1
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	4b42      	ldr	r3, [pc, #264]	@ (8003c60 <main+0x1de8>)
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f7fd fd2b 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003b62:	e0a5      	b.n	8003cb0 <main+0x1e38>
				  case 2:
					  if (snake2_current_cell_value == 1){
 8003b64:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <main+0x1ddc>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d121      	bne.n	8003bb0 <main+0x1d38>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_right_1, 0, 1);
 8003b6c:	4b36      	ldr	r3, [pc, #216]	@ (8003c48 <main+0x1dd0>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	4936      	ldr	r1, [pc, #216]	@ (8003c4c <main+0x1dd4>)
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <main+0x1dd0>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	4930      	ldr	r1, [pc, #192]	@ (8003c4c <main+0x1dd4>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	440b      	add	r3, r1
 8003b92:	3301      	adds	r3, #1
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	4b30      	ldr	r3, [pc, #192]	@ (8003c64 <main+0x1dec>)
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	2210      	movs	r2, #16
 8003baa:	f7fd fd05 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_right_0, 0, 1);
					  }
					  break;
 8003bae:	e07f      	b.n	8003cb0 <main+0x1e38>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_right_0, 0, 1);
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <main+0x1dd0>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	4925      	ldr	r1, [pc, #148]	@ (8003c4c <main+0x1dd4>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <main+0x1dd0>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	491f      	ldr	r1, [pc, #124]	@ (8003c4c <main+0x1dd4>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	2301      	movs	r3, #1
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	4b20      	ldr	r3, [pc, #128]	@ (8003c68 <main+0x1df0>)
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2310      	movs	r3, #16
 8003bec:	2210      	movs	r2, #16
 8003bee:	f7fd fce3 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003bf2:	e05d      	b.n	8003cb0 <main+0x1e38>
				  case 3:
					  if (snake2_current_cell_value == 1){
 8003bf4:	4b17      	ldr	r3, [pc, #92]	@ (8003c54 <main+0x1ddc>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d137      	bne.n	8003c6c <main+0x1df4>
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_right_1, 0, 0);
 8003bfc:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <main+0x1dd0>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	4912      	ldr	r1, [pc, #72]	@ (8003c4c <main+0x1dd4>)
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <main+0x1dd0>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	490c      	ldr	r1, [pc, #48]	@ (8003c4c <main+0x1dd4>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	440b      	add	r3, r1
 8003c22:	3301      	adds	r3, #1
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9302      	str	r3, [sp, #8]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <main+0x1dec>)
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	2310      	movs	r3, #16
 8003c38:	2210      	movs	r2, #16
 8003c3a:	f7fd fcbd 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_right_0, 0, 0);
					  }
					  break;
 8003c3e:	e036      	b.n	8003cae <main+0x1e36>
 8003c40:	20009804 	.word	0x20009804
 8003c44:	20009805 	.word	0x20009805
 8003c48:	20009800 	.word	0x20009800
 8003c4c:	200096d4 	.word	0x200096d4
 8003c50:	2000944c 	.word	0x2000944c
 8003c54:	2000980c 	.word	0x2000980c
 8003c58:	20009806 	.word	0x20009806
 8003c5c:	20005a04 	.word	0x20005a04
 8003c60:	20005804 	.word	0x20005804
 8003c64:	20005604 	.word	0x20005604
 8003c68:	20005404 	.word	0x20005404
						  LCD_Bitmap(snake2[len_snake2-1][0]*SQ_SIZE, snake2[len_snake2-1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, tail_snake2_right_0, 0, 0);
 8003c6c:	4ba2      	ldr	r3, [pc, #648]	@ (8003ef8 <main+0x2080>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	1e5a      	subs	r2, r3, #1
 8003c72:	49a2      	ldr	r1, [pc, #648]	@ (8003efc <main+0x2084>)
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	4b9d      	ldr	r3, [pc, #628]	@ (8003ef8 <main+0x2080>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	1e5a      	subs	r2, r3, #1
 8003c88:	499c      	ldr	r1, [pc, #624]	@ (8003efc <main+0x2084>)
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	440b      	add	r3, r1
 8003c92:	3301      	adds	r3, #1
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9302      	str	r3, [sp, #8]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	4b97      	ldr	r3, [pc, #604]	@ (8003f00 <main+0x2088>)
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2310      	movs	r3, #16
 8003ca8:	2210      	movs	r2, #16
 8003caa:	f7fd fc85 	bl	80015b8 <LCD_Bitmap>
					  break;
 8003cae:	bf00      	nop
				  }
			  }
			  if ((snake1_eats == 1)||(snake2_eats == 1)){
 8003cb0:	4b94      	ldr	r3, [pc, #592]	@ (8003f04 <main+0x208c>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d003      	beq.n	8003cc0 <main+0x1e48>
 8003cb8:	4b93      	ldr	r3, [pc, #588]	@ (8003f08 <main+0x2090>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d107      	bne.n	8003cd0 <main+0x1e58>
				  sonido = 'c';
 8003cc0:	4b92      	ldr	r3, [pc, #584]	@ (8003f0c <main+0x2094>)
 8003cc2:	2263      	movs	r2, #99	@ 0x63
 8003cc4:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4990      	ldr	r1, [pc, #576]	@ (8003f0c <main+0x2094>)
 8003cca:	4891      	ldr	r0, [pc, #580]	@ (8003f10 <main+0x2098>)
 8003ccc:	f005 faa0 	bl	8009210 <HAL_UART_Transmit_DMA>
			  }
			  if (snake1_eats == 1){
 8003cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003f04 <main+0x208c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d108      	bne.n	8003cea <main+0x1e72>
				  orange_count -= 1;
 8003cd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003f14 <main+0x209c>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8003f14 <main+0x209c>)
 8003ce2:	701a      	strb	r2, [r3, #0]
				  snake1_eats = 0;
 8003ce4:	4b87      	ldr	r3, [pc, #540]	@ (8003f04 <main+0x208c>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
			  }
			  if (snake2_eats == 1){
 8003cea:	4b87      	ldr	r3, [pc, #540]	@ (8003f08 <main+0x2090>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d108      	bne.n	8003d04 <main+0x1e8c>
				  orange_count -= 1;
 8003cf2:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <main+0x209c>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b86      	ldr	r3, [pc, #536]	@ (8003f14 <main+0x209c>)
 8003cfc:	701a      	strb	r2, [r3, #0]
				  snake2_eats = 0;
 8003cfe:	4b82      	ldr	r3, [pc, #520]	@ (8003f08 <main+0x2090>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
			  }


			  //ANALIZAR ZONA VECINA A LAS CABEZAS POR NARANJAS
			  //SERPIENTE 1
			  uint8_t break_check_orange_snake1 = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				  }
				  if (break_check_orange_snake1 == 1){
					  break;
				  }
			  }*/
			  for (int i = 0; i < 3; i+=2){
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0e:	e092      	b.n	8003e36 <main+0x1fbe>
				  uint8_t pos_y_snake1;
				  if (snake1_next_y-1+i < 0) {
 8003d10:	4b81      	ldr	r3, [pc, #516]	@ (8003f18 <main+0x20a0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	4413      	add	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da0c      	bge.n	8003d38 <main+0x1ec0>
					  if (infinity_mode){
 8003d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f1c <main+0x20a4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <main+0x1eb6>
						  pos_y_snake1 = HEIGHT-1;
 8003d26:	230e      	movs	r3, #14
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2c:	e021      	b.n	8003d72 <main+0x1efa>
					  } else {
						  pos_y_snake1 = snake1_next_y;
 8003d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f18 <main+0x20a0>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d36:	e01c      	b.n	8003d72 <main+0x1efa>
					  }
				  } else if (snake1_next_y-1+i > HEIGHT-1) {
 8003d38:	4b77      	ldr	r3, [pc, #476]	@ (8003f18 <main+0x20a0>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	4413      	add	r3, r2
 8003d42:	2b0e      	cmp	r3, #14
 8003d44:	dd0c      	ble.n	8003d60 <main+0x1ee8>
					  if (infinity_mode){
 8003d46:	4b75      	ldr	r3, [pc, #468]	@ (8003f1c <main+0x20a4>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <main+0x1ede>
						  pos_y_snake1 = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d54:	e00d      	b.n	8003d72 <main+0x1efa>
					  } else {
						  pos_y_snake1 = snake1_next_y;
 8003d56:	4b70      	ldr	r3, [pc, #448]	@ (8003f18 <main+0x20a0>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e008      	b.n	8003d72 <main+0x1efa>
					  }
				  } else {
					  pos_y_snake1 = snake1_next_y-1+i;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b6c      	ldr	r3, [pc, #432]	@ (8003f18 <main+0x20a0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				  }
				  uint8_t pos_x_snake1;
				  if (snake1_next_x-1+i < 0) {
 8003d72:	4b6b      	ldr	r3, [pc, #428]	@ (8003f20 <main+0x20a8>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	4413      	add	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da0c      	bge.n	8003d9a <main+0x1f22>
					  if (infinity_mode){
 8003d80:	4b66      	ldr	r3, [pc, #408]	@ (8003f1c <main+0x20a4>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <main+0x1f18>
						  pos_x_snake1 = WIDTH-1;
 8003d88:	2313      	movs	r3, #19
 8003d8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d8e:	e021      	b.n	8003dd4 <main+0x1f5c>
					  } else {
						  pos_x_snake1 = snake1_next_x;
 8003d90:	4b63      	ldr	r3, [pc, #396]	@ (8003f20 <main+0x20a8>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d98:	e01c      	b.n	8003dd4 <main+0x1f5c>
					  }
				  } else if (snake1_next_x-1+i > WIDTH-1) {
 8003d9a:	4b61      	ldr	r3, [pc, #388]	@ (8003f20 <main+0x20a8>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	4413      	add	r3, r2
 8003da4:	2b13      	cmp	r3, #19
 8003da6:	dd0c      	ble.n	8003dc2 <main+0x1f4a>
					  if (infinity_mode){
 8003da8:	4b5c      	ldr	r3, [pc, #368]	@ (8003f1c <main+0x20a4>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <main+0x1f40>
						  pos_x_snake1 = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003db6:	e00d      	b.n	8003dd4 <main+0x1f5c>
					  } else {
						  pos_x_snake1 = snake1_next_x;
 8003db8:	4b59      	ldr	r3, [pc, #356]	@ (8003f20 <main+0x20a8>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dc0:	e008      	b.n	8003dd4 <main+0x1f5c>
					  }
				  } else {
					  pos_x_snake1 = snake1_next_x-1+i;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	4b56      	ldr	r3, [pc, #344]	@ (8003f20 <main+0x20a8>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				  }
				  check_orange_around_snake1 = map[snake1_next_y][pos_x_snake1] - map[snake1_next_y][pos_x_snake1]%2;
 8003dd4:	4b50      	ldr	r3, [pc, #320]	@ (8003f18 <main+0x20a0>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003dde:	4951      	ldr	r1, [pc, #324]	@ (8003f24 <main+0x20ac>)
 8003de0:	4603      	mov	r3, r0
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4403      	add	r3, r0
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	71fb      	strb	r3, [r7, #7]
				  if (check_orange_around_snake1 == 6){
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d103      	bne.n	8003e02 <main+0x1f8a>
					  break_check_orange_snake1 = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
					  break;
 8003e00:	e01d      	b.n	8003e3e <main+0x1fc6>
				  }
				  check_orange_around_snake1 = map[pos_y_snake1][snake1_next_x] - map[pos_y_snake1][snake1_next_x]%2;
 8003e02:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003e06:	4b46      	ldr	r3, [pc, #280]	@ (8003f20 <main+0x20a8>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	4945      	ldr	r1, [pc, #276]	@ (8003f24 <main+0x20ac>)
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	4403      	add	r3, r0
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	71fb      	strb	r3, [r7, #7]
				  if (check_orange_around_snake1 == 6){
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b06      	cmp	r3, #6
 8003e26:	d103      	bne.n	8003e30 <main+0x1fb8>
					  break_check_orange_snake1 = 1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
					  break;
 8003e2e:	e006      	b.n	8003e3e <main+0x1fc6>
			  for (int i = 0; i < 3; i+=2){
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	3302      	adds	r3, #2
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f77f af69 	ble.w	8003d10 <main+0x1e98>
				  }
			  }
			  snake1_orange_around = break_check_orange_snake1 ? 1 : 0;
 8003e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <main+0x20b0>)
 8003e50:	701a      	strb	r2, [r3, #0]

			  //SERPIENTE 2
			  uint8_t break_check_orange_snake2 = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
				  }
				  if (break_check_orange_snake2 == 1){
					  break;
				  }
			  }*/
			  for (int i = 0; i < 3; i+=2){
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e0a5      	b.n	8003faa <main+0x2132>
			  uint8_t pos_y_snake2;
			  if (snake2_next_y-1+i < 0) {
 8003e5e:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <main+0x20b4>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	1e5a      	subs	r2, r3, #1
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da0a      	bge.n	8003e82 <main+0x200a>
				  if (infinity_mode){
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f1c <main+0x20a4>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <main+0x2002>
					  pos_y_snake2 = HEIGHT-1;
 8003e74:	230e      	movs	r3, #14
 8003e76:	76fb      	strb	r3, [r7, #27]
 8003e78:	e01d      	b.n	8003eb6 <main+0x203e>
				  } else {
					  pos_y_snake2 = snake2_next_y;
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f2c <main+0x20b4>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	76fb      	strb	r3, [r7, #27]
 8003e80:	e019      	b.n	8003eb6 <main+0x203e>
				  }
			  } else if (snake2_next_y-1+i > HEIGHT-1) {
 8003e82:	4b2a      	ldr	r3, [pc, #168]	@ (8003f2c <main+0x20b4>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	1e5a      	subs	r2, r3, #1
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	2b0e      	cmp	r3, #14
 8003e8e:	dd0a      	ble.n	8003ea6 <main+0x202e>
				  if (infinity_mode){
 8003e90:	4b22      	ldr	r3, [pc, #136]	@ (8003f1c <main+0x20a4>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <main+0x2026>
					  pos_y_snake2 = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e00b      	b.n	8003eb6 <main+0x203e>
				  } else {
					  pos_y_snake2 = snake2_next_y;
 8003e9e:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <main+0x20b4>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	76fb      	strb	r3, [r7, #27]
 8003ea4:	e007      	b.n	8003eb6 <main+0x203e>
				  }
			  } else {
				  pos_y_snake2 = snake2_next_y-1+i;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <main+0x20b4>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	76fb      	strb	r3, [r7, #27]
			  }
			  uint8_t pos_x_snake2;
			  if (snake2_next_x-1+i < 0) {
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <main+0x20b8>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	da0a      	bge.n	8003eda <main+0x2062>
				  if (infinity_mode){
 8003ec4:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <main+0x20a4>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <main+0x205a>
					  pos_x_snake2 = WIDTH-1;
 8003ecc:	2313      	movs	r3, #19
 8003ece:	76bb      	strb	r3, [r7, #26]
 8003ed0:	e03c      	b.n	8003f4c <main+0x20d4>
				  } else {
					  pos_x_snake2 = snake2_next_x;
 8003ed2:	4b17      	ldr	r3, [pc, #92]	@ (8003f30 <main+0x20b8>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	76bb      	strb	r3, [r7, #26]
 8003ed8:	e038      	b.n	8003f4c <main+0x20d4>
				  }
			  } else if (snake2_next_x-1+i > WIDTH-1) {
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <main+0x20b8>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	2b13      	cmp	r3, #19
 8003ee6:	dd29      	ble.n	8003f3c <main+0x20c4>
				  if (infinity_mode){
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <main+0x20a4>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d021      	beq.n	8003f34 <main+0x20bc>
					  pos_x_snake2 = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	76bb      	strb	r3, [r7, #26]
 8003ef4:	e02a      	b.n	8003f4c <main+0x20d4>
 8003ef6:	bf00      	nop
 8003ef8:	20009800 	.word	0x20009800
 8003efc:	200096d4 	.word	0x200096d4
 8003f00:	20005404 	.word	0x20005404
 8003f04:	200096cf 	.word	0x200096cf
 8003f08:	2000980b 	.word	0x2000980b
 8003f0c:	20009594 	.word	0x20009594
 8003f10:	20008e30 	.word	0x20008e30
 8003f14:	20009595 	.word	0x20009595
 8003f18:	200096cc 	.word	0x200096cc
 8003f1c:	20006c2c 	.word	0x20006c2c
 8003f20:	200096cb 	.word	0x200096cb
 8003f24:	2000944c 	.word	0x2000944c
 8003f28:	200096d1 	.word	0x200096d1
 8003f2c:	20009808 	.word	0x20009808
 8003f30:	20009807 	.word	0x20009807
				  } else {
					  pos_x_snake2 = snake2_next_x;
 8003f34:	4ba7      	ldr	r3, [pc, #668]	@ (80041d4 <main+0x235c>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	76bb      	strb	r3, [r7, #26]
 8003f3a:	e007      	b.n	8003f4c <main+0x20d4>
				  }
			  } else {
				  pos_x_snake2 = snake2_next_x-1+i;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4ba4      	ldr	r3, [pc, #656]	@ (80041d4 <main+0x235c>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	76bb      	strb	r3, [r7, #26]
			  }
			  check_orange_around_snake2 = map[snake2_next_y][pos_x_snake2] - map[snake2_next_y][pos_x_snake2]%2;
 8003f4c:	4ba2      	ldr	r3, [pc, #648]	@ (80041d8 <main+0x2360>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	7eba      	ldrb	r2, [r7, #26]
 8003f54:	49a1      	ldr	r1, [pc, #644]	@ (80041dc <main+0x2364>)
 8003f56:	4603      	mov	r3, r0
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4403      	add	r3, r0
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	71bb      	strb	r3, [r7, #6]
			  if (check_orange_around_snake2 == 6){
 8003f6a:	79bb      	ldrb	r3, [r7, #6]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d103      	bne.n	8003f78 <main+0x2100>
				  break_check_orange_snake2 = 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
				  break;
 8003f76:	e01c      	b.n	8003fb2 <main+0x213a>
			  }
			  check_orange_around_snake2 = map[pos_y_snake2][snake2_next_x] - map[pos_y_snake2][snake2_next_x]%2;
 8003f78:	7efa      	ldrb	r2, [r7, #27]
 8003f7a:	4b96      	ldr	r3, [pc, #600]	@ (80041d4 <main+0x235c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	4996      	ldr	r1, [pc, #600]	@ (80041dc <main+0x2364>)
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	4403      	add	r3, r0
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	71bb      	strb	r3, [r7, #6]
			  if (check_orange_around_snake2 == 6){
 8003f96:	79bb      	ldrb	r3, [r7, #6]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d103      	bne.n	8003fa4 <main+0x212c>
				  break_check_orange_snake2 = 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
				  break;
 8003fa2:	e006      	b.n	8003fb2 <main+0x213a>
			  for (int i = 0; i < 3; i+=2){
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f77f af56 	ble.w	8003e5e <main+0x1fe6>
			  }
		  }
			  snake2_orange_around = break_check_orange_snake2 ? 1 : 0;
 8003fb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b87      	ldr	r3, [pc, #540]	@ (80041e0 <main+0x2368>)
 8003fc4:	701a      	strb	r2, [r3, #0]

			  // PINTAR CABEZAS
			  if (snake1_lost == 0){
 8003fc6:	4b87      	ldr	r3, [pc, #540]	@ (80041e4 <main+0x236c>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 833d 	bne.w	800464a <main+0x27d2>
				  //FillRect(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0x0019);
				  snake1_current_cell_value = map[snake1_next_y][snake1_next_x] % 2;
 8003fd0:	4b85      	ldr	r3, [pc, #532]	@ (80041e8 <main+0x2370>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4b85      	ldr	r3, [pc, #532]	@ (80041ec <main+0x2374>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80041dc <main+0x2364>)
 8003fde:	460b      	mov	r3, r1
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4403      	add	r3, r0
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80041f0 <main+0x2378>)
 8003ff4:	701a      	strb	r2, [r3, #0]
				  switch (dir_snake1){
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80041f4 <main+0x237c>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	f200 818c 	bhi.w	8004318 <main+0x24a0>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <main+0x2190>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004019 	.word	0x08004019
 800400c:	080040c9 	.word	0x080040c9
 8004010:	08004179 	.word	0x08004179
 8004014:	08004269 	.word	0x08004269
				  case 0:
					  if (snake1_current_cell_value == 1){
 8004018:	4b75      	ldr	r3, [pc, #468]	@ (80041f0 <main+0x2378>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d129      	bne.n	8004074 <main+0x21fc>
						  if (snake1_orange_around == 1){
 8004020:	4b75      	ldr	r3, [pc, #468]	@ (80041f8 <main+0x2380>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d112      	bne.n	800404e <main+0x21d6>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_eats_1, 0, 0);
 8004028:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <main+0x2374>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	4618      	mov	r0, r3
 8004030:	4b6d      	ldr	r3, [pc, #436]	@ (80041e8 <main+0x2370>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	2300      	movs	r3, #0
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	2300      	movs	r3, #0
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	4b6e      	ldr	r3, [pc, #440]	@ (80041fc <main+0x2384>)
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2310      	movs	r3, #16
 8004046:	2210      	movs	r2, #16
 8004048:	f7fd fab6 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_eats_0, 0, 0);
						  } else {
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_0, 0, 0);
						  }
					  }
					  break;
 800404c:	e164      	b.n	8004318 <main+0x24a0>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_1, 0, 0);
 800404e:	4b67      	ldr	r3, [pc, #412]	@ (80041ec <main+0x2374>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	4618      	mov	r0, r3
 8004056:	4b64      	ldr	r3, [pc, #400]	@ (80041e8 <main+0x2370>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	2300      	movs	r3, #0
 8004060:	9302      	str	r3, [sp, #8]
 8004062:	2300      	movs	r3, #0
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	4b66      	ldr	r3, [pc, #408]	@ (8004200 <main+0x2388>)
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2310      	movs	r3, #16
 800406c:	2210      	movs	r2, #16
 800406e:	f7fd faa3 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004072:	e151      	b.n	8004318 <main+0x24a0>
						  if (snake1_orange_around == 1){
 8004074:	4b60      	ldr	r3, [pc, #384]	@ (80041f8 <main+0x2380>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d112      	bne.n	80040a2 <main+0x222a>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_eats_0, 0, 0);
 800407c:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <main+0x2374>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4618      	mov	r0, r3
 8004084:	4b58      	ldr	r3, [pc, #352]	@ (80041e8 <main+0x2370>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	2300      	movs	r3, #0
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	2300      	movs	r3, #0
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	4b5b      	ldr	r3, [pc, #364]	@ (8004204 <main+0x238c>)
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2310      	movs	r3, #16
 800409a:	2210      	movs	r2, #16
 800409c:	f7fd fa8c 	bl	80015b8 <LCD_Bitmap>
					  break;
 80040a0:	e13a      	b.n	8004318 <main+0x24a0>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_0, 0, 0);
 80040a2:	4b52      	ldr	r3, [pc, #328]	@ (80041ec <main+0x2374>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	4b4f      	ldr	r3, [pc, #316]	@ (80041e8 <main+0x2370>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	2300      	movs	r3, #0
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	2300      	movs	r3, #0
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <main+0x2390>)
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2310      	movs	r3, #16
 80040c0:	2210      	movs	r2, #16
 80040c2:	f7fd fa79 	bl	80015b8 <LCD_Bitmap>
					  break;
 80040c6:	e127      	b.n	8004318 <main+0x24a0>
				  case 1:
					  if (snake1_current_cell_value == 1){
 80040c8:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <main+0x2378>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d129      	bne.n	8004124 <main+0x22ac>
						  if (snake1_orange_around == 1){
 80040d0:	4b49      	ldr	r3, [pc, #292]	@ (80041f8 <main+0x2380>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d112      	bne.n	80040fe <main+0x2286>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_eats_1, 1, 0);
 80040d8:	4b44      	ldr	r3, [pc, #272]	@ (80041ec <main+0x2374>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <main+0x2370>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	2301      	movs	r3, #1
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	4b42      	ldr	r3, [pc, #264]	@ (80041fc <main+0x2384>)
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2310      	movs	r3, #16
 80040f6:	2210      	movs	r2, #16
 80040f8:	f7fd fa5e 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_eats_0, 1, 0);
						  } else {
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_0, 1, 0);
						  }
					  }
					  break;
 80040fc:	e10c      	b.n	8004318 <main+0x24a0>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_1, 1, 0);
 80040fe:	4b3b      	ldr	r3, [pc, #236]	@ (80041ec <main+0x2374>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <main+0x2370>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	2300      	movs	r3, #0
 8004110:	9302      	str	r3, [sp, #8]
 8004112:	2301      	movs	r3, #1
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	4b3a      	ldr	r3, [pc, #232]	@ (8004200 <main+0x2388>)
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2310      	movs	r3, #16
 800411c:	2210      	movs	r2, #16
 800411e:	f7fd fa4b 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004122:	e0f9      	b.n	8004318 <main+0x24a0>
						  if (snake1_orange_around == 1){
 8004124:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <main+0x2380>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d112      	bne.n	8004152 <main+0x22da>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_eats_0, 1, 0);
 800412c:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <main+0x2374>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	4618      	mov	r0, r3
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <main+0x2370>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	2300      	movs	r3, #0
 800413e:	9302      	str	r3, [sp, #8]
 8004140:	2301      	movs	r3, #1
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	4b2f      	ldr	r3, [pc, #188]	@ (8004204 <main+0x238c>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2310      	movs	r3, #16
 800414a:	2210      	movs	r2, #16
 800414c:	f7fd fa34 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004150:	e0e2      	b.n	8004318 <main+0x24a0>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_0, 1, 0);
 8004152:	4b26      	ldr	r3, [pc, #152]	@ (80041ec <main+0x2374>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	4b23      	ldr	r3, [pc, #140]	@ (80041e8 <main+0x2370>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	2300      	movs	r3, #0
 8004164:	9302      	str	r3, [sp, #8]
 8004166:	2301      	movs	r3, #1
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <main+0x2390>)
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2310      	movs	r3, #16
 8004170:	2210      	movs	r2, #16
 8004172:	f7fd fa21 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004176:	e0cf      	b.n	8004318 <main+0x24a0>
				  case 2:
					  if (snake1_current_cell_value == 1){
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <main+0x2378>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d149      	bne.n	8004214 <main+0x239c>
						  if (snake1_orange_around == 1){
 8004180:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <main+0x2380>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d112      	bne.n	80041ae <main+0x2336>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_eats_1, 0, 1);
 8004188:	4b18      	ldr	r3, [pc, #96]	@ (80041ec <main+0x2374>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4618      	mov	r0, r3
 8004190:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <main+0x2370>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	2301      	movs	r3, #1
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	2300      	movs	r3, #0
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <main+0x2394>)
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2310      	movs	r3, #16
 80041a6:	2210      	movs	r2, #16
 80041a8:	f7fd fa06 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_eats_0, 0, 1);
						  } else {
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_0, 0, 1);
						  }
					  }
					  break;
 80041ac:	e0b4      	b.n	8004318 <main+0x24a0>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_1, 0, 1);
 80041ae:	4b0f      	ldr	r3, [pc, #60]	@ (80041ec <main+0x2374>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <main+0x2370>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	2301      	movs	r3, #1
 80041c0:	9302      	str	r3, [sp, #8]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <main+0x2398>)
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2310      	movs	r3, #16
 80041cc:	2210      	movs	r2, #16
 80041ce:	f7fd f9f3 	bl	80015b8 <LCD_Bitmap>
					  break;
 80041d2:	e0a1      	b.n	8004318 <main+0x24a0>
 80041d4:	20009807 	.word	0x20009807
 80041d8:	20009808 	.word	0x20009808
 80041dc:	2000944c 	.word	0x2000944c
 80041e0:	2000980d 	.word	0x2000980d
 80041e4:	200096c7 	.word	0x200096c7
 80041e8:	200096cc 	.word	0x200096cc
 80041ec:	200096cb 	.word	0x200096cb
 80041f0:	200096d0 	.word	0x200096d0
 80041f4:	200096c5 	.word	0x200096c5
 80041f8:	200096d1 	.word	0x200096d1
 80041fc:	20002e04 	.word	0x20002e04
 8004200:	20002604 	.word	0x20002604
 8004204:	20002c04 	.word	0x20002c04
 8004208:	20002404 	.word	0x20002404
 800420c:	20002204 	.word	0x20002204
 8004210:	20001a04 	.word	0x20001a04
						  if (snake1_orange_around == 1){
 8004214:	4ba1      	ldr	r3, [pc, #644]	@ (800449c <main+0x2624>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d112      	bne.n	8004242 <main+0x23ca>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_eats_0, 0, 1);
 800421c:	4ba0      	ldr	r3, [pc, #640]	@ (80044a0 <main+0x2628>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4618      	mov	r0, r3
 8004224:	4b9f      	ldr	r3, [pc, #636]	@ (80044a4 <main+0x262c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	2301      	movs	r3, #1
 800422e:	9302      	str	r3, [sp, #8]
 8004230:	2300      	movs	r3, #0
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	4b9c      	ldr	r3, [pc, #624]	@ (80044a8 <main+0x2630>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2310      	movs	r3, #16
 800423a:	2210      	movs	r2, #16
 800423c:	f7fd f9bc 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004240:	e06a      	b.n	8004318 <main+0x24a0>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_0, 0, 1);
 8004242:	4b97      	ldr	r3, [pc, #604]	@ (80044a0 <main+0x2628>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	4b96      	ldr	r3, [pc, #600]	@ (80044a4 <main+0x262c>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	2301      	movs	r3, #1
 8004254:	9302      	str	r3, [sp, #8]
 8004256:	2300      	movs	r3, #0
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	4b94      	ldr	r3, [pc, #592]	@ (80044ac <main+0x2634>)
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2310      	movs	r3, #16
 8004260:	2210      	movs	r2, #16
 8004262:	f7fd f9a9 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004266:	e057      	b.n	8004318 <main+0x24a0>
				  case 3:
					  if (snake1_current_cell_value == 1){
 8004268:	4b91      	ldr	r3, [pc, #580]	@ (80044b0 <main+0x2638>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d129      	bne.n	80042c4 <main+0x244c>
						  if (snake1_orange_around == 1){
 8004270:	4b8a      	ldr	r3, [pc, #552]	@ (800449c <main+0x2624>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d112      	bne.n	800429e <main+0x2426>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_eats_1, 0, 0);
 8004278:	4b89      	ldr	r3, [pc, #548]	@ (80044a0 <main+0x2628>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	4b88      	ldr	r3, [pc, #544]	@ (80044a4 <main+0x262c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	2300      	movs	r3, #0
 800428a:	9302      	str	r3, [sp, #8]
 800428c:	2300      	movs	r3, #0
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	4b88      	ldr	r3, [pc, #544]	@ (80044b4 <main+0x263c>)
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2310      	movs	r3, #16
 8004296:	2210      	movs	r2, #16
 8004298:	f7fd f98e 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_eats_0, 0, 0);
						  } else {
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_0, 0, 0);
						  }
					  }
					  break;
 800429c:	e03b      	b.n	8004316 <main+0x249e>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_1, 0, 0);
 800429e:	4b80      	ldr	r3, [pc, #512]	@ (80044a0 <main+0x2628>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	4b7f      	ldr	r3, [pc, #508]	@ (80044a4 <main+0x262c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	9302      	str	r3, [sp, #8]
 80042b2:	2300      	movs	r3, #0
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	4b80      	ldr	r3, [pc, #512]	@ (80044b8 <main+0x2640>)
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2310      	movs	r3, #16
 80042bc:	2210      	movs	r2, #16
 80042be:	f7fd f97b 	bl	80015b8 <LCD_Bitmap>
					  break;
 80042c2:	e028      	b.n	8004316 <main+0x249e>
						  if (snake1_orange_around == 1){
 80042c4:	4b75      	ldr	r3, [pc, #468]	@ (800449c <main+0x2624>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d112      	bne.n	80042f2 <main+0x247a>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_eats_0, 0, 0);
 80042cc:	4b74      	ldr	r3, [pc, #464]	@ (80044a0 <main+0x2628>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	4b73      	ldr	r3, [pc, #460]	@ (80044a4 <main+0x262c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	2300      	movs	r3, #0
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	4b70      	ldr	r3, [pc, #448]	@ (80044a8 <main+0x2630>)
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2310      	movs	r3, #16
 80042ea:	2210      	movs	r2, #16
 80042ec:	f7fd f964 	bl	80015b8 <LCD_Bitmap>
					  break;
 80042f0:	e011      	b.n	8004316 <main+0x249e>
							  LCD_Bitmap(snake1_next_x*SQ_SIZE, snake1_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_0, 0, 0);
 80042f2:	4b6b      	ldr	r3, [pc, #428]	@ (80044a0 <main+0x2628>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <main+0x262c>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	2300      	movs	r3, #0
 8004304:	9302      	str	r3, [sp, #8]
 8004306:	2300      	movs	r3, #0
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	4b68      	ldr	r3, [pc, #416]	@ (80044ac <main+0x2634>)
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2310      	movs	r3, #16
 8004310:	2210      	movs	r2, #16
 8004312:	f7fd f951 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004316:	bf00      	nop
				  }
				  //PINTAR CUERPO SIGUIENTE A LA CABEZA
				  snake1_current_cell_value = map[snake1[1][1]][snake1[1][0]] % 2;
 8004318:	4b68      	ldr	r3, [pc, #416]	@ (80044bc <main+0x2644>)
 800431a:	791b      	ldrb	r3, [r3, #4]
 800431c:	4619      	mov	r1, r3
 800431e:	4b67      	ldr	r3, [pc, #412]	@ (80044bc <main+0x2644>)
 8004320:	78db      	ldrb	r3, [r3, #3]
 8004322:	4618      	mov	r0, r3
 8004324:	4a66      	ldr	r2, [pc, #408]	@ (80044c0 <main+0x2648>)
 8004326:	460b      	mov	r3, r1
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	4403      	add	r3, r0
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b5d      	ldr	r3, [pc, #372]	@ (80044b0 <main+0x2638>)
 800433c:	701a      	strb	r2, [r3, #0]
				  switch (snake1[1][2]){
 800433e:	4b5f      	ldr	r3, [pc, #380]	@ (80044bc <main+0x2644>)
 8004340:	795b      	ldrb	r3, [r3, #5]
 8004342:	2b07      	cmp	r3, #7
 8004344:	f200 8181 	bhi.w	800464a <main+0x27d2>
 8004348:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <main+0x24d8>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004371 	.word	0x08004371
 8004354:	080043c5 	.word	0x080043c5
 8004358:	08004419 	.word	0x08004419
 800435c:	0800446d 	.word	0x0800446d
 8004360:	080044fb 	.word	0x080044fb
 8004364:	0800454f 	.word	0x0800454f
 8004368:	080045a3 	.word	0x080045a3
 800436c:	080045f7 	.word	0x080045f7
				  case 0:
					  if (snake1_current_cell_value == 1){
 8004370:	4b4f      	ldr	r3, [pc, #316]	@ (80044b0 <main+0x2638>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d112      	bne.n	800439e <main+0x2526>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_1, 0, 0);
 8004378:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <main+0x2644>)
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	4618      	mov	r0, r3
 8004380:	4b4e      	ldr	r3, [pc, #312]	@ (80044bc <main+0x2644>)
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4619      	mov	r1, r3
 8004388:	2300      	movs	r3, #0
 800438a:	9302      	str	r3, [sp, #8]
 800438c:	2300      	movs	r3, #0
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	4b4c      	ldr	r3, [pc, #304]	@ (80044c4 <main+0x264c>)
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2310      	movs	r3, #16
 8004396:	2210      	movs	r2, #16
 8004398:	f7fd f90e 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_0, 0, 0);
					  }
					  break;
 800439c:	e155      	b.n	800464a <main+0x27d2>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_0, 0, 0);
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <main+0x2644>)
 80043a0:	78db      	ldrb	r3, [r3, #3]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	4618      	mov	r0, r3
 80043a6:	4b45      	ldr	r3, [pc, #276]	@ (80044bc <main+0x2644>)
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	2300      	movs	r3, #0
 80043b0:	9302      	str	r3, [sp, #8]
 80043b2:	2300      	movs	r3, #0
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	4b44      	ldr	r3, [pc, #272]	@ (80044c8 <main+0x2650>)
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2310      	movs	r3, #16
 80043bc:	2210      	movs	r2, #16
 80043be:	f7fd f8fb 	bl	80015b8 <LCD_Bitmap>
					  break;
 80043c2:	e142      	b.n	800464a <main+0x27d2>
				  case 1:
					  if (snake1_current_cell_value == 1){
 80043c4:	4b3a      	ldr	r3, [pc, #232]	@ (80044b0 <main+0x2638>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d112      	bne.n	80043f2 <main+0x257a>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_1, 0, 0);
 80043cc:	4b3b      	ldr	r3, [pc, #236]	@ (80044bc <main+0x2644>)
 80043ce:	78db      	ldrb	r3, [r3, #3]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <main+0x2644>)
 80043d6:	791b      	ldrb	r3, [r3, #4]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	2300      	movs	r3, #0
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <main+0x264c>)
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2310      	movs	r3, #16
 80043ea:	2210      	movs	r2, #16
 80043ec:	f7fd f8e4 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_0, 0, 0);
					  }
					  break;
 80043f0:	e12b      	b.n	800464a <main+0x27d2>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_up_0, 0, 0);
 80043f2:	4b32      	ldr	r3, [pc, #200]	@ (80044bc <main+0x2644>)
 80043f4:	78db      	ldrb	r3, [r3, #3]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4618      	mov	r0, r3
 80043fa:	4b30      	ldr	r3, [pc, #192]	@ (80044bc <main+0x2644>)
 80043fc:	791b      	ldrb	r3, [r3, #4]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	2300      	movs	r3, #0
 8004404:	9302      	str	r3, [sp, #8]
 8004406:	2300      	movs	r3, #0
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <main+0x2650>)
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2310      	movs	r3, #16
 8004410:	2210      	movs	r2, #16
 8004412:	f7fd f8d1 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004416:	e118      	b.n	800464a <main+0x27d2>
				  case 2:
					  if (snake1_current_cell_value == 1){
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <main+0x2638>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d112      	bne.n	8004446 <main+0x25ce>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_right_1, 0, 0);
 8004420:	4b26      	ldr	r3, [pc, #152]	@ (80044bc <main+0x2644>)
 8004422:	78db      	ldrb	r3, [r3, #3]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	4b24      	ldr	r3, [pc, #144]	@ (80044bc <main+0x2644>)
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	2300      	movs	r3, #0
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	2300      	movs	r3, #0
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <main+0x2654>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2310      	movs	r3, #16
 800443e:	2210      	movs	r2, #16
 8004440:	f7fd f8ba 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_right_0, 0, 0);
					  }
					  break;
 8004444:	e101      	b.n	800464a <main+0x27d2>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_right_0, 0, 0);
 8004446:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <main+0x2644>)
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <main+0x2644>)
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	2300      	movs	r3, #0
 8004458:	9302      	str	r3, [sp, #8]
 800445a:	2300      	movs	r3, #0
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	4b1c      	ldr	r3, [pc, #112]	@ (80044d0 <main+0x2658>)
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2310      	movs	r3, #16
 8004464:	2210      	movs	r2, #16
 8004466:	f7fd f8a7 	bl	80015b8 <LCD_Bitmap>
					  break;
 800446a:	e0ee      	b.n	800464a <main+0x27d2>
				  case 3:
					  if (snake1_current_cell_value == 1){
 800446c:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <main+0x2638>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d12f      	bne.n	80044d4 <main+0x265c>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_right_1, 0, 0);
 8004474:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <main+0x2644>)
 8004476:	78db      	ldrb	r3, [r3, #3]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4618      	mov	r0, r3
 800447c:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <main+0x2644>)
 800447e:	791b      	ldrb	r3, [r3, #4]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	2300      	movs	r3, #0
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	2300      	movs	r3, #0
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <main+0x2654>)
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2310      	movs	r3, #16
 8004492:	2210      	movs	r2, #16
 8004494:	f7fd f890 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_right_0, 0, 0);
					  }
					  break;
 8004498:	e0d7      	b.n	800464a <main+0x27d2>
 800449a:	bf00      	nop
 800449c:	200096d1 	.word	0x200096d1
 80044a0:	200096cb 	.word	0x200096cb
 80044a4:	200096cc 	.word	0x200096cc
 80044a8:	20002004 	.word	0x20002004
 80044ac:	20001804 	.word	0x20001804
 80044b0:	200096d0 	.word	0x200096d0
 80044b4:	20002204 	.word	0x20002204
 80044b8:	20001a04 	.word	0x20001a04
 80044bc:	20009598 	.word	0x20009598
 80044c0:	2000944c 	.word	0x2000944c
 80044c4:	20000604 	.word	0x20000604
 80044c8:	20000404 	.word	0x20000404
 80044cc:	20000204 	.word	0x20000204
 80044d0:	20000004 	.word	0x20000004
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake1_right_0, 0, 0);
 80044d4:	4b9d      	ldr	r3, [pc, #628]	@ (800474c <main+0x28d4>)
 80044d6:	78db      	ldrb	r3, [r3, #3]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4618      	mov	r0, r3
 80044dc:	4b9b      	ldr	r3, [pc, #620]	@ (800474c <main+0x28d4>)
 80044de:	791b      	ldrb	r3, [r3, #4]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	4b98      	ldr	r3, [pc, #608]	@ (8004750 <main+0x28d8>)
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2310      	movs	r3, #16
 80044f2:	2210      	movs	r2, #16
 80044f4:	f7fd f860 	bl	80015b8 <LCD_Bitmap>
					  break;
 80044f8:	e0a7      	b.n	800464a <main+0x27d2>
				  case 4:
					  if (snake1_current_cell_value == 1){
 80044fa:	4b96      	ldr	r3, [pc, #600]	@ (8004754 <main+0x28dc>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d112      	bne.n	8004528 <main+0x26b0>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_1, 1, 1);
 8004502:	4b92      	ldr	r3, [pc, #584]	@ (800474c <main+0x28d4>)
 8004504:	78db      	ldrb	r3, [r3, #3]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	4b90      	ldr	r3, [pc, #576]	@ (800474c <main+0x28d4>)
 800450c:	791b      	ldrb	r3, [r3, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	2301      	movs	r3, #1
 8004514:	9302      	str	r3, [sp, #8]
 8004516:	2301      	movs	r3, #1
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	4b8f      	ldr	r3, [pc, #572]	@ (8004758 <main+0x28e0>)
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2310      	movs	r3, #16
 8004520:	2210      	movs	r2, #16
 8004522:	f7fd f849 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 1, 1);
					  }
					  break;
 8004526:	e090      	b.n	800464a <main+0x27d2>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 1, 1);
 8004528:	4b88      	ldr	r3, [pc, #544]	@ (800474c <main+0x28d4>)
 800452a:	78db      	ldrb	r3, [r3, #3]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4618      	mov	r0, r3
 8004530:	4b86      	ldr	r3, [pc, #536]	@ (800474c <main+0x28d4>)
 8004532:	791b      	ldrb	r3, [r3, #4]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	2301      	movs	r3, #1
 800453a:	9302      	str	r3, [sp, #8]
 800453c:	2301      	movs	r3, #1
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	4b86      	ldr	r3, [pc, #536]	@ (800475c <main+0x28e4>)
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2310      	movs	r3, #16
 8004546:	2210      	movs	r2, #16
 8004548:	f7fd f836 	bl	80015b8 <LCD_Bitmap>
					  break;
 800454c:	e07d      	b.n	800464a <main+0x27d2>
				  case 5:
					  if (snake1_current_cell_value == 1){
 800454e:	4b81      	ldr	r3, [pc, #516]	@ (8004754 <main+0x28dc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d112      	bne.n	800457c <main+0x2704>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_1, 1, 0);
 8004556:	4b7d      	ldr	r3, [pc, #500]	@ (800474c <main+0x28d4>)
 8004558:	78db      	ldrb	r3, [r3, #3]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	4b7b      	ldr	r3, [pc, #492]	@ (800474c <main+0x28d4>)
 8004560:	791b      	ldrb	r3, [r3, #4]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	2300      	movs	r3, #0
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	2301      	movs	r3, #1
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	4b7a      	ldr	r3, [pc, #488]	@ (8004758 <main+0x28e0>)
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2310      	movs	r3, #16
 8004574:	2210      	movs	r2, #16
 8004576:	f7fd f81f 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 1, 0);
					  }
					  break;
 800457a:	e066      	b.n	800464a <main+0x27d2>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 1, 0);
 800457c:	4b73      	ldr	r3, [pc, #460]	@ (800474c <main+0x28d4>)
 800457e:	78db      	ldrb	r3, [r3, #3]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	4b71      	ldr	r3, [pc, #452]	@ (800474c <main+0x28d4>)
 8004586:	791b      	ldrb	r3, [r3, #4]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	2300      	movs	r3, #0
 800458e:	9302      	str	r3, [sp, #8]
 8004590:	2301      	movs	r3, #1
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	4b71      	ldr	r3, [pc, #452]	@ (800475c <main+0x28e4>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2310      	movs	r3, #16
 800459a:	2210      	movs	r2, #16
 800459c:	f7fd f80c 	bl	80015b8 <LCD_Bitmap>
					  break;
 80045a0:	e053      	b.n	800464a <main+0x27d2>
				  case 6:
					  if (snake1_current_cell_value == 1){
 80045a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004754 <main+0x28dc>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d112      	bne.n	80045d0 <main+0x2758>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_1, 0, 1);
 80045aa:	4b68      	ldr	r3, [pc, #416]	@ (800474c <main+0x28d4>)
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	4618      	mov	r0, r3
 80045b2:	4b66      	ldr	r3, [pc, #408]	@ (800474c <main+0x28d4>)
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	2301      	movs	r3, #1
 80045bc:	9302      	str	r3, [sp, #8]
 80045be:	2300      	movs	r3, #0
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	4b65      	ldr	r3, [pc, #404]	@ (8004758 <main+0x28e0>)
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	2310      	movs	r3, #16
 80045c8:	2210      	movs	r2, #16
 80045ca:	f7fc fff5 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 0, 1);
					  }
					  break;
 80045ce:	e03c      	b.n	800464a <main+0x27d2>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 0, 1);
 80045d0:	4b5e      	ldr	r3, [pc, #376]	@ (800474c <main+0x28d4>)
 80045d2:	78db      	ldrb	r3, [r3, #3]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	4b5c      	ldr	r3, [pc, #368]	@ (800474c <main+0x28d4>)
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	2301      	movs	r3, #1
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	4b5c      	ldr	r3, [pc, #368]	@ (800475c <main+0x28e4>)
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2310      	movs	r3, #16
 80045ee:	2210      	movs	r2, #16
 80045f0:	f7fc ffe2 	bl	80015b8 <LCD_Bitmap>
					  break;
 80045f4:	e029      	b.n	800464a <main+0x27d2>
				  case 7:
					  if (snake1_current_cell_value == 1){
 80045f6:	4b57      	ldr	r3, [pc, #348]	@ (8004754 <main+0x28dc>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d112      	bne.n	8004624 <main+0x27ac>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_1, 0, 0);
 80045fe:	4b53      	ldr	r3, [pc, #332]	@ (800474c <main+0x28d4>)
 8004600:	78db      	ldrb	r3, [r3, #3]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	4b51      	ldr	r3, [pc, #324]	@ (800474c <main+0x28d4>)
 8004608:	791b      	ldrb	r3, [r3, #4]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	2300      	movs	r3, #0
 8004610:	9302      	str	r3, [sp, #8]
 8004612:	2300      	movs	r3, #0
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	4b50      	ldr	r3, [pc, #320]	@ (8004758 <main+0x28e0>)
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2310      	movs	r3, #16
 800461c:	2210      	movs	r2, #16
 800461e:	f7fc ffcb 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 0, 0);
					  }
					  break;
 8004622:	e011      	b.n	8004648 <main+0x27d0>
						  LCD_Bitmap(snake1[1][0]*SQ_SIZE, snake1[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_0, 0, 0);
 8004624:	4b49      	ldr	r3, [pc, #292]	@ (800474c <main+0x28d4>)
 8004626:	78db      	ldrb	r3, [r3, #3]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4618      	mov	r0, r3
 800462c:	4b47      	ldr	r3, [pc, #284]	@ (800474c <main+0x28d4>)
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	2300      	movs	r3, #0
 8004636:	9302      	str	r3, [sp, #8]
 8004638:	2300      	movs	r3, #0
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	4b47      	ldr	r3, [pc, #284]	@ (800475c <main+0x28e4>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2310      	movs	r3, #16
 8004642:	2210      	movs	r2, #16
 8004644:	f7fc ffb8 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004648:	bf00      	nop
				  }
			  }
			  if (snake2_lost == 0){
 800464a:	4b45      	ldr	r3, [pc, #276]	@ (8004760 <main+0x28e8>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 834f 	bne.w	8004cf2 <main+0x2e7a>
				  //FillRect(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0xF800);
				  snake2_current_cell_value = map[snake2_next_y][snake2_next_x] % 2;
 8004654:	4b43      	ldr	r3, [pc, #268]	@ (8004764 <main+0x28ec>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	4b43      	ldr	r3, [pc, #268]	@ (8004768 <main+0x28f0>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	4a42      	ldr	r2, [pc, #264]	@ (800476c <main+0x28f4>)
 8004662:	460b      	mov	r3, r1
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	4403      	add	r3, r0
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4b3e      	ldr	r3, [pc, #248]	@ (8004770 <main+0x28f8>)
 8004678:	701a      	strb	r2, [r3, #0]
				  switch (dir_snake2){
 800467a:	4b3e      	ldr	r3, [pc, #248]	@ (8004774 <main+0x28fc>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b03      	cmp	r3, #3
 8004680:	f200 818c 	bhi.w	800499c <main+0x2b24>
 8004684:	a201      	add	r2, pc, #4	@ (adr r2, 800468c <main+0x2814>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	0800469d 	.word	0x0800469d
 8004690:	0800478d 	.word	0x0800478d
 8004694:	0800483d 	.word	0x0800483d
 8004698:	080048ed 	.word	0x080048ed
				  case 0:
					  if (snake2_current_cell_value == 1){
 800469c:	4b34      	ldr	r3, [pc, #208]	@ (8004770 <main+0x28f8>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d129      	bne.n	80046f8 <main+0x2880>
						  if (snake2_orange_around == 1){
 80046a4:	4b34      	ldr	r3, [pc, #208]	@ (8004778 <main+0x2900>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d112      	bne.n	80046d2 <main+0x285a>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_eats_1, 0, 0);
 80046ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004768 <main+0x28f0>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4618      	mov	r0, r3
 80046b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <main+0x28ec>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	9302      	str	r3, [sp, #8]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <main+0x2904>)
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2310      	movs	r3, #16
 80046ca:	2210      	movs	r2, #16
 80046cc:	f7fc ff74 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_eats_0, 0, 0);
						  } else {
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_0, 0, 0);
						  }
					  }
					  break;
 80046d0:	e164      	b.n	800499c <main+0x2b24>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_1, 0, 0);
 80046d2:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <main+0x28f0>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	4b22      	ldr	r3, [pc, #136]	@ (8004764 <main+0x28ec>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	9302      	str	r3, [sp, #8]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <main+0x2908>)
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2310      	movs	r3, #16
 80046f0:	2210      	movs	r2, #16
 80046f2:	f7fc ff61 	bl	80015b8 <LCD_Bitmap>
					  break;
 80046f6:	e151      	b.n	800499c <main+0x2b24>
						  if (snake2_orange_around == 1){
 80046f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004778 <main+0x2900>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d112      	bne.n	8004726 <main+0x28ae>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_eats_0, 0, 0);
 8004700:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <main+0x28f0>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	4b16      	ldr	r3, [pc, #88]	@ (8004764 <main+0x28ec>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	2300      	movs	r3, #0
 8004712:	9302      	str	r3, [sp, #8]
 8004714:	2300      	movs	r3, #0
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <main+0x290c>)
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2310      	movs	r3, #16
 800471e:	2210      	movs	r2, #16
 8004720:	f7fc ff4a 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004724:	e13a      	b.n	800499c <main+0x2b24>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_0, 0, 0);
 8004726:	4b10      	ldr	r3, [pc, #64]	@ (8004768 <main+0x28f0>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4618      	mov	r0, r3
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <main+0x28ec>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	2300      	movs	r3, #0
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	2300      	movs	r3, #0
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	4b12      	ldr	r3, [pc, #72]	@ (8004788 <main+0x2910>)
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2310      	movs	r3, #16
 8004744:	2210      	movs	r2, #16
 8004746:	f7fc ff37 	bl	80015b8 <LCD_Bitmap>
					  break;
 800474a:	e127      	b.n	800499c <main+0x2b24>
 800474c:	20009598 	.word	0x20009598
 8004750:	20000004 	.word	0x20000004
 8004754:	200096d0 	.word	0x200096d0
 8004758:	20001204 	.word	0x20001204
 800475c:	20001004 	.word	0x20001004
 8004760:	20009803 	.word	0x20009803
 8004764:	20009808 	.word	0x20009808
 8004768:	20009807 	.word	0x20009807
 800476c:	2000944c 	.word	0x2000944c
 8004770:	2000980c 	.word	0x2000980c
 8004774:	20009801 	.word	0x20009801
 8004778:	2000980d 	.word	0x2000980d
 800477c:	20004604 	.word	0x20004604
 8004780:	20003e04 	.word	0x20003e04
 8004784:	20004404 	.word	0x20004404
 8004788:	20003c04 	.word	0x20003c04
				  case 1:
					  if (snake2_current_cell_value == 1){
 800478c:	4ba5      	ldr	r3, [pc, #660]	@ (8004a24 <main+0x2bac>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d129      	bne.n	80047e8 <main+0x2970>
						  if (snake2_orange_around == 1){
 8004794:	4ba4      	ldr	r3, [pc, #656]	@ (8004a28 <main+0x2bb0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d112      	bne.n	80047c2 <main+0x294a>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_eats_1, 1, 0);
 800479c:	4ba3      	ldr	r3, [pc, #652]	@ (8004a2c <main+0x2bb4>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	4ba2      	ldr	r3, [pc, #648]	@ (8004a30 <main+0x2bb8>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	2301      	movs	r3, #1
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	4b9f      	ldr	r3, [pc, #636]	@ (8004a34 <main+0x2bbc>)
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2310      	movs	r3, #16
 80047ba:	2210      	movs	r2, #16
 80047bc:	f7fc fefc 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_eats_0, 1, 0);
						  } else {
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_0, 1, 0);
						  }
					  }
					  break;
 80047c0:	e0ec      	b.n	800499c <main+0x2b24>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_1, 1, 0);
 80047c2:	4b9a      	ldr	r3, [pc, #616]	@ (8004a2c <main+0x2bb4>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	4b99      	ldr	r3, [pc, #612]	@ (8004a30 <main+0x2bb8>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	2300      	movs	r3, #0
 80047d4:	9302      	str	r3, [sp, #8]
 80047d6:	2301      	movs	r3, #1
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	4b97      	ldr	r3, [pc, #604]	@ (8004a38 <main+0x2bc0>)
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2310      	movs	r3, #16
 80047e0:	2210      	movs	r2, #16
 80047e2:	f7fc fee9 	bl	80015b8 <LCD_Bitmap>
					  break;
 80047e6:	e0d9      	b.n	800499c <main+0x2b24>
						  if (snake2_orange_around == 1){
 80047e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a28 <main+0x2bb0>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d112      	bne.n	8004816 <main+0x299e>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_eats_0, 1, 0);
 80047f0:	4b8e      	ldr	r3, [pc, #568]	@ (8004a2c <main+0x2bb4>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004a30 <main+0x2bb8>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	2300      	movs	r3, #0
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	2301      	movs	r3, #1
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	4b8c      	ldr	r3, [pc, #560]	@ (8004a3c <main+0x2bc4>)
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	2310      	movs	r3, #16
 800480e:	2210      	movs	r2, #16
 8004810:	f7fc fed2 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004814:	e0c2      	b.n	800499c <main+0x2b24>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_0, 1, 0);
 8004816:	4b85      	ldr	r3, [pc, #532]	@ (8004a2c <main+0x2bb4>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <main+0x2bb8>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	2300      	movs	r3, #0
 8004828:	9302      	str	r3, [sp, #8]
 800482a:	2301      	movs	r3, #1
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	4b84      	ldr	r3, [pc, #528]	@ (8004a40 <main+0x2bc8>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2310      	movs	r3, #16
 8004834:	2210      	movs	r2, #16
 8004836:	f7fc febf 	bl	80015b8 <LCD_Bitmap>
					  break;
 800483a:	e0af      	b.n	800499c <main+0x2b24>
				  case 2:
					  if (snake2_current_cell_value == 1){
 800483c:	4b79      	ldr	r3, [pc, #484]	@ (8004a24 <main+0x2bac>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d129      	bne.n	8004898 <main+0x2a20>
						  if (snake2_orange_around == 1){
 8004844:	4b78      	ldr	r3, [pc, #480]	@ (8004a28 <main+0x2bb0>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d112      	bne.n	8004872 <main+0x29fa>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_eats_1, 0, 1);
 800484c:	4b77      	ldr	r3, [pc, #476]	@ (8004a2c <main+0x2bb4>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <main+0x2bb8>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	2301      	movs	r3, #1
 800485e:	9302      	str	r3, [sp, #8]
 8004860:	2300      	movs	r3, #0
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	4b77      	ldr	r3, [pc, #476]	@ (8004a44 <main+0x2bcc>)
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2310      	movs	r3, #16
 800486a:	2210      	movs	r2, #16
 800486c:	f7fc fea4 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_eats_0, 0, 1);
						  } else {
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_0, 0, 1);
						  }
					  }
					  break;
 8004870:	e094      	b.n	800499c <main+0x2b24>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_1, 0, 1);
 8004872:	4b6e      	ldr	r3, [pc, #440]	@ (8004a2c <main+0x2bb4>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a30 <main+0x2bb8>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	2301      	movs	r3, #1
 8004884:	9302      	str	r3, [sp, #8]
 8004886:	2300      	movs	r3, #0
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a48 <main+0x2bd0>)
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2310      	movs	r3, #16
 8004890:	2210      	movs	r2, #16
 8004892:	f7fc fe91 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004896:	e081      	b.n	800499c <main+0x2b24>
						  if (snake2_orange_around == 1){
 8004898:	4b63      	ldr	r3, [pc, #396]	@ (8004a28 <main+0x2bb0>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d112      	bne.n	80048c6 <main+0x2a4e>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_eats_0, 0, 1);
 80048a0:	4b62      	ldr	r3, [pc, #392]	@ (8004a2c <main+0x2bb4>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	4b61      	ldr	r3, [pc, #388]	@ (8004a30 <main+0x2bb8>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	2301      	movs	r3, #1
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	2300      	movs	r3, #0
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	4b64      	ldr	r3, [pc, #400]	@ (8004a4c <main+0x2bd4>)
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2310      	movs	r3, #16
 80048be:	2210      	movs	r2, #16
 80048c0:	f7fc fe7a 	bl	80015b8 <LCD_Bitmap>
					  break;
 80048c4:	e06a      	b.n	800499c <main+0x2b24>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_0, 0, 1);
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <main+0x2bb4>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	4618      	mov	r0, r3
 80048ce:	4b58      	ldr	r3, [pc, #352]	@ (8004a30 <main+0x2bb8>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	2301      	movs	r3, #1
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	2300      	movs	r3, #0
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	4b5c      	ldr	r3, [pc, #368]	@ (8004a50 <main+0x2bd8>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2310      	movs	r3, #16
 80048e4:	2210      	movs	r2, #16
 80048e6:	f7fc fe67 	bl	80015b8 <LCD_Bitmap>
					  break;
 80048ea:	e057      	b.n	800499c <main+0x2b24>
				  case 3:
					  if (snake2_current_cell_value == 1){
 80048ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004a24 <main+0x2bac>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d129      	bne.n	8004948 <main+0x2ad0>
						  if (snake2_orange_around == 1){
 80048f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004a28 <main+0x2bb0>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d112      	bne.n	8004922 <main+0x2aaa>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_eats_1, 0, 0);
 80048fc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <main+0x2bb4>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	4b4a      	ldr	r3, [pc, #296]	@ (8004a30 <main+0x2bb8>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	2300      	movs	r3, #0
 800490e:	9302      	str	r3, [sp, #8]
 8004910:	2300      	movs	r3, #0
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <main+0x2bcc>)
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2310      	movs	r3, #16
 800491a:	2210      	movs	r2, #16
 800491c:	f7fc fe4c 	bl	80015b8 <LCD_Bitmap>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_eats_0, 0, 0);
						  } else {
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_0, 0, 0);
						  }
					  }
					  break;
 8004920:	e03b      	b.n	800499a <main+0x2b22>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_1, 0, 0);
 8004922:	4b42      	ldr	r3, [pc, #264]	@ (8004a2c <main+0x2bb4>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <main+0x2bb8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	2300      	movs	r3, #0
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	2300      	movs	r3, #0
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	4b43      	ldr	r3, [pc, #268]	@ (8004a48 <main+0x2bd0>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2310      	movs	r3, #16
 8004940:	2210      	movs	r2, #16
 8004942:	f7fc fe39 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004946:	e028      	b.n	800499a <main+0x2b22>
						  if (snake2_orange_around == 1){
 8004948:	4b37      	ldr	r3, [pc, #220]	@ (8004a28 <main+0x2bb0>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d112      	bne.n	8004976 <main+0x2afe>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_eats_0, 0, 0);
 8004950:	4b36      	ldr	r3, [pc, #216]	@ (8004a2c <main+0x2bb4>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	4b35      	ldr	r3, [pc, #212]	@ (8004a30 <main+0x2bb8>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	2300      	movs	r3, #0
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	2300      	movs	r3, #0
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	4b38      	ldr	r3, [pc, #224]	@ (8004a4c <main+0x2bd4>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2310      	movs	r3, #16
 800496e:	2210      	movs	r2, #16
 8004970:	f7fc fe22 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004974:	e011      	b.n	800499a <main+0x2b22>
							  LCD_Bitmap(snake2_next_x*SQ_SIZE, snake2_next_y*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_0, 0, 0);
 8004976:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <main+0x2bb4>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <main+0x2bb8>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	2300      	movs	r3, #0
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	2300      	movs	r3, #0
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <main+0x2bd8>)
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2310      	movs	r3, #16
 8004994:	2210      	movs	r2, #16
 8004996:	f7fc fe0f 	bl	80015b8 <LCD_Bitmap>
					  break;
 800499a:	bf00      	nop
				  }
				  //PINTAR CUERPO SIGUIENTE A LA CABEZA
				  snake2_current_cell_value = map[snake2[1][1]][snake2[1][0]] % 2;
 800499c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <main+0x2bdc>)
 800499e:	791b      	ldrb	r3, [r3, #4]
 80049a0:	4619      	mov	r1, r3
 80049a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a54 <main+0x2bdc>)
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	4618      	mov	r0, r3
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <main+0x2be0>)
 80049aa:	460b      	mov	r3, r1
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	4403      	add	r3, r0
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <main+0x2bac>)
 80049c0:	701a      	strb	r2, [r3, #0]
				  switch (snake2[1][2]){
 80049c2:	4b24      	ldr	r3, [pc, #144]	@ (8004a54 <main+0x2bdc>)
 80049c4:	795b      	ldrb	r3, [r3, #5]
 80049c6:	2b07      	cmp	r3, #7
 80049c8:	f200 8193 	bhi.w	8004cf2 <main+0x2e7a>
 80049cc:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <main+0x2b5c>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	08004a87 	.word	0x08004a87
 80049dc:	08004adb 	.word	0x08004adb
 80049e0:	08004b2f 	.word	0x08004b2f
 80049e4:	08004b83 	.word	0x08004b83
 80049e8:	08004bd7 	.word	0x08004bd7
 80049ec:	08004c2b 	.word	0x08004c2b
 80049f0:	08004c7f 	.word	0x08004c7f
				  case 0:
					  if (snake2_current_cell_value == 1){
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <main+0x2bac>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d131      	bne.n	8004a60 <main+0x2be8>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_1, 0, 0);
 80049fc:	4b15      	ldr	r3, [pc, #84]	@ (8004a54 <main+0x2bdc>)
 80049fe:	78db      	ldrb	r3, [r3, #3]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <main+0x2bdc>)
 8004a06:	791b      	ldrb	r3, [r3, #4]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9302      	str	r3, [sp, #8]
 8004a10:	2300      	movs	r3, #0
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <main+0x2be4>)
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	2310      	movs	r3, #16
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	f7fc fdcc 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_0, 0, 0);
					  }
					  break;
 8004a20:	e167      	b.n	8004cf2 <main+0x2e7a>
 8004a22:	bf00      	nop
 8004a24:	2000980c 	.word	0x2000980c
 8004a28:	2000980d 	.word	0x2000980d
 8004a2c:	20009807 	.word	0x20009807
 8004a30:	20009808 	.word	0x20009808
 8004a34:	20004604 	.word	0x20004604
 8004a38:	20003e04 	.word	0x20003e04
 8004a3c:	20004404 	.word	0x20004404
 8004a40:	20003c04 	.word	0x20003c04
 8004a44:	20003a04 	.word	0x20003a04
 8004a48:	20003204 	.word	0x20003204
 8004a4c:	20003804 	.word	0x20003804
 8004a50:	20003004 	.word	0x20003004
 8004a54:	200096d4 	.word	0x200096d4
 8004a58:	2000944c 	.word	0x2000944c
 8004a5c:	20000e04 	.word	0x20000e04
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_0, 0, 0);
 8004a60:	4b92      	ldr	r3, [pc, #584]	@ (8004cac <main+0x2e34>)
 8004a62:	78db      	ldrb	r3, [r3, #3]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4618      	mov	r0, r3
 8004a68:	4b90      	ldr	r3, [pc, #576]	@ (8004cac <main+0x2e34>)
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	9302      	str	r3, [sp, #8]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	4b8d      	ldr	r3, [pc, #564]	@ (8004cb0 <main+0x2e38>)
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	2210      	movs	r2, #16
 8004a80:	f7fc fd9a 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004a84:	e135      	b.n	8004cf2 <main+0x2e7a>
				  case 1:
					  if (snake2_current_cell_value == 1){
 8004a86:	4b8b      	ldr	r3, [pc, #556]	@ (8004cb4 <main+0x2e3c>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d112      	bne.n	8004ab4 <main+0x2c3c>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_1, 0, 0);
 8004a8e:	4b87      	ldr	r3, [pc, #540]	@ (8004cac <main+0x2e34>)
 8004a90:	78db      	ldrb	r3, [r3, #3]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <main+0x2e34>)
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9302      	str	r3, [sp, #8]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	4b84      	ldr	r3, [pc, #528]	@ (8004cb8 <main+0x2e40>)
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	2310      	movs	r3, #16
 8004aac:	2210      	movs	r2, #16
 8004aae:	f7fc fd83 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_0, 0, 0);
					  }
					  break;
 8004ab2:	e11e      	b.n	8004cf2 <main+0x2e7a>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_up_0, 0, 0);
 8004ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8004cac <main+0x2e34>)
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	4b7b      	ldr	r3, [pc, #492]	@ (8004cac <main+0x2e34>)
 8004abe:	791b      	ldrb	r3, [r3, #4]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9302      	str	r3, [sp, #8]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	4b78      	ldr	r3, [pc, #480]	@ (8004cb0 <main+0x2e38>)
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	f7fc fd70 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004ad8:	e10b      	b.n	8004cf2 <main+0x2e7a>
				  case 2:
					  if (snake2_current_cell_value == 1){
 8004ada:	4b76      	ldr	r3, [pc, #472]	@ (8004cb4 <main+0x2e3c>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d112      	bne.n	8004b08 <main+0x2c90>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_right_1, 0, 0);
 8004ae2:	4b72      	ldr	r3, [pc, #456]	@ (8004cac <main+0x2e34>)
 8004ae4:	78db      	ldrb	r3, [r3, #3]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4b70      	ldr	r3, [pc, #448]	@ (8004cac <main+0x2e34>)
 8004aec:	791b      	ldrb	r3, [r3, #4]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	9302      	str	r3, [sp, #8]
 8004af6:	2300      	movs	r3, #0
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	4b70      	ldr	r3, [pc, #448]	@ (8004cbc <main+0x2e44>)
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2310      	movs	r3, #16
 8004b00:	2210      	movs	r2, #16
 8004b02:	f7fc fd59 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_right_0, 0, 0);
					  }
					  break;
 8004b06:	e0f4      	b.n	8004cf2 <main+0x2e7a>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_right_0, 0, 0);
 8004b08:	4b68      	ldr	r3, [pc, #416]	@ (8004cac <main+0x2e34>)
 8004b0a:	78db      	ldrb	r3, [r3, #3]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4b66      	ldr	r3, [pc, #408]	@ (8004cac <main+0x2e34>)
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	4b67      	ldr	r3, [pc, #412]	@ (8004cc0 <main+0x2e48>)
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	2310      	movs	r3, #16
 8004b26:	2210      	movs	r2, #16
 8004b28:	f7fc fd46 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004b2c:	e0e1      	b.n	8004cf2 <main+0x2e7a>
				  case 3:
					  if (snake2_current_cell_value == 1){
 8004b2e:	4b61      	ldr	r3, [pc, #388]	@ (8004cb4 <main+0x2e3c>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d112      	bne.n	8004b5c <main+0x2ce4>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_right_1, 0, 0);
 8004b36:	4b5d      	ldr	r3, [pc, #372]	@ (8004cac <main+0x2e34>)
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <main+0x2e34>)
 8004b40:	791b      	ldrb	r3, [r3, #4]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cbc <main+0x2e44>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2310      	movs	r3, #16
 8004b54:	2210      	movs	r2, #16
 8004b56:	f7fc fd2f 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_right_0, 0, 0);
					  }
					  break;
 8004b5a:	e0ca      	b.n	8004cf2 <main+0x2e7a>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, body_snake2_right_0, 0, 0);
 8004b5c:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <main+0x2e34>)
 8004b5e:	78db      	ldrb	r3, [r3, #3]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	4b51      	ldr	r3, [pc, #324]	@ (8004cac <main+0x2e34>)
 8004b66:	791b      	ldrb	r3, [r3, #4]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2300      	movs	r3, #0
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	4b52      	ldr	r3, [pc, #328]	@ (8004cc0 <main+0x2e48>)
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	2310      	movs	r3, #16
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	f7fc fd1c 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004b80:	e0b7      	b.n	8004cf2 <main+0x2e7a>
				  case 4:
					  if (snake2_current_cell_value == 1){
 8004b82:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb4 <main+0x2e3c>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d112      	bne.n	8004bb0 <main+0x2d38>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_1, 1, 1);
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <main+0x2e34>)
 8004b8c:	78db      	ldrb	r3, [r3, #3]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	4b46      	ldr	r3, [pc, #280]	@ (8004cac <main+0x2e34>)
 8004b94:	791b      	ldrb	r3, [r3, #4]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	9302      	str	r3, [sp, #8]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	4b48      	ldr	r3, [pc, #288]	@ (8004cc4 <main+0x2e4c>)
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	2210      	movs	r2, #16
 8004baa:	f7fc fd05 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 1, 1);
					  }
					  break;
 8004bae:	e0a0      	b.n	8004cf2 <main+0x2e7a>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 1, 1);
 8004bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <main+0x2e34>)
 8004bb2:	78db      	ldrb	r3, [r3, #3]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cac <main+0x2e34>)
 8004bba:	791b      	ldrb	r3, [r3, #4]
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	9302      	str	r3, [sp, #8]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc8 <main+0x2e50>)
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2310      	movs	r3, #16
 8004bce:	2210      	movs	r2, #16
 8004bd0:	f7fc fcf2 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004bd4:	e08d      	b.n	8004cf2 <main+0x2e7a>
				  case 5:
					  if (snake2_current_cell_value == 1){
 8004bd6:	4b37      	ldr	r3, [pc, #220]	@ (8004cb4 <main+0x2e3c>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d112      	bne.n	8004c04 <main+0x2d8c>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_1, 1, 0);
 8004bde:	4b33      	ldr	r3, [pc, #204]	@ (8004cac <main+0x2e34>)
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4618      	mov	r0, r3
 8004be6:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <main+0x2e34>)
 8004be8:	791b      	ldrb	r3, [r3, #4]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9302      	str	r3, [sp, #8]
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	4b33      	ldr	r3, [pc, #204]	@ (8004cc4 <main+0x2e4c>)
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2310      	movs	r3, #16
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	f7fc fcdb 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 1, 0);
					  }
					  break;
 8004c02:	e076      	b.n	8004cf2 <main+0x2e7a>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 1, 0);
 8004c04:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <main+0x2e34>)
 8004c06:	78db      	ldrb	r3, [r3, #3]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <main+0x2e34>)
 8004c0e:	791b      	ldrb	r3, [r3, #4]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	9302      	str	r3, [sp, #8]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc8 <main+0x2e50>)
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2310      	movs	r3, #16
 8004c22:	2210      	movs	r2, #16
 8004c24:	f7fc fcc8 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004c28:	e063      	b.n	8004cf2 <main+0x2e7a>
				  case 6:
					  if (snake2_current_cell_value == 1){
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <main+0x2e3c>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d112      	bne.n	8004c58 <main+0x2de0>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_1, 0, 1);
 8004c32:	4b1e      	ldr	r3, [pc, #120]	@ (8004cac <main+0x2e34>)
 8004c34:	78db      	ldrb	r3, [r3, #3]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <main+0x2e34>)
 8004c3c:	791b      	ldrb	r3, [r3, #4]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	2301      	movs	r3, #1
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <main+0x2e4c>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	2310      	movs	r3, #16
 8004c50:	2210      	movs	r2, #16
 8004c52:	f7fc fcb1 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 0, 1);
					  }
					  break;
 8004c56:	e04c      	b.n	8004cf2 <main+0x2e7a>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 0, 1);
 8004c58:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <main+0x2e34>)
 8004c5a:	78db      	ldrb	r3, [r3, #3]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4618      	mov	r0, r3
 8004c60:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <main+0x2e34>)
 8004c62:	791b      	ldrb	r3, [r3, #4]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	2301      	movs	r3, #1
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <main+0x2e50>)
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2310      	movs	r3, #16
 8004c76:	2210      	movs	r2, #16
 8004c78:	f7fc fc9e 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004c7c:	e039      	b.n	8004cf2 <main+0x2e7a>
				  case 7:
					  if (snake2_current_cell_value == 1){
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <main+0x2e3c>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d122      	bne.n	8004ccc <main+0x2e54>
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_1, 0, 0);
 8004c86:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <main+0x2e34>)
 8004c88:	78db      	ldrb	r3, [r3, #3]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <main+0x2e34>)
 8004c90:	791b      	ldrb	r3, [r3, #4]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <main+0x2e4c>)
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	f7fc fc87 	bl	80015b8 <LCD_Bitmap>
					  } else {
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 0, 0);
					  }
					  break;
 8004caa:	e021      	b.n	8004cf0 <main+0x2e78>
 8004cac:	200096d4 	.word	0x200096d4
 8004cb0:	20000c04 	.word	0x20000c04
 8004cb4:	2000980c 	.word	0x2000980c
 8004cb8:	20000e04 	.word	0x20000e04
 8004cbc:	20000a04 	.word	0x20000a04
 8004cc0:	20000804 	.word	0x20000804
 8004cc4:	20001604 	.word	0x20001604
 8004cc8:	20001404 	.word	0x20001404
						  LCD_Bitmap(snake2[1][0]*SQ_SIZE, snake2[1][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_0, 0, 0);
 8004ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8004f44 <main+0x30cc>)
 8004cce:	78db      	ldrb	r3, [r3, #3]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4b9b      	ldr	r3, [pc, #620]	@ (8004f44 <main+0x30cc>)
 8004cd6:	791b      	ldrb	r3, [r3, #4]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9302      	str	r3, [sp, #8]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	4b98      	ldr	r3, [pc, #608]	@ (8004f48 <main+0x30d0>)
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2310      	movs	r3, #16
 8004cea:	2210      	movs	r2, #16
 8004cec:	f7fc fc64 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004cf0:	bf00      	nop
				  }
			  }

			  // DEFINIR JUEGO PERDIDO
			  if (snake1_lost || snake2_lost){
 8004cf2:	4b96      	ldr	r3, [pc, #600]	@ (8004f4c <main+0x30d4>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <main+0x2e8a>
 8004cfa:	4b95      	ldr	r3, [pc, #596]	@ (8004f50 <main+0x30d8>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <main+0x2ea0>
				  game_over = 1;
 8004d02:	4b94      	ldr	r3, [pc, #592]	@ (8004f54 <main+0x30dc>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
				  sonido = 'p';
 8004d08:	4b93      	ldr	r3, [pc, #588]	@ (8004f58 <main+0x30e0>)
 8004d0a:	2270      	movs	r2, #112	@ 0x70
 8004d0c:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4991      	ldr	r1, [pc, #580]	@ (8004f58 <main+0x30e0>)
 8004d12:	4892      	ldr	r0, [pc, #584]	@ (8004f5c <main+0x30e4>)
 8004d14:	f004 fa7c 	bl	8009210 <HAL_UART_Transmit_DMA>
			  }

		  }
		  if ((game_over == 1)&&(menu == 0)&&(stop_animations == 0)){
 8004d18:	4b8e      	ldr	r3, [pc, #568]	@ (8004f54 <main+0x30dc>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	f040 85ce 	bne.w	80058be <main+0x3a46>
 8004d22:	4b8f      	ldr	r3, [pc, #572]	@ (8004f60 <main+0x30e8>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 85c9 	bne.w	80058be <main+0x3a46>
 8004d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f64 <main+0x30ec>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 85c4 	bne.w	80058be <main+0x3a46>
			  stop_animations = 1;
 8004d36:	4b8b      	ldr	r3, [pc, #556]	@ (8004f64 <main+0x30ec>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
			  if (snake1_lost == 1){
 8004d3c:	4b83      	ldr	r3, [pc, #524]	@ (8004f4c <main+0x30d4>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 82dd 	bne.w	8005300 <main+0x3488>
				  /*for (int i = 0; i < len_snake1; i++){
					  FillRect(snake1[i][0]*SQ_SIZE, snake1[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0xFFE0);
				  }*/
				  snake1_current_cell_value = map[snake1[0][1]][snake1[0][0]] % 2;
 8004d46:	4b88      	ldr	r3, [pc, #544]	@ (8004f68 <main+0x30f0>)
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4b86      	ldr	r3, [pc, #536]	@ (8004f68 <main+0x30f0>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	4a86      	ldr	r2, [pc, #536]	@ (8004f6c <main+0x30f4>)
 8004d54:	460b      	mov	r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	4403      	add	r3, r0
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	4b81      	ldr	r3, [pc, #516]	@ (8004f70 <main+0x30f8>)
 8004d6a:	701a      	strb	r2, [r3, #0]
				  switch (dir_snake1){
 8004d6c:	4b81      	ldr	r3, [pc, #516]	@ (8004f74 <main+0x30fc>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	f200 82c5 	bhi.w	8005300 <main+0x3488>
 8004d76:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <main+0x2f04>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004ecf 	.word	0x08004ecf
 8004d84:	08005055 	.word	0x08005055
 8004d88:	08005197 	.word	0x08005197
				  case 0:
					  if ((snake1[0][0] - snake1[1][0] == 1)||(snake1[0][0] - snake1[1][0] == -(WIDTH-1))){
 8004d8c:	4b76      	ldr	r3, [pc, #472]	@ (8004f68 <main+0x30f0>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b75      	ldr	r3, [pc, #468]	@ (8004f68 <main+0x30f0>)
 8004d94:	78db      	ldrb	r3, [r3, #3]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d008      	beq.n	8004dae <main+0x2f36>
 8004d9c:	4b72      	ldr	r3, [pc, #456]	@ (8004f68 <main+0x30f0>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b71      	ldr	r3, [pc, #452]	@ (8004f68 <main+0x30f0>)
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f113 0f13 	cmn.w	r3, #19
 8004dac:	d129      	bne.n	8004e02 <main+0x2f8a>
						  if (snake1_current_cell_value == 1){
 8004dae:	4b70      	ldr	r3, [pc, #448]	@ (8004f70 <main+0x30f8>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d112      	bne.n	8004ddc <main+0x2f64>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_1, 1, 1);
 8004db6:	4b6c      	ldr	r3, [pc, #432]	@ (8004f68 <main+0x30f0>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <main+0x30f0>)
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	4b6a      	ldr	r3, [pc, #424]	@ (8004f78 <main+0x3100>)
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	f7fc fbef 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004dda:	e077      	b.n	8004ecc <main+0x3054>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_0, 1, 1);
 8004ddc:	4b62      	ldr	r3, [pc, #392]	@ (8004f68 <main+0x30f0>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	4b60      	ldr	r3, [pc, #384]	@ (8004f68 <main+0x30f0>)
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	4619      	mov	r1, r3
 8004dec:	2301      	movs	r3, #1
 8004dee:	9302      	str	r3, [sp, #8]
 8004df0:	2301      	movs	r3, #1
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	4b61      	ldr	r3, [pc, #388]	@ (8004f7c <main+0x3104>)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	2310      	movs	r3, #16
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	f7fc fbdc 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004e00:	e064      	b.n	8004ecc <main+0x3054>
						  }
					  } else if ((snake1[0][0] - snake1[1][0] == -1)||(snake1[0][0] - snake1[1][0] == (WIDTH-1))){
 8004e02:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <main+0x30f0>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b57      	ldr	r3, [pc, #348]	@ (8004f68 <main+0x30f0>)
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d007      	beq.n	8004e24 <main+0x2fac>
 8004e14:	4b54      	ldr	r3, [pc, #336]	@ (8004f68 <main+0x30f0>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <main+0x30f0>)
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b13      	cmp	r3, #19
 8004e22:	d129      	bne.n	8004e78 <main+0x3000>
						  if (snake1_current_cell_value == 1){
 8004e24:	4b52      	ldr	r3, [pc, #328]	@ (8004f70 <main+0x30f8>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d112      	bne.n	8004e52 <main+0x2fda>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_1, 1, 0);
 8004e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004f68 <main+0x30f0>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	4b4c      	ldr	r3, [pc, #304]	@ (8004f68 <main+0x30f0>)
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	2301      	movs	r3, #1
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	4b4c      	ldr	r3, [pc, #304]	@ (8004f78 <main+0x3100>)
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2310      	movs	r3, #16
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	f7fc fbb4 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004e50:	e03c      	b.n	8004ecc <main+0x3054>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_0, 1, 0);
 8004e52:	4b45      	ldr	r3, [pc, #276]	@ (8004f68 <main+0x30f0>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	4b43      	ldr	r3, [pc, #268]	@ (8004f68 <main+0x30f0>)
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	9302      	str	r3, [sp, #8]
 8004e66:	2301      	movs	r3, #1
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <main+0x3104>)
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2310      	movs	r3, #16
 8004e70:	2210      	movs	r2, #16
 8004e72:	f7fc fba1 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004e76:	e029      	b.n	8004ecc <main+0x3054>
						  }
					  } else {
						  if (snake1_current_cell_value == 1){
 8004e78:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <main+0x30f8>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d112      	bne.n	8004ea6 <main+0x302e>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_crash_1, 0, 0);
 8004e80:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <main+0x30f0>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	4b37      	ldr	r3, [pc, #220]	@ (8004f68 <main+0x30f0>)
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	9302      	str	r3, [sp, #8]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	4b39      	ldr	r3, [pc, #228]	@ (8004f80 <main+0x3108>)
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	2210      	movs	r2, #16
 8004ea0:	f7fc fb8a 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_crash_0, 0, 0);
						  }
					  }
					  break;
 8004ea4:	e22c      	b.n	8005300 <main+0x3488>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_crash_0, 0, 0);
 8004ea6:	4b30      	ldr	r3, [pc, #192]	@ (8004f68 <main+0x30f0>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	4618      	mov	r0, r3
 8004eae:	4b2e      	ldr	r3, [pc, #184]	@ (8004f68 <main+0x30f0>)
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9302      	str	r3, [sp, #8]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <main+0x310c>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	f7fc fb77 	bl	80015b8 <LCD_Bitmap>
					  break;
 8004eca:	e219      	b.n	8005300 <main+0x3488>
 8004ecc:	e218      	b.n	8005300 <main+0x3488>
				  case 1:
					  if ((snake1[0][0] - snake1[1][0] == 1)||(snake1[0][0] - snake1[1][0] == -(WIDTH-1))){
 8004ece:	4b26      	ldr	r3, [pc, #152]	@ (8004f68 <main+0x30f0>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <main+0x30f0>)
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d008      	beq.n	8004ef0 <main+0x3078>
 8004ede:	4b22      	ldr	r3, [pc, #136]	@ (8004f68 <main+0x30f0>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b20      	ldr	r3, [pc, #128]	@ (8004f68 <main+0x30f0>)
 8004ee6:	78db      	ldrb	r3, [r3, #3]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f113 0f13 	cmn.w	r3, #19
 8004eee:	d14b      	bne.n	8004f88 <main+0x3110>
						  if (snake1_current_cell_value == 1){
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f70 <main+0x30f8>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d112      	bne.n	8004f1e <main+0x30a6>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_1, 0, 1);
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <main+0x30f0>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	4b19      	ldr	r3, [pc, #100]	@ (8004f68 <main+0x30f0>)
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	2301      	movs	r3, #1
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	4b19      	ldr	r3, [pc, #100]	@ (8004f78 <main+0x3100>)
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2310      	movs	r3, #16
 8004f16:	2210      	movs	r2, #16
 8004f18:	f7fc fb4e 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004f1c:	e099      	b.n	8005052 <main+0x31da>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_0, 0, 1);
 8004f1e:	4b12      	ldr	r3, [pc, #72]	@ (8004f68 <main+0x30f0>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <main+0x30f0>)
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	2301      	movs	r3, #1
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <main+0x3104>)
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	f7fc fb3b 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004f42:	e086      	b.n	8005052 <main+0x31da>
 8004f44:	200096d4 	.word	0x200096d4
 8004f48:	20001404 	.word	0x20001404
 8004f4c:	200096c7 	.word	0x200096c7
 8004f50:	20009803 	.word	0x20009803
 8004f54:	20009578 	.word	0x20009578
 8004f58:	20009594 	.word	0x20009594
 8004f5c:	20008e30 	.word	0x20008e30
 8004f60:	2000957a 	.word	0x2000957a
 8004f64:	20009579 	.word	0x20009579
 8004f68:	20009598 	.word	0x20009598
 8004f6c:	2000944c 	.word	0x2000944c
 8004f70:	200096d0 	.word	0x200096d0
 8004f74:	200096c5 	.word	0x200096c5
 8004f78:	20005e04 	.word	0x20005e04
 8004f7c:	20005c04 	.word	0x20005c04
 8004f80:	20002a04 	.word	0x20002a04
 8004f84:	20002804 	.word	0x20002804
						  }
					  } else if ((snake1[0][0] - snake1[1][0] == -1)||(snake1[0][0] - snake1[1][0] == (WIDTH-1))){
 8004f88:	4ba0      	ldr	r3, [pc, #640]	@ (800520c <main+0x3394>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b9f      	ldr	r3, [pc, #636]	@ (800520c <main+0x3394>)
 8004f90:	78db      	ldrb	r3, [r3, #3]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d007      	beq.n	8004faa <main+0x3132>
 8004f9a:	4b9c      	ldr	r3, [pc, #624]	@ (800520c <main+0x3394>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4b9a      	ldr	r3, [pc, #616]	@ (800520c <main+0x3394>)
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b13      	cmp	r3, #19
 8004fa8:	d129      	bne.n	8004ffe <main+0x3186>
						  if (snake1_current_cell_value == 1){
 8004faa:	4b99      	ldr	r3, [pc, #612]	@ (8005210 <main+0x3398>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d112      	bne.n	8004fd8 <main+0x3160>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_1, 0, 0);
 8004fb2:	4b96      	ldr	r3, [pc, #600]	@ (800520c <main+0x3394>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	4b94      	ldr	r3, [pc, #592]	@ (800520c <main+0x3394>)
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	9302      	str	r3, [sp, #8]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	4b92      	ldr	r3, [pc, #584]	@ (8005214 <main+0x339c>)
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2310      	movs	r3, #16
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	f7fc faf1 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004fd6:	e03c      	b.n	8005052 <main+0x31da>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_right_bottom_crash_0, 0, 0);
 8004fd8:	4b8c      	ldr	r3, [pc, #560]	@ (800520c <main+0x3394>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4618      	mov	r0, r3
 8004fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800520c <main+0x3394>)
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	4b89      	ldr	r3, [pc, #548]	@ (8005218 <main+0x33a0>)
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	f7fc fade 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8004ffc:	e029      	b.n	8005052 <main+0x31da>
						  }
					  } else {
						  if (snake1_current_cell_value == 1){
 8004ffe:	4b84      	ldr	r3, [pc, #528]	@ (8005210 <main+0x3398>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d112      	bne.n	800502c <main+0x31b4>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_crash_1, 1, 0);
 8005006:	4b81      	ldr	r3, [pc, #516]	@ (800520c <main+0x3394>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	4618      	mov	r0, r3
 800500e:	4b7f      	ldr	r3, [pc, #508]	@ (800520c <main+0x3394>)
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	2300      	movs	r3, #0
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	2301      	movs	r3, #1
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	4b7f      	ldr	r3, [pc, #508]	@ (800521c <main+0x33a4>)
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2310      	movs	r3, #16
 8005024:	2210      	movs	r2, #16
 8005026:	f7fc fac7 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_crash_0, 1, 0);
						  }
					  }
					  break;
 800502a:	e169      	b.n	8005300 <main+0x3488>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_up_crash_0, 1, 0);
 800502c:	4b77      	ldr	r3, [pc, #476]	@ (800520c <main+0x3394>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	4b75      	ldr	r3, [pc, #468]	@ (800520c <main+0x3394>)
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	2300      	movs	r3, #0
 800503e:	9302      	str	r3, [sp, #8]
 8005040:	2301      	movs	r3, #1
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	4b76      	ldr	r3, [pc, #472]	@ (8005220 <main+0x33a8>)
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2310      	movs	r3, #16
 800504a:	2210      	movs	r2, #16
 800504c:	f7fc fab4 	bl	80015b8 <LCD_Bitmap>
					  break;
 8005050:	e156      	b.n	8005300 <main+0x3488>
 8005052:	e155      	b.n	8005300 <main+0x3488>
				  case 2:
					  if ((snake1[0][1] - snake1[1][1] == 1)||(snake1[0][1] - snake1[1][1] == -(HEIGHT-1))){
 8005054:	4b6d      	ldr	r3, [pc, #436]	@ (800520c <main+0x3394>)
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	461a      	mov	r2, r3
 800505a:	4b6c      	ldr	r3, [pc, #432]	@ (800520c <main+0x3394>)
 800505c:	791b      	ldrb	r3, [r3, #4]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d008      	beq.n	8005076 <main+0x31fe>
 8005064:	4b69      	ldr	r3, [pc, #420]	@ (800520c <main+0x3394>)
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	461a      	mov	r2, r3
 800506a:	4b68      	ldr	r3, [pc, #416]	@ (800520c <main+0x3394>)
 800506c:	791b      	ldrb	r3, [r3, #4]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f113 0f0e 	cmn.w	r3, #14
 8005074:	d129      	bne.n	80050ca <main+0x3252>
						  if (snake1_current_cell_value == 1){
 8005076:	4b66      	ldr	r3, [pc, #408]	@ (8005210 <main+0x3398>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d112      	bne.n	80050a4 <main+0x322c>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_1, 0, 1);
 800507e:	4b63      	ldr	r3, [pc, #396]	@ (800520c <main+0x3394>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	4618      	mov	r0, r3
 8005086:	4b61      	ldr	r3, [pc, #388]	@ (800520c <main+0x3394>)
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	2301      	movs	r3, #1
 8005090:	9302      	str	r3, [sp, #8]
 8005092:	2300      	movs	r3, #0
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	4b63      	ldr	r3, [pc, #396]	@ (8005224 <main+0x33ac>)
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	2310      	movs	r3, #16
 800509c:	2210      	movs	r2, #16
 800509e:	f7fc fa8b 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 80050a2:	e077      	b.n	8005194 <main+0x331c>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_0, 0, 1);
 80050a4:	4b59      	ldr	r3, [pc, #356]	@ (800520c <main+0x3394>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	4b57      	ldr	r3, [pc, #348]	@ (800520c <main+0x3394>)
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	2301      	movs	r3, #1
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	2300      	movs	r3, #0
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005228 <main+0x33b0>)
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	2310      	movs	r3, #16
 80050c2:	2210      	movs	r2, #16
 80050c4:	f7fc fa78 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 80050c8:	e064      	b.n	8005194 <main+0x331c>
						  }
					  } else if ((snake1[0][1] - snake1[1][1] == -1)||(snake1[0][1] - snake1[1][1] == (HEIGHT-1))){
 80050ca:	4b50      	ldr	r3, [pc, #320]	@ (800520c <main+0x3394>)
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	461a      	mov	r2, r3
 80050d0:	4b4e      	ldr	r3, [pc, #312]	@ (800520c <main+0x3394>)
 80050d2:	791b      	ldrb	r3, [r3, #4]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d007      	beq.n	80050ec <main+0x3274>
 80050dc:	4b4b      	ldr	r3, [pc, #300]	@ (800520c <main+0x3394>)
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <main+0x3394>)
 80050e4:	791b      	ldrb	r3, [r3, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b0e      	cmp	r3, #14
 80050ea:	d129      	bne.n	8005140 <main+0x32c8>
						  if (snake1_current_cell_value == 1){
 80050ec:	4b48      	ldr	r3, [pc, #288]	@ (8005210 <main+0x3398>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d112      	bne.n	800511a <main+0x32a2>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_1, 1, 1);
 80050f4:	4b45      	ldr	r3, [pc, #276]	@ (800520c <main+0x3394>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	4b43      	ldr	r3, [pc, #268]	@ (800520c <main+0x3394>)
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	2301      	movs	r3, #1
 8005106:	9302      	str	r3, [sp, #8]
 8005108:	2301      	movs	r3, #1
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	4b45      	ldr	r3, [pc, #276]	@ (8005224 <main+0x33ac>)
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2310      	movs	r3, #16
 8005112:	2210      	movs	r2, #16
 8005114:	f7fc fa50 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8005118:	e03c      	b.n	8005194 <main+0x331c>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_0, 1, 1);
 800511a:	4b3c      	ldr	r3, [pc, #240]	@ (800520c <main+0x3394>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	4b3a      	ldr	r3, [pc, #232]	@ (800520c <main+0x3394>)
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	2301      	movs	r3, #1
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	2301      	movs	r3, #1
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	4b3d      	ldr	r3, [pc, #244]	@ (8005228 <main+0x33b0>)
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2310      	movs	r3, #16
 8005138:	2210      	movs	r2, #16
 800513a:	f7fc fa3d 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 800513e:	e029      	b.n	8005194 <main+0x331c>
						  }
					  } else {
						  if (snake1_current_cell_value == 1){
 8005140:	4b33      	ldr	r3, [pc, #204]	@ (8005210 <main+0x3398>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d112      	bne.n	800516e <main+0x32f6>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_crash_1, 0, 1);
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <main+0x3394>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	4618      	mov	r0, r3
 8005150:	4b2e      	ldr	r3, [pc, #184]	@ (800520c <main+0x3394>)
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	2301      	movs	r3, #1
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	2300      	movs	r3, #0
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	4b32      	ldr	r3, [pc, #200]	@ (800522c <main+0x33b4>)
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2310      	movs	r3, #16
 8005166:	2210      	movs	r2, #16
 8005168:	f7fc fa26 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_crash_0, 0, 1);
						  }
					  }
					  break;
 800516c:	e0c8      	b.n	8005300 <main+0x3488>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_crash_0, 0, 1);
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <main+0x3394>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	4b25      	ldr	r3, [pc, #148]	@ (800520c <main+0x3394>)
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	2301      	movs	r3, #1
 8005180:	9302      	str	r3, [sp, #8]
 8005182:	2300      	movs	r3, #0
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	4b2a      	ldr	r3, [pc, #168]	@ (8005230 <main+0x33b8>)
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2310      	movs	r3, #16
 800518c:	2210      	movs	r2, #16
 800518e:	f7fc fa13 	bl	80015b8 <LCD_Bitmap>
					  break;
 8005192:	e0b5      	b.n	8005300 <main+0x3488>
 8005194:	e0b4      	b.n	8005300 <main+0x3488>
				  case 3:
					  if ((snake1[0][1] - snake1[1][1] == 1)||(snake1[0][1] - snake1[1][1] == -(HEIGHT-1))){
 8005196:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <main+0x3394>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	461a      	mov	r2, r3
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <main+0x3394>)
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d008      	beq.n	80051b8 <main+0x3340>
 80051a6:	4b19      	ldr	r3, [pc, #100]	@ (800520c <main+0x3394>)
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b17      	ldr	r3, [pc, #92]	@ (800520c <main+0x3394>)
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f113 0f0e 	cmn.w	r3, #14
 80051b6:	d13d      	bne.n	8005234 <main+0x33bc>
						  if (snake1_current_cell_value == 1){
 80051b8:	4b15      	ldr	r3, [pc, #84]	@ (8005210 <main+0x3398>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d112      	bne.n	80051e6 <main+0x336e>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_1, 0, 0);
 80051c0:	4b12      	ldr	r3, [pc, #72]	@ (800520c <main+0x3394>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	4b10      	ldr	r3, [pc, #64]	@ (800520c <main+0x3394>)
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	9302      	str	r3, [sp, #8]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	4b12      	ldr	r3, [pc, #72]	@ (8005224 <main+0x33ac>)
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	2310      	movs	r3, #16
 80051de:	2210      	movs	r2, #16
 80051e0:	f7fc f9ea 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 80051e4:	e08b      	b.n	80052fe <main+0x3486>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_0, 0, 0);
 80051e6:	4b09      	ldr	r3, [pc, #36]	@ (800520c <main+0x3394>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	4b07      	ldr	r3, [pc, #28]	@ (800520c <main+0x3394>)
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	9302      	str	r3, [sp, #8]
 80051fa:	2300      	movs	r3, #0
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <main+0x33b0>)
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	2310      	movs	r3, #16
 8005204:	2210      	movs	r2, #16
 8005206:	f7fc f9d7 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 800520a:	e078      	b.n	80052fe <main+0x3486>
 800520c:	20009598 	.word	0x20009598
 8005210:	200096d0 	.word	0x200096d0
 8005214:	20005e04 	.word	0x20005e04
 8005218:	20005c04 	.word	0x20005c04
 800521c:	20002a04 	.word	0x20002a04
 8005220:	20002804 	.word	0x20002804
 8005224:	20006204 	.word	0x20006204
 8005228:	20006004 	.word	0x20006004
 800522c:	20001e04 	.word	0x20001e04
 8005230:	20001c04 	.word	0x20001c04
						  }
					  } else if ((snake1[0][1] - snake1[1][1] == -1)||(snake1[0][1] - snake1[1][1] == (HEIGHT-1))){
 8005234:	4b97      	ldr	r3, [pc, #604]	@ (8005494 <main+0x361c>)
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	461a      	mov	r2, r3
 800523a:	4b96      	ldr	r3, [pc, #600]	@ (8005494 <main+0x361c>)
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d007      	beq.n	8005256 <main+0x33de>
 8005246:	4b93      	ldr	r3, [pc, #588]	@ (8005494 <main+0x361c>)
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	461a      	mov	r2, r3
 800524c:	4b91      	ldr	r3, [pc, #580]	@ (8005494 <main+0x361c>)
 800524e:	791b      	ldrb	r3, [r3, #4]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b0e      	cmp	r3, #14
 8005254:	d129      	bne.n	80052aa <main+0x3432>
						  if (snake1_current_cell_value == 1){
 8005256:	4b90      	ldr	r3, [pc, #576]	@ (8005498 <main+0x3620>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d112      	bne.n	8005284 <main+0x340c>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_1, 1, 0);
 800525e:	4b8d      	ldr	r3, [pc, #564]	@ (8005494 <main+0x361c>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	4618      	mov	r0, r3
 8005266:	4b8b      	ldr	r3, [pc, #556]	@ (8005494 <main+0x361c>)
 8005268:	785b      	ldrb	r3, [r3, #1]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	4619      	mov	r1, r3
 800526e:	2300      	movs	r3, #0
 8005270:	9302      	str	r3, [sp, #8]
 8005272:	2301      	movs	r3, #1
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	4b89      	ldr	r3, [pc, #548]	@ (800549c <main+0x3624>)
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2310      	movs	r3, #16
 800527c:	2210      	movs	r2, #16
 800527e:	f7fc f99b 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 8005282:	e03c      	b.n	80052fe <main+0x3486>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake1_top_right_crash_0, 1, 0);
 8005284:	4b83      	ldr	r3, [pc, #524]	@ (8005494 <main+0x361c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	4618      	mov	r0, r3
 800528c:	4b81      	ldr	r3, [pc, #516]	@ (8005494 <main+0x361c>)
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	2300      	movs	r3, #0
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	2301      	movs	r3, #1
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	4b80      	ldr	r3, [pc, #512]	@ (80054a0 <main+0x3628>)
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	2310      	movs	r3, #16
 80052a2:	2210      	movs	r2, #16
 80052a4:	f7fc f988 	bl	80015b8 <LCD_Bitmap>
						  if (snake1_current_cell_value == 1){
 80052a8:	e029      	b.n	80052fe <main+0x3486>
						  }
					  } else {
						  if (snake1_current_cell_value == 1){
 80052aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005498 <main+0x3620>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d112      	bne.n	80052d8 <main+0x3460>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_crash_1, 0, 0);
 80052b2:	4b78      	ldr	r3, [pc, #480]	@ (8005494 <main+0x361c>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	4618      	mov	r0, r3
 80052ba:	4b76      	ldr	r3, [pc, #472]	@ (8005494 <main+0x361c>)
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	9302      	str	r3, [sp, #8]
 80052c6:	2300      	movs	r3, #0
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	4b76      	ldr	r3, [pc, #472]	@ (80054a4 <main+0x362c>)
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2310      	movs	r3, #16
 80052d0:	2210      	movs	r2, #16
 80052d2:	f7fc f971 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_crash_0, 0, 0);
						  }
					  }
					  break;
 80052d6:	e012      	b.n	80052fe <main+0x3486>
							  LCD_Bitmap(snake1[0][0]*SQ_SIZE, snake1[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake1_right_crash_0, 0, 0);
 80052d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005494 <main+0x361c>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	4618      	mov	r0, r3
 80052e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005494 <main+0x361c>)
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	2300      	movs	r3, #0
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	2300      	movs	r3, #0
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	4b6d      	ldr	r3, [pc, #436]	@ (80054a8 <main+0x3630>)
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	2310      	movs	r3, #16
 80052f6:	2210      	movs	r2, #16
 80052f8:	f7fc f95e 	bl	80015b8 <LCD_Bitmap>
					  break;
 80052fc:	e7ff      	b.n	80052fe <main+0x3486>
 80052fe:	bf00      	nop
				  }
			  }
			  if (snake2_lost == 1){
 8005300:	4b6a      	ldr	r3, [pc, #424]	@ (80054ac <main+0x3634>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	f040 82da 	bne.w	80058be <main+0x3a46>
				  /*for (int i = 0; i < len_snake2; i++){
					  FillRect(snake2[i][0]*SQ_SIZE, snake2[i][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, 0xFFE0);
				  }*/
				  snake2_current_cell_value = map[snake2[0][1]][snake2[0][0]] % 2;
 800530a:	4b69      	ldr	r3, [pc, #420]	@ (80054b0 <main+0x3638>)
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	4619      	mov	r1, r3
 8005310:	4b67      	ldr	r3, [pc, #412]	@ (80054b0 <main+0x3638>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	4a67      	ldr	r2, [pc, #412]	@ (80054b4 <main+0x363c>)
 8005318:	460b      	mov	r3, r1
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	4403      	add	r3, r0
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	4b62      	ldr	r3, [pc, #392]	@ (80054b8 <main+0x3640>)
 800532e:	701a      	strb	r2, [r3, #0]
				  switch (dir_snake2){
 8005330:	4b62      	ldr	r3, [pc, #392]	@ (80054bc <main+0x3644>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b03      	cmp	r3, #3
 8005336:	f200 82c2 	bhi.w	80058be <main+0x3a46>
 800533a:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <main+0x34c8>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005351 	.word	0x08005351
 8005344:	080054d1 	.word	0x080054d1
 8005348:	08005613 	.word	0x08005613
 800534c:	0800577d 	.word	0x0800577d
				  case 0:
					  if ((snake2[0][0] - snake2[1][0] == 1)||(snake2[0][0] - snake2[1][0] == -(WIDTH-1))){
 8005350:	4b57      	ldr	r3, [pc, #348]	@ (80054b0 <main+0x3638>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	4b56      	ldr	r3, [pc, #344]	@ (80054b0 <main+0x3638>)
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d008      	beq.n	8005372 <main+0x34fa>
 8005360:	4b53      	ldr	r3, [pc, #332]	@ (80054b0 <main+0x3638>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	4b52      	ldr	r3, [pc, #328]	@ (80054b0 <main+0x3638>)
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f113 0f13 	cmn.w	r3, #19
 8005370:	d129      	bne.n	80053c6 <main+0x354e>
						  if (snake2_current_cell_value == 1){
 8005372:	4b51      	ldr	r3, [pc, #324]	@ (80054b8 <main+0x3640>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d112      	bne.n	80053a0 <main+0x3528>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_1, 1, 1);
 800537a:	4b4d      	ldr	r3, [pc, #308]	@ (80054b0 <main+0x3638>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	4618      	mov	r0, r3
 8005382:	4b4b      	ldr	r3, [pc, #300]	@ (80054b0 <main+0x3638>)
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	2301      	movs	r3, #1
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	2301      	movs	r3, #1
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	4b4b      	ldr	r3, [pc, #300]	@ (80054c0 <main+0x3648>)
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	2310      	movs	r3, #16
 8005398:	2210      	movs	r2, #16
 800539a:	f7fc f90d 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 800539e:	e077      	b.n	8005490 <main+0x3618>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_0, 1, 1);
 80053a0:	4b43      	ldr	r3, [pc, #268]	@ (80054b0 <main+0x3638>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	4b41      	ldr	r3, [pc, #260]	@ (80054b0 <main+0x3638>)
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	2301      	movs	r3, #1
 80053b2:	9302      	str	r3, [sp, #8]
 80053b4:	2301      	movs	r3, #1
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	4b42      	ldr	r3, [pc, #264]	@ (80054c4 <main+0x364c>)
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2310      	movs	r3, #16
 80053be:	2210      	movs	r2, #16
 80053c0:	f7fc f8fa 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 80053c4:	e064      	b.n	8005490 <main+0x3618>
						  }
					  } else if ((snake2[0][0] - snake2[1][0] == -1)||(snake2[0][0] - snake2[1][0] == (WIDTH-1))){
 80053c6:	4b3a      	ldr	r3, [pc, #232]	@ (80054b0 <main+0x3638>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	4b38      	ldr	r3, [pc, #224]	@ (80054b0 <main+0x3638>)
 80053ce:	78db      	ldrb	r3, [r3, #3]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d007      	beq.n	80053e8 <main+0x3570>
 80053d8:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <main+0x3638>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	4b34      	ldr	r3, [pc, #208]	@ (80054b0 <main+0x3638>)
 80053e0:	78db      	ldrb	r3, [r3, #3]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b13      	cmp	r3, #19
 80053e6:	d129      	bne.n	800543c <main+0x35c4>
						  if (snake2_current_cell_value == 1){
 80053e8:	4b33      	ldr	r3, [pc, #204]	@ (80054b8 <main+0x3640>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d112      	bne.n	8005416 <main+0x359e>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_1, 1, 0);
 80053f0:	4b2f      	ldr	r3, [pc, #188]	@ (80054b0 <main+0x3638>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4618      	mov	r0, r3
 80053f8:	4b2d      	ldr	r3, [pc, #180]	@ (80054b0 <main+0x3638>)
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	2300      	movs	r3, #0
 8005402:	9302      	str	r3, [sp, #8]
 8005404:	2301      	movs	r3, #1
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <main+0x3648>)
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2310      	movs	r3, #16
 800540e:	2210      	movs	r2, #16
 8005410:	f7fc f8d2 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005414:	e03c      	b.n	8005490 <main+0x3618>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_0, 1, 0);
 8005416:	4b26      	ldr	r3, [pc, #152]	@ (80054b0 <main+0x3638>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <main+0x3638>)
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	2300      	movs	r3, #0
 8005428:	9302      	str	r3, [sp, #8]
 800542a:	2301      	movs	r3, #1
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	4b25      	ldr	r3, [pc, #148]	@ (80054c4 <main+0x364c>)
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2310      	movs	r3, #16
 8005434:	2210      	movs	r2, #16
 8005436:	f7fc f8bf 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 800543a:	e029      	b.n	8005490 <main+0x3618>
						  }
					  } else {
						  if (snake2_current_cell_value == 1){
 800543c:	4b1e      	ldr	r3, [pc, #120]	@ (80054b8 <main+0x3640>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d112      	bne.n	800546a <main+0x35f2>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_crash_1, 0, 0);
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <main+0x3638>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	4618      	mov	r0, r3
 800544c:	4b18      	ldr	r3, [pc, #96]	@ (80054b0 <main+0x3638>)
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	2300      	movs	r3, #0
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	2300      	movs	r3, #0
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <main+0x3650>)
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2310      	movs	r3, #16
 8005462:	2210      	movs	r2, #16
 8005464:	f7fc f8a8 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_crash_0, 0, 0);
						  }
					  }
					  break;
 8005468:	e229      	b.n	80058be <main+0x3a46>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_crash_0, 0, 0);
 800546a:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <main+0x3638>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4618      	mov	r0, r3
 8005472:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <main+0x3638>)
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	2300      	movs	r3, #0
 800547c:	9302      	str	r3, [sp, #8]
 800547e:	2300      	movs	r3, #0
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <main+0x3654>)
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2310      	movs	r3, #16
 8005488:	2210      	movs	r2, #16
 800548a:	f7fc f895 	bl	80015b8 <LCD_Bitmap>
					  break;
 800548e:	e216      	b.n	80058be <main+0x3a46>
 8005490:	e215      	b.n	80058be <main+0x3a46>
 8005492:	bf00      	nop
 8005494:	20009598 	.word	0x20009598
 8005498:	200096d0 	.word	0x200096d0
 800549c:	20006204 	.word	0x20006204
 80054a0:	20006004 	.word	0x20006004
 80054a4:	20001e04 	.word	0x20001e04
 80054a8:	20001c04 	.word	0x20001c04
 80054ac:	20009803 	.word	0x20009803
 80054b0:	200096d4 	.word	0x200096d4
 80054b4:	2000944c 	.word	0x2000944c
 80054b8:	2000980c 	.word	0x2000980c
 80054bc:	20009801 	.word	0x20009801
 80054c0:	20006604 	.word	0x20006604
 80054c4:	20006404 	.word	0x20006404
 80054c8:	20004204 	.word	0x20004204
 80054cc:	20004004 	.word	0x20004004
				  case 1:
					  if ((snake2[0][0] - snake2[1][0] == 1)||(snake2[0][0] - snake2[1][0] == -(WIDTH-1))){
 80054d0:	4ba0      	ldr	r3, [pc, #640]	@ (8005754 <main+0x38dc>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b9f      	ldr	r3, [pc, #636]	@ (8005754 <main+0x38dc>)
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d008      	beq.n	80054f2 <main+0x367a>
 80054e0:	4b9c      	ldr	r3, [pc, #624]	@ (8005754 <main+0x38dc>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	4b9b      	ldr	r3, [pc, #620]	@ (8005754 <main+0x38dc>)
 80054e8:	78db      	ldrb	r3, [r3, #3]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f113 0f13 	cmn.w	r3, #19
 80054f0:	d129      	bne.n	8005546 <main+0x36ce>
						  if (snake2_current_cell_value == 1){
 80054f2:	4b99      	ldr	r3, [pc, #612]	@ (8005758 <main+0x38e0>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d112      	bne.n	8005520 <main+0x36a8>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_1, 0, 1);
 80054fa:	4b96      	ldr	r3, [pc, #600]	@ (8005754 <main+0x38dc>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	4b94      	ldr	r3, [pc, #592]	@ (8005754 <main+0x38dc>)
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	2301      	movs	r3, #1
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	2300      	movs	r3, #0
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	4b92      	ldr	r3, [pc, #584]	@ (800575c <main+0x38e4>)
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2310      	movs	r3, #16
 8005518:	2210      	movs	r2, #16
 800551a:	f7fc f84d 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 800551e:	e077      	b.n	8005610 <main+0x3798>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_0, 0, 1);
 8005520:	4b8c      	ldr	r3, [pc, #560]	@ (8005754 <main+0x38dc>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	4b8a      	ldr	r3, [pc, #552]	@ (8005754 <main+0x38dc>)
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	2301      	movs	r3, #1
 8005532:	9302      	str	r3, [sp, #8]
 8005534:	2300      	movs	r3, #0
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	4b89      	ldr	r3, [pc, #548]	@ (8005760 <main+0x38e8>)
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2310      	movs	r3, #16
 800553e:	2210      	movs	r2, #16
 8005540:	f7fc f83a 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005544:	e064      	b.n	8005610 <main+0x3798>
						  }
					  } else if ((snake2[0][0] - snake2[1][0] == -1)||(snake2[0][0] - snake2[1][0] == (WIDTH-1))){
 8005546:	4b83      	ldr	r3, [pc, #524]	@ (8005754 <main+0x38dc>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	4b81      	ldr	r3, [pc, #516]	@ (8005754 <main+0x38dc>)
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d007      	beq.n	8005568 <main+0x36f0>
 8005558:	4b7e      	ldr	r3, [pc, #504]	@ (8005754 <main+0x38dc>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	4b7d      	ldr	r3, [pc, #500]	@ (8005754 <main+0x38dc>)
 8005560:	78db      	ldrb	r3, [r3, #3]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b13      	cmp	r3, #19
 8005566:	d129      	bne.n	80055bc <main+0x3744>
						  if (snake2_current_cell_value == 1){
 8005568:	4b7b      	ldr	r3, [pc, #492]	@ (8005758 <main+0x38e0>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d112      	bne.n	8005596 <main+0x371e>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_1, 0, 0);
 8005570:	4b78      	ldr	r3, [pc, #480]	@ (8005754 <main+0x38dc>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	4618      	mov	r0, r3
 8005578:	4b76      	ldr	r3, [pc, #472]	@ (8005754 <main+0x38dc>)
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4619      	mov	r1, r3
 8005580:	2300      	movs	r3, #0
 8005582:	9302      	str	r3, [sp, #8]
 8005584:	2300      	movs	r3, #0
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	4b74      	ldr	r3, [pc, #464]	@ (800575c <main+0x38e4>)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2310      	movs	r3, #16
 800558e:	2210      	movs	r2, #16
 8005590:	f7fc f812 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005594:	e03c      	b.n	8005610 <main+0x3798>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_right_bottom_crash_0, 0, 0);
 8005596:	4b6f      	ldr	r3, [pc, #444]	@ (8005754 <main+0x38dc>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	4618      	mov	r0, r3
 800559e:	4b6d      	ldr	r3, [pc, #436]	@ (8005754 <main+0x38dc>)
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	2300      	movs	r3, #0
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005760 <main+0x38e8>)
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2310      	movs	r3, #16
 80055b4:	2210      	movs	r2, #16
 80055b6:	f7fb ffff 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 80055ba:	e029      	b.n	8005610 <main+0x3798>
						  }
					  } else {
						  if (snake2_current_cell_value == 1){
 80055bc:	4b66      	ldr	r3, [pc, #408]	@ (8005758 <main+0x38e0>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d112      	bne.n	80055ea <main+0x3772>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_crash_1, 1, 0);
 80055c4:	4b63      	ldr	r3, [pc, #396]	@ (8005754 <main+0x38dc>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	4b61      	ldr	r3, [pc, #388]	@ (8005754 <main+0x38dc>)
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	9302      	str	r3, [sp, #8]
 80055d8:	2301      	movs	r3, #1
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	4b61      	ldr	r3, [pc, #388]	@ (8005764 <main+0x38ec>)
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	2310      	movs	r3, #16
 80055e2:	2210      	movs	r2, #16
 80055e4:	f7fb ffe8 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_crash_0, 1, 0);
						  }
					  }
					  break;
 80055e8:	e169      	b.n	80058be <main+0x3a46>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_up_crash_0, 1, 0);
 80055ea:	4b5a      	ldr	r3, [pc, #360]	@ (8005754 <main+0x38dc>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	4b58      	ldr	r3, [pc, #352]	@ (8005754 <main+0x38dc>)
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	9302      	str	r3, [sp, #8]
 80055fe:	2301      	movs	r3, #1
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	4b59      	ldr	r3, [pc, #356]	@ (8005768 <main+0x38f0>)
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	2310      	movs	r3, #16
 8005608:	2210      	movs	r2, #16
 800560a:	f7fb ffd5 	bl	80015b8 <LCD_Bitmap>
					  break;
 800560e:	e156      	b.n	80058be <main+0x3a46>
 8005610:	e155      	b.n	80058be <main+0x3a46>
				  case 2:
					  if ((snake2[0][1] - snake2[1][1] == 1)||(snake2[0][1] - snake2[1][1] == -(HEIGHT-1))){
 8005612:	4b50      	ldr	r3, [pc, #320]	@ (8005754 <main+0x38dc>)
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	461a      	mov	r2, r3
 8005618:	4b4e      	ldr	r3, [pc, #312]	@ (8005754 <main+0x38dc>)
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d008      	beq.n	8005634 <main+0x37bc>
 8005622:	4b4c      	ldr	r3, [pc, #304]	@ (8005754 <main+0x38dc>)
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	461a      	mov	r2, r3
 8005628:	4b4a      	ldr	r3, [pc, #296]	@ (8005754 <main+0x38dc>)
 800562a:	791b      	ldrb	r3, [r3, #4]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f113 0f0e 	cmn.w	r3, #14
 8005632:	d129      	bne.n	8005688 <main+0x3810>
						  if (snake2_current_cell_value == 1){
 8005634:	4b48      	ldr	r3, [pc, #288]	@ (8005758 <main+0x38e0>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d112      	bne.n	8005662 <main+0x37ea>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_1, 0, 1);
 800563c:	4b45      	ldr	r3, [pc, #276]	@ (8005754 <main+0x38dc>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4618      	mov	r0, r3
 8005644:	4b43      	ldr	r3, [pc, #268]	@ (8005754 <main+0x38dc>)
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	4619      	mov	r1, r3
 800564c:	2301      	movs	r3, #1
 800564e:	9302      	str	r3, [sp, #8]
 8005650:	2300      	movs	r3, #0
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	4b45      	ldr	r3, [pc, #276]	@ (800576c <main+0x38f4>)
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2310      	movs	r3, #16
 800565a:	2210      	movs	r2, #16
 800565c:	f7fb ffac 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005660:	e077      	b.n	8005752 <main+0x38da>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_0, 0, 1);
 8005662:	4b3c      	ldr	r3, [pc, #240]	@ (8005754 <main+0x38dc>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	4b3a      	ldr	r3, [pc, #232]	@ (8005754 <main+0x38dc>)
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	2301      	movs	r3, #1
 8005674:	9302      	str	r3, [sp, #8]
 8005676:	2300      	movs	r3, #0
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	4b3d      	ldr	r3, [pc, #244]	@ (8005770 <main+0x38f8>)
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	2310      	movs	r3, #16
 8005680:	2210      	movs	r2, #16
 8005682:	f7fb ff99 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005686:	e064      	b.n	8005752 <main+0x38da>
						  }
					  } else if ((snake2[0][1] - snake2[1][1] == -1)||(snake2[0][1] - snake2[1][1] == (HEIGHT-1))){
 8005688:	4b32      	ldr	r3, [pc, #200]	@ (8005754 <main+0x38dc>)
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	461a      	mov	r2, r3
 800568e:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <main+0x38dc>)
 8005690:	791b      	ldrb	r3, [r3, #4]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d007      	beq.n	80056aa <main+0x3832>
 800569a:	4b2e      	ldr	r3, [pc, #184]	@ (8005754 <main+0x38dc>)
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	461a      	mov	r2, r3
 80056a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005754 <main+0x38dc>)
 80056a2:	791b      	ldrb	r3, [r3, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b0e      	cmp	r3, #14
 80056a8:	d129      	bne.n	80056fe <main+0x3886>
						  if (snake2_current_cell_value == 1){
 80056aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005758 <main+0x38e0>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d112      	bne.n	80056d8 <main+0x3860>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_1, 1, 1);
 80056b2:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <main+0x38dc>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	4b26      	ldr	r3, [pc, #152]	@ (8005754 <main+0x38dc>)
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	2301      	movs	r3, #1
 80056c4:	9302      	str	r3, [sp, #8]
 80056c6:	2301      	movs	r3, #1
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	4b28      	ldr	r3, [pc, #160]	@ (800576c <main+0x38f4>)
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2310      	movs	r3, #16
 80056d0:	2210      	movs	r2, #16
 80056d2:	f7fb ff71 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 80056d6:	e03c      	b.n	8005752 <main+0x38da>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_0, 1, 1);
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <main+0x38dc>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	4618      	mov	r0, r3
 80056e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005754 <main+0x38dc>)
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	2301      	movs	r3, #1
 80056ea:	9302      	str	r3, [sp, #8]
 80056ec:	2301      	movs	r3, #1
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005770 <main+0x38f8>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2310      	movs	r3, #16
 80056f6:	2210      	movs	r2, #16
 80056f8:	f7fb ff5e 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 80056fc:	e029      	b.n	8005752 <main+0x38da>
						  }
					  } else {
						  if (snake2_current_cell_value == 1){
 80056fe:	4b16      	ldr	r3, [pc, #88]	@ (8005758 <main+0x38e0>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d112      	bne.n	800572c <main+0x38b4>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_crash_1, 0, 1);
 8005706:	4b13      	ldr	r3, [pc, #76]	@ (8005754 <main+0x38dc>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <main+0x38dc>)
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	4619      	mov	r1, r3
 8005716:	2301      	movs	r3, #1
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	2300      	movs	r3, #0
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <main+0x38fc>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2310      	movs	r3, #16
 8005724:	2210      	movs	r2, #16
 8005726:	f7fb ff47 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_crash_0, 0, 1);
						  }
					  }
					  break;
 800572a:	e0c8      	b.n	80058be <main+0x3a46>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_crash_0, 0, 1);
 800572c:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <main+0x38dc>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	4618      	mov	r0, r3
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <main+0x38dc>)
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	2301      	movs	r3, #1
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	2300      	movs	r3, #0
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <main+0x3900>)
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2310      	movs	r3, #16
 800574a:	2210      	movs	r2, #16
 800574c:	f7fb ff34 	bl	80015b8 <LCD_Bitmap>
					  break;
 8005750:	e0b5      	b.n	80058be <main+0x3a46>
 8005752:	e0b4      	b.n	80058be <main+0x3a46>
 8005754:	200096d4 	.word	0x200096d4
 8005758:	2000980c 	.word	0x2000980c
 800575c:	20006604 	.word	0x20006604
 8005760:	20006404 	.word	0x20006404
 8005764:	20004204 	.word	0x20004204
 8005768:	20004004 	.word	0x20004004
 800576c:	20006a04 	.word	0x20006a04
 8005770:	20006804 	.word	0x20006804
 8005774:	20003604 	.word	0x20003604
 8005778:	20003404 	.word	0x20003404
				  case 3:
					  if ((snake2[0][1] - snake2[1][1] == 1)||(snake2[0][1] - snake2[1][1] == -(HEIGHT-1))){
 800577c:	4b98      	ldr	r3, [pc, #608]	@ (80059e0 <main+0x3b68>)
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	461a      	mov	r2, r3
 8005782:	4b97      	ldr	r3, [pc, #604]	@ (80059e0 <main+0x3b68>)
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d008      	beq.n	800579e <main+0x3926>
 800578c:	4b94      	ldr	r3, [pc, #592]	@ (80059e0 <main+0x3b68>)
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	461a      	mov	r2, r3
 8005792:	4b93      	ldr	r3, [pc, #588]	@ (80059e0 <main+0x3b68>)
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f113 0f0e 	cmn.w	r3, #14
 800579c:	d129      	bne.n	80057f2 <main+0x397a>
						  if (snake2_current_cell_value == 1){
 800579e:	4b91      	ldr	r3, [pc, #580]	@ (80059e4 <main+0x3b6c>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d112      	bne.n	80057cc <main+0x3954>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_1, 0, 0);
 80057a6:	4b8e      	ldr	r3, [pc, #568]	@ (80059e0 <main+0x3b68>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	4b8c      	ldr	r3, [pc, #560]	@ (80059e0 <main+0x3b68>)
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	9302      	str	r3, [sp, #8]
 80057ba:	2300      	movs	r3, #0
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	4b8a      	ldr	r3, [pc, #552]	@ (80059e8 <main+0x3b70>)
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	2310      	movs	r3, #16
 80057c4:	2210      	movs	r2, #16
 80057c6:	f7fb fef7 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 80057ca:	e077      	b.n	80058bc <main+0x3a44>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_0, 0, 0);
 80057cc:	4b84      	ldr	r3, [pc, #528]	@ (80059e0 <main+0x3b68>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	4618      	mov	r0, r3
 80057d4:	4b82      	ldr	r3, [pc, #520]	@ (80059e0 <main+0x3b68>)
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	2300      	movs	r3, #0
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	2300      	movs	r3, #0
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	4b81      	ldr	r3, [pc, #516]	@ (80059ec <main+0x3b74>)
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2310      	movs	r3, #16
 80057ea:	2210      	movs	r2, #16
 80057ec:	f7fb fee4 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 80057f0:	e064      	b.n	80058bc <main+0x3a44>
						  }
					  } else if ((snake2[0][1] - snake2[1][1] == -1)||(snake2[0][1] - snake2[1][1] == (HEIGHT-1))){
 80057f2:	4b7b      	ldr	r3, [pc, #492]	@ (80059e0 <main+0x3b68>)
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b79      	ldr	r3, [pc, #484]	@ (80059e0 <main+0x3b68>)
 80057fa:	791b      	ldrb	r3, [r3, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d007      	beq.n	8005814 <main+0x399c>
 8005804:	4b76      	ldr	r3, [pc, #472]	@ (80059e0 <main+0x3b68>)
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	461a      	mov	r2, r3
 800580a:	4b75      	ldr	r3, [pc, #468]	@ (80059e0 <main+0x3b68>)
 800580c:	791b      	ldrb	r3, [r3, #4]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b0e      	cmp	r3, #14
 8005812:	d129      	bne.n	8005868 <main+0x39f0>
						  if (snake2_current_cell_value == 1){
 8005814:	4b73      	ldr	r3, [pc, #460]	@ (80059e4 <main+0x3b6c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d112      	bne.n	8005842 <main+0x39ca>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_1, 1, 0);
 800581c:	4b70      	ldr	r3, [pc, #448]	@ (80059e0 <main+0x3b68>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	4618      	mov	r0, r3
 8005824:	4b6e      	ldr	r3, [pc, #440]	@ (80059e0 <main+0x3b68>)
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	2300      	movs	r3, #0
 800582e:	9302      	str	r3, [sp, #8]
 8005830:	2301      	movs	r3, #1
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	4b6c      	ldr	r3, [pc, #432]	@ (80059e8 <main+0x3b70>)
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2310      	movs	r3, #16
 800583a:	2210      	movs	r2, #16
 800583c:	f7fb febc 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005840:	e03c      	b.n	80058bc <main+0x3a44>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, corner_snake2_top_right_crash_0, 1, 0);
 8005842:	4b67      	ldr	r3, [pc, #412]	@ (80059e0 <main+0x3b68>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	4618      	mov	r0, r3
 800584a:	4b65      	ldr	r3, [pc, #404]	@ (80059e0 <main+0x3b68>)
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	2300      	movs	r3, #0
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	2301      	movs	r3, #1
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	4b64      	ldr	r3, [pc, #400]	@ (80059ec <main+0x3b74>)
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2310      	movs	r3, #16
 8005860:	2210      	movs	r2, #16
 8005862:	f7fb fea9 	bl	80015b8 <LCD_Bitmap>
						  if (snake2_current_cell_value == 1){
 8005866:	e029      	b.n	80058bc <main+0x3a44>
						  }
					  } else {
						  if (snake2_current_cell_value == 1){
 8005868:	4b5e      	ldr	r3, [pc, #376]	@ (80059e4 <main+0x3b6c>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d112      	bne.n	8005896 <main+0x3a1e>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_crash_1, 0, 0);
 8005870:	4b5b      	ldr	r3, [pc, #364]	@ (80059e0 <main+0x3b68>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	4b59      	ldr	r3, [pc, #356]	@ (80059e0 <main+0x3b68>)
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	4619      	mov	r1, r3
 8005880:	2300      	movs	r3, #0
 8005882:	9302      	str	r3, [sp, #8]
 8005884:	2300      	movs	r3, #0
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	4b59      	ldr	r3, [pc, #356]	@ (80059f0 <main+0x3b78>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2310      	movs	r3, #16
 800588e:	2210      	movs	r2, #16
 8005890:	f7fb fe92 	bl	80015b8 <LCD_Bitmap>
						  } else {
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_crash_0, 0, 0);
						  }
					  }
					  break;
 8005894:	e012      	b.n	80058bc <main+0x3a44>
							  LCD_Bitmap(snake2[0][0]*SQ_SIZE, snake2[0][1]*SQ_SIZE, SQ_SIZE, SQ_SIZE, head_snake2_right_crash_0, 0, 0);
 8005896:	4b52      	ldr	r3, [pc, #328]	@ (80059e0 <main+0x3b68>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	4618      	mov	r0, r3
 800589e:	4b50      	ldr	r3, [pc, #320]	@ (80059e0 <main+0x3b68>)
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	4b51      	ldr	r3, [pc, #324]	@ (80059f4 <main+0x3b7c>)
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2310      	movs	r3, #16
 80058b4:	2210      	movs	r2, #16
 80058b6:	f7fb fe7f 	bl	80015b8 <LCD_Bitmap>
					  break;
 80058ba:	e7ff      	b.n	80058bc <main+0x3a44>
 80058bc:	bf00      	nop

				  dir_snake2 = random_dir_snake2;
			  }
		  }*/

		  if ((game_over == 1)&&(menu == 0)){
 80058be:	4b4e      	ldr	r3, [pc, #312]	@ (80059f8 <main+0x3b80>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	f040 8147 	bne.w	8005b56 <main+0x3cde>
 80058c8:	4b4c      	ldr	r3, [pc, #304]	@ (80059fc <main+0x3b84>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8142 	bne.w	8005b56 <main+0x3cde>
			  if (prueba_iniciar_conteo == 0){
 80058d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a00 <main+0x3b88>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 813d 	bne.w	8005b56 <main+0x3cde>
				  prueba_iniciar_conteo = 1;
 80058dc:	4b48      	ldr	r3, [pc, #288]	@ (8005a00 <main+0x3b88>)
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]

				  if ((snake1_lost)&&(snake2_lost)){
 80058e2:	4b48      	ldr	r3, [pc, #288]	@ (8005a04 <main+0x3b8c>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d058      	beq.n	800599c <main+0x3b24>
 80058ea:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <main+0x3b90>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d054      	beq.n	800599c <main+0x3b24>
					  fres = f_mount(&fs, "", 0);
 80058f2:	2200      	movs	r2, #0
 80058f4:	4945      	ldr	r1, [pc, #276]	@ (8005a0c <main+0x3b94>)
 80058f6:	4846      	ldr	r0, [pc, #280]	@ (8005a10 <main+0x3b98>)
 80058f8:	f006 ff18 	bl	800c72c <f_mount>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	4b44      	ldr	r3, [pc, #272]	@ (8005a14 <main+0x3b9c>)
 8005902:	701a      	strb	r2, [r3, #0]
					  if (fres == FR_OK){
 8005904:	4b43      	ldr	r3, [pc, #268]	@ (8005a14 <main+0x3b9c>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d13e      	bne.n	800598a <main+0x3b12>
						  fres = f_open(&fil, "snakes_lose.bin", FA_READ);
 800590c:	2201      	movs	r2, #1
 800590e:	4942      	ldr	r1, [pc, #264]	@ (8005a18 <main+0x3ba0>)
 8005910:	4842      	ldr	r0, [pc, #264]	@ (8005a1c <main+0x3ba4>)
 8005912:	f006 ff51 	bl	800c7b8 <f_open>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a14 <main+0x3b9c>)
 800591c:	701a      	strb	r2, [r3, #0]
						  if (fres == FR_OK) {
 800591e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a14 <main+0x3b9c>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12c      	bne.n	8005980 <main+0x3b08>
							  for (uint16_t row = 0; row < 240; row+=2){
 8005926:	2300      	movs	r3, #0
 8005928:	833b      	strh	r3, [r7, #24]
 800592a:	e023      	b.n	8005974 <main+0x3afc>
								  fres = f_read(&fil, menu_buf, sizeof(menu_buf), &br);
 800592c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a20 <main+0x3ba8>)
 800592e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8005932:	493c      	ldr	r1, [pc, #240]	@ (8005a24 <main+0x3bac>)
 8005934:	4839      	ldr	r0, [pc, #228]	@ (8005a1c <main+0x3ba4>)
 8005936:	f007 f907 	bl	800cb48 <f_read>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	4b35      	ldr	r3, [pc, #212]	@ (8005a14 <main+0x3b9c>)
 8005940:	701a      	strb	r2, [r3, #0]
								  if ((fres == FR_OK)&&(br == sizeof(menu_buf))){
 8005942:	4b34      	ldr	r3, [pc, #208]	@ (8005a14 <main+0x3b9c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d111      	bne.n	800596e <main+0x3af6>
 800594a:	4b35      	ldr	r3, [pc, #212]	@ (8005a20 <main+0x3ba8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005952:	d10c      	bne.n	800596e <main+0x3af6>
									  LCD_Bitmap(0, row, 320, 2, menu_buf, 0, 0);
 8005954:	8b39      	ldrh	r1, [r7, #24]
 8005956:	2300      	movs	r3, #0
 8005958:	9302      	str	r3, [sp, #8]
 800595a:	2300      	movs	r3, #0
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	4b31      	ldr	r3, [pc, #196]	@ (8005a24 <main+0x3bac>)
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	2302      	movs	r3, #2
 8005964:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005968:	2000      	movs	r0, #0
 800596a:	f7fb fe25 	bl	80015b8 <LCD_Bitmap>
							  for (uint16_t row = 0; row < 240; row+=2){
 800596e:	8b3b      	ldrh	r3, [r7, #24]
 8005970:	3302      	adds	r3, #2
 8005972:	833b      	strh	r3, [r7, #24]
 8005974:	8b3b      	ldrh	r3, [r7, #24]
 8005976:	2bef      	cmp	r3, #239	@ 0xef
 8005978:	d9d8      	bls.n	800592c <main+0x3ab4>
								  }
							  }
							f_close(&fil);
 800597a:	4828      	ldr	r0, [pc, #160]	@ (8005a1c <main+0x3ba4>)
 800597c:	f007 fac1 	bl	800cf02 <f_close>


						}
						  f_mount(NULL, "", 1);
 8005980:	2201      	movs	r2, #1
 8005982:	4922      	ldr	r1, [pc, #136]	@ (8005a0c <main+0x3b94>)
 8005984:	2000      	movs	r0, #0
 8005986:	f006 fed1 	bl	800c72c <f_mount>
					  }
					  sonido = 'l';
 800598a:	4b27      	ldr	r3, [pc, #156]	@ (8005a28 <main+0x3bb0>)
 800598c:	226c      	movs	r2, #108	@ 0x6c
 800598e:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 8005990:	2201      	movs	r2, #1
 8005992:	4925      	ldr	r1, [pc, #148]	@ (8005a28 <main+0x3bb0>)
 8005994:	4825      	ldr	r0, [pc, #148]	@ (8005a2c <main+0x3bb4>)
 8005996:	f003 fc3b 	bl	8009210 <HAL_UART_Transmit_DMA>
 800599a:	e0d7      	b.n	8005b4c <main+0x3cd4>
				  } else if (snake2_lost){
 800599c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <main+0x3b90>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d07f      	beq.n	8005aa4 <main+0x3c2c>
					  fres = f_mount(&fs, "", 0);
 80059a4:	2200      	movs	r2, #0
 80059a6:	4919      	ldr	r1, [pc, #100]	@ (8005a0c <main+0x3b94>)
 80059a8:	4819      	ldr	r0, [pc, #100]	@ (8005a10 <main+0x3b98>)
 80059aa:	f006 febf 	bl	800c72c <f_mount>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b18      	ldr	r3, [pc, #96]	@ (8005a14 <main+0x3b9c>)
 80059b4:	701a      	strb	r2, [r3, #0]
					  if (fres == FR_OK){
 80059b6:	4b17      	ldr	r3, [pc, #92]	@ (8005a14 <main+0x3b9c>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d169      	bne.n	8005a92 <main+0x3c1a>
						  fres = f_open(&fil, "snake1_wins.bin", FA_READ);
 80059be:	2201      	movs	r2, #1
 80059c0:	491b      	ldr	r1, [pc, #108]	@ (8005a30 <main+0x3bb8>)
 80059c2:	4816      	ldr	r0, [pc, #88]	@ (8005a1c <main+0x3ba4>)
 80059c4:	f006 fef8 	bl	800c7b8 <f_open>
 80059c8:	4603      	mov	r3, r0
 80059ca:	461a      	mov	r2, r3
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <main+0x3b9c>)
 80059ce:	701a      	strb	r2, [r3, #0]
						  if (fres == FR_OK) {
 80059d0:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <main+0x3b9c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d157      	bne.n	8005a88 <main+0x3c10>
							  for (uint16_t row = 0; row < 240; row+=2){
 80059d8:	2300      	movs	r3, #0
 80059da:	82fb      	strh	r3, [r7, #22]
 80059dc:	e04e      	b.n	8005a7c <main+0x3c04>
 80059de:	bf00      	nop
 80059e0:	200096d4 	.word	0x200096d4
 80059e4:	2000980c 	.word	0x2000980c
 80059e8:	20006a04 	.word	0x20006a04
 80059ec:	20006804 	.word	0x20006804
 80059f0:	20003604 	.word	0x20003604
 80059f4:	20003404 	.word	0x20003404
 80059f8:	20009578 	.word	0x20009578
 80059fc:	2000957a 	.word	0x2000957a
 8005a00:	20008f44 	.word	0x20008f44
 8005a04:	200096c7 	.word	0x200096c7
 8005a08:	20009803 	.word	0x20009803
 8005a0c:	0800e1c8 	.word	0x0800e1c8
 8005a10:	20006cd8 	.word	0x20006cd8
 8005a14:	20008d40 	.word	0x20008d40
 8005a18:	0800e1e4 	.word	0x0800e1e4
 8005a1c:	20007d10 	.word	0x20007d10
 8005a20:	20008d44 	.word	0x20008d44
 8005a24:	20008f48 	.word	0x20008f48
 8005a28:	20009594 	.word	0x20009594
 8005a2c:	20008e30 	.word	0x20008e30
 8005a30:	0800e1f4 	.word	0x0800e1f4
								  fres = f_read(&fil, menu_buf, sizeof(menu_buf), &br);
 8005a34:	4b53      	ldr	r3, [pc, #332]	@ (8005b84 <main+0x3d0c>)
 8005a36:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8005a3a:	4953      	ldr	r1, [pc, #332]	@ (8005b88 <main+0x3d10>)
 8005a3c:	4853      	ldr	r0, [pc, #332]	@ (8005b8c <main+0x3d14>)
 8005a3e:	f007 f883 	bl	800cb48 <f_read>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b52      	ldr	r3, [pc, #328]	@ (8005b90 <main+0x3d18>)
 8005a48:	701a      	strb	r2, [r3, #0]
								  if ((fres == FR_OK)&&(br == sizeof(menu_buf))){
 8005a4a:	4b51      	ldr	r3, [pc, #324]	@ (8005b90 <main+0x3d18>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d111      	bne.n	8005a76 <main+0x3bfe>
 8005a52:	4b4c      	ldr	r3, [pc, #304]	@ (8005b84 <main+0x3d0c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005a5a:	d10c      	bne.n	8005a76 <main+0x3bfe>
									  LCD_Bitmap(0, row, 320, 2, menu_buf, 0, 0);
 8005a5c:	8af9      	ldrh	r1, [r7, #22]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9302      	str	r3, [sp, #8]
 8005a62:	2300      	movs	r3, #0
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	4b48      	ldr	r3, [pc, #288]	@ (8005b88 <main+0x3d10>)
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005a70:	2000      	movs	r0, #0
 8005a72:	f7fb fda1 	bl	80015b8 <LCD_Bitmap>
							  for (uint16_t row = 0; row < 240; row+=2){
 8005a76:	8afb      	ldrh	r3, [r7, #22]
 8005a78:	3302      	adds	r3, #2
 8005a7a:	82fb      	strh	r3, [r7, #22]
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
 8005a7e:	2bef      	cmp	r3, #239	@ 0xef
 8005a80:	d9d8      	bls.n	8005a34 <main+0x3bbc>
								  }
							  }
							f_close(&fil);
 8005a82:	4842      	ldr	r0, [pc, #264]	@ (8005b8c <main+0x3d14>)
 8005a84:	f007 fa3d 	bl	800cf02 <f_close>


						}
						  f_mount(NULL, "", 1);
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4942      	ldr	r1, [pc, #264]	@ (8005b94 <main+0x3d1c>)
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f006 fe4d 	bl	800c72c <f_mount>
					  }
					  sonido = 'w';
 8005a92:	4b41      	ldr	r3, [pc, #260]	@ (8005b98 <main+0x3d20>)
 8005a94:	2277      	movs	r2, #119	@ 0x77
 8005a96:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 8005a98:	2201      	movs	r2, #1
 8005a9a:	493f      	ldr	r1, [pc, #252]	@ (8005b98 <main+0x3d20>)
 8005a9c:	483f      	ldr	r0, [pc, #252]	@ (8005b9c <main+0x3d24>)
 8005a9e:	f003 fbb7 	bl	8009210 <HAL_UART_Transmit_DMA>
 8005aa2:	e053      	b.n	8005b4c <main+0x3cd4>
				  } else {
					  fres = f_mount(&fs, "", 0);
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	493b      	ldr	r1, [pc, #236]	@ (8005b94 <main+0x3d1c>)
 8005aa8:	483d      	ldr	r0, [pc, #244]	@ (8005ba0 <main+0x3d28>)
 8005aaa:	f006 fe3f 	bl	800c72c <f_mount>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <main+0x3d18>)
 8005ab4:	701a      	strb	r2, [r3, #0]
					  if (fres == FR_OK){
 8005ab6:	4b36      	ldr	r3, [pc, #216]	@ (8005b90 <main+0x3d18>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d13e      	bne.n	8005b3c <main+0x3cc4>
						  fres = f_open(&fil, "snake2_wins.bin", FA_READ);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4938      	ldr	r1, [pc, #224]	@ (8005ba4 <main+0x3d2c>)
 8005ac2:	4832      	ldr	r0, [pc, #200]	@ (8005b8c <main+0x3d14>)
 8005ac4:	f006 fe78 	bl	800c7b8 <f_open>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	4b30      	ldr	r3, [pc, #192]	@ (8005b90 <main+0x3d18>)
 8005ace:	701a      	strb	r2, [r3, #0]
						  if (fres == FR_OK) {
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8005b90 <main+0x3d18>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d12c      	bne.n	8005b32 <main+0x3cba>
							  for (uint16_t row = 0; row < 240; row+=2){
 8005ad8:	2300      	movs	r3, #0
 8005ada:	82bb      	strh	r3, [r7, #20]
 8005adc:	e023      	b.n	8005b26 <main+0x3cae>
								  fres = f_read(&fil, menu_buf, sizeof(menu_buf), &br);
 8005ade:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <main+0x3d0c>)
 8005ae0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8005ae4:	4928      	ldr	r1, [pc, #160]	@ (8005b88 <main+0x3d10>)
 8005ae6:	4829      	ldr	r0, [pc, #164]	@ (8005b8c <main+0x3d14>)
 8005ae8:	f007 f82e 	bl	800cb48 <f_read>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b27      	ldr	r3, [pc, #156]	@ (8005b90 <main+0x3d18>)
 8005af2:	701a      	strb	r2, [r3, #0]
								  if ((fres == FR_OK)&&(br == sizeof(menu_buf))){
 8005af4:	4b26      	ldr	r3, [pc, #152]	@ (8005b90 <main+0x3d18>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d111      	bne.n	8005b20 <main+0x3ca8>
 8005afc:	4b21      	ldr	r3, [pc, #132]	@ (8005b84 <main+0x3d0c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005b04:	d10c      	bne.n	8005b20 <main+0x3ca8>
									  LCD_Bitmap(0, row, 320, 2, menu_buf, 0, 0);
 8005b06:	8ab9      	ldrh	r1, [r7, #20]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9302      	str	r3, [sp, #8]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	4b1d      	ldr	r3, [pc, #116]	@ (8005b88 <main+0x3d10>)
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2302      	movs	r3, #2
 8005b16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fb fd4c 	bl	80015b8 <LCD_Bitmap>
							  for (uint16_t row = 0; row < 240; row+=2){
 8005b20:	8abb      	ldrh	r3, [r7, #20]
 8005b22:	3302      	adds	r3, #2
 8005b24:	82bb      	strh	r3, [r7, #20]
 8005b26:	8abb      	ldrh	r3, [r7, #20]
 8005b28:	2bef      	cmp	r3, #239	@ 0xef
 8005b2a:	d9d8      	bls.n	8005ade <main+0x3c66>
								  }
							  }
							f_close(&fil);
 8005b2c:	4817      	ldr	r0, [pc, #92]	@ (8005b8c <main+0x3d14>)
 8005b2e:	f007 f9e8 	bl	800cf02 <f_close>


						}
						  f_mount(NULL, "", 1);
 8005b32:	2201      	movs	r2, #1
 8005b34:	4917      	ldr	r1, [pc, #92]	@ (8005b94 <main+0x3d1c>)
 8005b36:	2000      	movs	r0, #0
 8005b38:	f006 fdf8 	bl	800c72c <f_mount>
					  }
					  sonido = 'w';
 8005b3c:	4b16      	ldr	r3, [pc, #88]	@ (8005b98 <main+0x3d20>)
 8005b3e:	2277      	movs	r2, #119	@ 0x77
 8005b40:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit_DMA(&huart3, &sonido, 1);
 8005b42:	2201      	movs	r2, #1
 8005b44:	4914      	ldr	r1, [pc, #80]	@ (8005b98 <main+0x3d20>)
 8005b46:	4815      	ldr	r0, [pc, #84]	@ (8005b9c <main+0x3d24>)
 8005b48:	f003 fb62 	bl	8009210 <HAL_UART_Transmit_DMA>
				  }

				  lastInterruptTick_prueba = HAL_GetTick();
 8005b4c:	f000 fde2 	bl	8006714 <HAL_GetTick>
 8005b50:	4603      	mov	r3, r0
 8005b52:	4a15      	ldr	r2, [pc, #84]	@ (8005ba8 <main+0x3d30>)
 8005b54:	6013      	str	r3, [r2, #0]
			  }
		  }
		  if (prueba_iniciar_conteo == 1){
 8005b56:	4b15      	ldr	r3, [pc, #84]	@ (8005bac <main+0x3d34>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f47c a9b0 	bne.w	8001ec0 <main+0x48>
			  uint32_t currentmillis_prueba = HAL_GetTick();
 8005b60:	f000 fdd8 	bl	8006714 <HAL_GetTick>
 8005b64:	6038      	str	r0, [r7, #0]
			  if ((currentmillis_prueba - lastInterruptTick_prueba)>2000){
 8005b66:	4b10      	ldr	r3, [pc, #64]	@ (8005ba8 <main+0x3d30>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005b72:	f67c a9a5 	bls.w	8001ec0 <main+0x48>
				  prueba_iniciar_conteo = 0;
 8005b76:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <main+0x3d34>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
				  display_menu();
 8005b7c:	f7fc f8e8 	bl	8001d50 <display_menu>
  {
 8005b80:	f7fc b99e 	b.w	8001ec0 <main+0x48>
 8005b84:	20008d44 	.word	0x20008d44
 8005b88:	20008f48 	.word	0x20008f48
 8005b8c:	20007d10 	.word	0x20007d10
 8005b90:	20008d40 	.word	0x20008d40
 8005b94:	0800e1c8 	.word	0x0800e1c8
 8005b98:	20009594 	.word	0x20009594
 8005b9c:	20008e30 	.word	0x20008e30
 8005ba0:	20006cd8 	.word	0x20006cd8
 8005ba4:	0800e204 	.word	0x0800e204
 8005ba8:	20008f40 	.word	0x20008f40
 8005bac:	20008f44 	.word	0x20008f44

08005bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b094      	sub	sp, #80	@ 0x50
 8005bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bb6:	f107 031c 	add.w	r3, r7, #28
 8005bba:	2234      	movs	r2, #52	@ 0x34
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f007 fc5d 	bl	800d47e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bc4:	f107 0308 	add.w	r3, r7, #8
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <SystemClock_Config+0xd4>)
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	4a29      	ldr	r2, [pc, #164]	@ (8005c84 <SystemClock_Config+0xd4>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005be4:	4b27      	ldr	r3, [pc, #156]	@ (8005c84 <SystemClock_Config+0xd4>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4b24      	ldr	r3, [pc, #144]	@ (8005c88 <SystemClock_Config+0xd8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005bfc:	4a22      	ldr	r2, [pc, #136]	@ (8005c88 <SystemClock_Config+0xd8>)
 8005bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	4b20      	ldr	r3, [pc, #128]	@ (8005c88 <SystemClock_Config+0xd8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c10:	2302      	movs	r3, #2
 8005c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c14:	2301      	movs	r3, #1
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005c18:	2310      	movs	r3, #16
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005c20:	2300      	movs	r3, #0
 8005c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005c24:	2310      	movs	r3, #16
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005c28:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005c2e:	2304      	movs	r3, #4
 8005c30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005c32:	2302      	movs	r3, #2
 8005c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005c36:	2302      	movs	r3, #2
 8005c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c3a:	f107 031c 	add.w	r3, r7, #28
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f002 fb80 	bl	8008344 <HAL_RCC_OscConfig>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005c4a:	f000 f9e7 	bl	800601c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c4e:	230f      	movs	r3, #15
 8005c50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c52:	2302      	movs	r3, #2
 8005c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f002 f820 	bl	8007cb0 <HAL_RCC_ClockConfig>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005c76:	f000 f9d1 	bl	800601c <Error_Handler>
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	3750      	adds	r7, #80	@ 0x50
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40007000 	.word	0x40007000

08005c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005c92:	463b      	mov	r3, r7
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005c9e:	4b21      	ldr	r3, [pc, #132]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005ca0:	4a21      	ldr	r2, [pc, #132]	@ (8005d28 <MX_ADC1_Init+0x9c>)
 8005ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005ca6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005cac:	4b1d      	ldr	r3, [pc, #116]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005cbe:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005cc6:	4b17      	ldr	r3, [pc, #92]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ccc:	4b15      	ldr	r3, [pc, #84]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cce:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <MX_ADC1_Init+0xa0>)
 8005cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005cd2:	4b14      	ldr	r3, [pc, #80]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005cd8:	4b12      	ldr	r3, [pc, #72]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005cde:	4b11      	ldr	r3, [pc, #68]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005cec:	480d      	ldr	r0, [pc, #52]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005cee:	f000 fd41 	bl	8006774 <HAL_ADC_Init>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005cf8:	f000 f990 	bl	800601c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005cfc:	230e      	movs	r3, #14
 8005cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d08:	463b      	mov	r3, r7
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4805      	ldr	r0, [pc, #20]	@ (8005d24 <MX_ADC1_Init+0x98>)
 8005d0e:	f000 fedf 	bl	8006ad0 <HAL_ADC_ConfigChannel>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005d18:	f000 f980 	bl	800601c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20008d48 	.word	0x20008d48
 8005d28:	40012000 	.word	0x40012000
 8005d2c:	0f000001 	.word	0x0f000001

08005d30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005d34:	4b17      	ldr	r3, [pc, #92]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d36:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <MX_SPI1_Init+0x68>)
 8005d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005d42:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d4e:	4b11      	ldr	r3, [pc, #68]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d54:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005d62:	4b0c      	ldr	r3, [pc, #48]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d64:	2210      	movs	r2, #16
 8005d66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d68:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d6e:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d74:	4b07      	ldr	r3, [pc, #28]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d80:	4804      	ldr	r0, [pc, #16]	@ (8005d94 <MX_SPI1_Init+0x64>)
 8005d82:	f002 fd7d 	bl	8008880 <HAL_SPI_Init>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005d8c:	f000 f946 	bl	800601c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20008d90 	.word	0x20008d90
 8005d98:	40013000 	.word	0x40013000

08005d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005da0:	4b11      	ldr	r3, [pc, #68]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005da2:	4a12      	ldr	r2, [pc, #72]	@ (8005dec <MX_USART2_UART_Init+0x50>)
 8005da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005da6:	4b10      	ldr	r3, [pc, #64]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005da8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005dae:	4b0e      	ldr	r3, [pc, #56]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005db4:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005dc0:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005dc2:	220c      	movs	r2, #12
 8005dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dc6:	4b08      	ldr	r3, [pc, #32]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005dd2:	4805      	ldr	r0, [pc, #20]	@ (8005de8 <MX_USART2_UART_Init+0x4c>)
 8005dd4:	f003 f9a6 	bl	8009124 <HAL_UART_Init>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005dde:	f000 f91d 	bl	800601c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20008de8 	.word	0x20008de8
 8005dec:	40004400 	.word	0x40004400

08005df0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005df4:	4b11      	ldr	r3, [pc, #68]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005df6:	4a12      	ldr	r2, [pc, #72]	@ (8005e40 <MX_USART3_UART_Init+0x50>)
 8005df8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005e00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e02:	4b0e      	ldr	r3, [pc, #56]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e08:	4b0c      	ldr	r3, [pc, #48]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e14:	4b09      	ldr	r3, [pc, #36]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e16:	220c      	movs	r2, #12
 8005e18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e1a:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e20:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e26:	4805      	ldr	r0, [pc, #20]	@ (8005e3c <MX_USART3_UART_Init+0x4c>)
 8005e28:	f003 f97c 	bl	8009124 <HAL_UART_Init>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005e32:	f000 f8f3 	bl	800601c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20008e30 	.word	0x20008e30
 8005e40:	40004800 	.word	0x40004800

08005e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	4b10      	ldr	r3, [pc, #64]	@ (8005e90 <MX_DMA_Init+0x4c>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	4a0f      	ldr	r2, [pc, #60]	@ (8005e90 <MX_DMA_Init+0x4c>)
 8005e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <MX_DMA_Init+0x4c>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005e66:	2200      	movs	r2, #0
 8005e68:	2100      	movs	r1, #0
 8005e6a:	200e      	movs	r0, #14
 8005e6c:	f001 f939 	bl	80070e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005e70:	200e      	movs	r0, #14
 8005e72:	f001 f952 	bl	800711a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	2011      	movs	r0, #17
 8005e7c:	f001 f931 	bl	80070e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005e80:	2011      	movs	r0, #17
 8005e82:	f001 f94a 	bl	800711a <HAL_NVIC_EnableIRQ>

}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	@ 0x28
 8005e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9a:	f107 0314 	add.w	r3, r7, #20
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
 8005ea6:	60da      	str	r2, [r3, #12]
 8005ea8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005eba:	4b49      	ldr	r3, [pc, #292]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	4b45      	ldr	r3, [pc, #276]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	4a44      	ldr	r2, [pc, #272]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ed6:	4b42      	ldr	r3, [pc, #264]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	4a3d      	ldr	r2, [pc, #244]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	4b37      	ldr	r3, [pc, #220]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f06:	4a36      	ldr	r2, [pc, #216]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005f08:	f043 0302 	orr.w	r3, r3, #2
 8005f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f0e:	4b34      	ldr	r3, [pc, #208]	@ (8005fe0 <MX_GPIO_Init+0x14c>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2182      	movs	r1, #130	@ 0x82
 8005f1e:	4831      	ldr	r0, [pc, #196]	@ (8005fe4 <MX_GPIO_Init+0x150>)
 8005f20:	f001 feac 	bl	8007c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8005f24:	2200      	movs	r2, #0
 8005f26:	f240 7113 	movw	r1, #1811	@ 0x713
 8005f2a:	482f      	ldr	r0, [pc, #188]	@ (8005fe8 <MX_GPIO_Init+0x154>)
 8005f2c:	f001 fea6 	bl	8007c7c <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8005f30:	2200      	movs	r2, #0
 8005f32:	f240 4139 	movw	r1, #1081	@ 0x439
 8005f36:	482d      	ldr	r0, [pc, #180]	@ (8005fec <MX_GPIO_Init+0x158>)
 8005f38:	f001 fea0 	bl	8007c7c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	2140      	movs	r1, #64	@ 0x40
 8005f40:	482a      	ldr	r0, [pc, #168]	@ (8005fec <MX_GPIO_Init+0x158>)
 8005f42:	f001 fe9b 	bl	8007c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f4c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005f56:	f107 0314 	add.w	r3, r7, #20
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4821      	ldr	r0, [pc, #132]	@ (8005fe4 <MX_GPIO_Init+0x150>)
 8005f5e:	f001 fcf9 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8005f62:	2382      	movs	r3, #130	@ 0x82
 8005f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f66:	2301      	movs	r3, #1
 8005f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f72:	f107 0314 	add.w	r3, r7, #20
 8005f76:	4619      	mov	r1, r3
 8005f78:	481a      	ldr	r0, [pc, #104]	@ (8005fe4 <MX_GPIO_Init+0x150>)
 8005f7a:	f001 fceb 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8005f7e:	f240 7313 	movw	r3, #1811	@ 0x713
 8005f82:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f84:	2301      	movs	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	4619      	mov	r1, r3
 8005f96:	4814      	ldr	r0, [pc, #80]	@ (8005fe8 <MX_GPIO_Init+0x154>)
 8005f98:	f001 fcdc 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8005f9c:	f240 4339 	movw	r3, #1081	@ 0x439
 8005fa0:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005faa:	2302      	movs	r3, #2
 8005fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fae:	f107 0314 	add.w	r3, r7, #20
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	480d      	ldr	r0, [pc, #52]	@ (8005fec <MX_GPIO_Init+0x158>)
 8005fb6:	f001 fccd 	bl	8007954 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 8005fba:	2340      	movs	r3, #64	@ 0x40
 8005fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4806      	ldr	r0, [pc, #24]	@ (8005fec <MX_GPIO_Init+0x158>)
 8005fd2:	f001 fcbf 	bl	8007954 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005fd6:	bf00      	nop
 8005fd8:	3728      	adds	r7, #40	@ 0x28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40020800 	.word	0x40020800
 8005fe8:	40020000 	.word	0x40020000
 8005fec:	40020400 	.word	0x40020400

08005ff0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 1000);
	received_input = 1;
 8005ff8:	4b05      	ldr	r3, [pc, #20]	@ (8006010 <HAL_UART_RxCpltCallback+0x20>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, input_controles, 1);
 8005ffe:	2201      	movs	r2, #1
 8006000:	4904      	ldr	r1, [pc, #16]	@ (8006014 <HAL_UART_RxCpltCallback+0x24>)
 8006002:	4805      	ldr	r0, [pc, #20]	@ (8006018 <HAL_UART_RxCpltCallback+0x28>)
 8006004:	f003 f8de 	bl	80091c4 <HAL_UART_Receive_IT>
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20009449 	.word	0x20009449
 8006014:	20009448 	.word	0x20009448
 8006018:	20008e30 	.word	0x20008e30

0800601c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006020:	b672      	cpsid	i
}
 8006022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <Error_Handler+0x8>

08006028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	607b      	str	r3, [r7, #4]
 8006032:	4b10      	ldr	r3, [pc, #64]	@ (8006074 <HAL_MspInit+0x4c>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	4a0f      	ldr	r2, [pc, #60]	@ (8006074 <HAL_MspInit+0x4c>)
 8006038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800603c:	6453      	str	r3, [r2, #68]	@ 0x44
 800603e:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <HAL_MspInit+0x4c>)
 8006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <HAL_MspInit+0x4c>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	4a08      	ldr	r2, [pc, #32]	@ (8006074 <HAL_MspInit+0x4c>)
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006058:	6413      	str	r3, [r2, #64]	@ 0x40
 800605a:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <HAL_MspInit+0x4c>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006066:	2007      	movs	r0, #7
 8006068:	f001 f830 	bl	80070cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40023800 	.word	0x40023800

08006078 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	@ 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <HAL_ADC_MspInit+0x7c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d127      	bne.n	80060ea <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	4b16      	ldr	r3, [pc, #88]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80060aa:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	4b0f      	ldr	r3, [pc, #60]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	4a0e      	ldr	r2, [pc, #56]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060c0:	f043 0304 	orr.w	r3, r3, #4
 80060c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c6:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <HAL_ADC_MspInit+0x80>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80060d2:	2310      	movs	r3, #16
 80060d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060d6:	2303      	movs	r3, #3
 80060d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	4619      	mov	r1, r3
 80060e4:	4805      	ldr	r0, [pc, #20]	@ (80060fc <HAL_ADC_MspInit+0x84>)
 80060e6:	f001 fc35 	bl	8007954 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80060ea:	bf00      	nop
 80060ec:	3728      	adds	r7, #40	@ 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40012000 	.word	0x40012000
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40020800 	.word	0x40020800

08006100 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a19      	ldr	r2, [pc, #100]	@ (8006184 <HAL_SPI_MspInit+0x84>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d12b      	bne.n	800617a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <HAL_SPI_MspInit+0x88>)
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <HAL_SPI_MspInit+0x88>)
 800612c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006130:	6453      	str	r3, [r2, #68]	@ 0x44
 8006132:	4b15      	ldr	r3, [pc, #84]	@ (8006188 <HAL_SPI_MspInit+0x88>)
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <HAL_SPI_MspInit+0x88>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	4a10      	ldr	r2, [pc, #64]	@ (8006188 <HAL_SPI_MspInit+0x88>)
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	6313      	str	r3, [r2, #48]	@ 0x30
 800614e:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <HAL_SPI_MspInit+0x88>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800615a:	23e0      	movs	r3, #224	@ 0xe0
 800615c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615e:	2302      	movs	r3, #2
 8006160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006166:	2303      	movs	r3, #3
 8006168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800616a:	2305      	movs	r3, #5
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4619      	mov	r1, r3
 8006174:	4805      	ldr	r0, [pc, #20]	@ (800618c <HAL_SPI_MspInit+0x8c>)
 8006176:	f001 fbed 	bl	8007954 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800617a:	bf00      	nop
 800617c:	3728      	adds	r7, #40	@ 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40013000 	.word	0x40013000
 8006188:	40023800 	.word	0x40023800
 800618c:	40020000 	.word	0x40020000

08006190 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	@ 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 031c 	add.w	r3, r7, #28
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a69      	ldr	r2, [pc, #420]	@ (8006354 <HAL_UART_MspInit+0x1c4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d162      	bne.n	8006278 <HAL_UART_MspInit+0xe8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	4b68      	ldr	r3, [pc, #416]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ba:	4a67      	ldr	r2, [pc, #412]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80061bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80061c2:	4b65      	ldr	r3, [pc, #404]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	4b61      	ldr	r3, [pc, #388]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	4a60      	ldr	r2, [pc, #384]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80061de:	4b5e      	ldr	r3, [pc, #376]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80061ea:	230c      	movs	r3, #12
 80061ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ee:	2302      	movs	r3, #2
 80061f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f6:	2303      	movs	r3, #3
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061fa:	2307      	movs	r3, #7
 80061fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061fe:	f107 031c 	add.w	r3, r7, #28
 8006202:	4619      	mov	r1, r3
 8006204:	4855      	ldr	r0, [pc, #340]	@ (800635c <HAL_UART_MspInit+0x1cc>)
 8006206:	f001 fba5 	bl	8007954 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800620a:	4b55      	ldr	r3, [pc, #340]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 800620c:	4a55      	ldr	r2, [pc, #340]	@ (8006364 <HAL_UART_MspInit+0x1d4>)
 800620e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006210:	4b53      	ldr	r3, [pc, #332]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006212:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006216:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006218:	4b51      	ldr	r3, [pc, #324]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 800621a:	2240      	movs	r2, #64	@ 0x40
 800621c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800621e:	4b50      	ldr	r3, [pc, #320]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006220:	2200      	movs	r2, #0
 8006222:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006224:	4b4e      	ldr	r3, [pc, #312]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006226:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800622a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800622c:	4b4c      	ldr	r3, [pc, #304]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 800622e:	2200      	movs	r2, #0
 8006230:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006232:	4b4b      	ldr	r3, [pc, #300]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006234:	2200      	movs	r2, #0
 8006236:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006238:	4b49      	ldr	r3, [pc, #292]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 800623a:	2200      	movs	r2, #0
 800623c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800623e:	4b48      	ldr	r3, [pc, #288]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006240:	2200      	movs	r2, #0
 8006242:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006244:	4b46      	ldr	r3, [pc, #280]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006246:	2200      	movs	r2, #0
 8006248:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800624a:	4845      	ldr	r0, [pc, #276]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 800624c:	f000 ff80 	bl	8007150 <HAL_DMA_Init>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006256:	f7ff fee1 	bl	800601c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a40      	ldr	r2, [pc, #256]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006260:	4a3f      	ldr	r2, [pc, #252]	@ (8006360 <HAL_UART_MspInit+0x1d0>)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006266:	2200      	movs	r2, #0
 8006268:	2100      	movs	r1, #0
 800626a:	2026      	movs	r0, #38	@ 0x26
 800626c:	f000 ff39 	bl	80070e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006270:	2026      	movs	r0, #38	@ 0x26
 8006272:	f000 ff52 	bl	800711a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8006276:	e068      	b.n	800634a <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART3)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3a      	ldr	r2, [pc, #232]	@ (8006368 <HAL_UART_MspInit+0x1d8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d163      	bne.n	800634a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	4b34      	ldr	r3, [pc, #208]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006290:	6413      	str	r3, [r2, #64]	@ 0x40
 8006292:	4b31      	ldr	r3, [pc, #196]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80062a8:	f043 0304 	orr.w	r3, r3, #4
 80062ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006358 <HAL_UART_MspInit+0x1c8>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80062ba:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80062be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c0:	2302      	movs	r3, #2
 80062c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c8:	2303      	movs	r3, #3
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80062cc:	2307      	movs	r3, #7
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062d0:	f107 031c 	add.w	r3, r7, #28
 80062d4:	4619      	mov	r1, r3
 80062d6:	4825      	ldr	r0, [pc, #148]	@ (800636c <HAL_UART_MspInit+0x1dc>)
 80062d8:	f001 fb3c 	bl	8007954 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80062dc:	4b24      	ldr	r3, [pc, #144]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 80062de:	4a25      	ldr	r2, [pc, #148]	@ (8006374 <HAL_UART_MspInit+0x1e4>)
 80062e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80062e2:	4b23      	ldr	r3, [pc, #140]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 80062e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80062e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062ea:	4b21      	ldr	r3, [pc, #132]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 80062ec:	2240      	movs	r2, #64	@ 0x40
 80062ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 80062f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 8006300:	2200      	movs	r2, #0
 8006302:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006304:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 8006306:	2200      	movs	r2, #0
 8006308:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800630a:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 800630c:	2200      	movs	r2, #0
 800630e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006310:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 8006312:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006316:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006318:	4b15      	ldr	r3, [pc, #84]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 800631a:	2200      	movs	r2, #0
 800631c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800631e:	4814      	ldr	r0, [pc, #80]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 8006320:	f000 ff16 	bl	8007150 <HAL_DMA_Init>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800632a:	f7ff fe77 	bl	800601c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a0f      	ldr	r2, [pc, #60]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 8006332:	639a      	str	r2, [r3, #56]	@ 0x38
 8006334:	4a0e      	ldr	r2, [pc, #56]	@ (8006370 <HAL_UART_MspInit+0x1e0>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	2027      	movs	r0, #39	@ 0x27
 8006340:	f000 fecf 	bl	80070e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006344:	2027      	movs	r0, #39	@ 0x27
 8006346:	f000 fee8 	bl	800711a <HAL_NVIC_EnableIRQ>
}
 800634a:	bf00      	nop
 800634c:	3730      	adds	r7, #48	@ 0x30
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40004400 	.word	0x40004400
 8006358:	40023800 	.word	0x40023800
 800635c:	40020000 	.word	0x40020000
 8006360:	20008e78 	.word	0x20008e78
 8006364:	400260a0 	.word	0x400260a0
 8006368:	40004800 	.word	0x40004800
 800636c:	40020800 	.word	0x40020800
 8006370:	20008ed8 	.word	0x20008ed8
 8006374:	40026058 	.word	0x40026058

08006378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <NMI_Handler+0x4>

08006380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm volatile(
 8006384:	f01e 0f04 	tst.w	lr, #4
 8006388:	bf0c      	ite	eq
 800638a:	f3ef 8008 	mrseq	r0, MSP
 800638e:	f3ef 8009 	mrsne	r0, PSP
 8006392:	6981      	ldr	r1, [r0, #24]
 8006394:	4a02      	ldr	r2, [pc, #8]	@ (80063a0 <HardFault_Handler+0x20>)
 8006396:	6011      	str	r1, [r2, #0]
 8006398:	be00      	bkpt	0x0000
 800639a:	e7fe      	b.n	800639a <HardFault_Handler+0x1a>

	    /* and stay here forever if you continue */
	    "B      .                \n"
	  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <HardFault_Handler+0x1c>
 80063a0:	20009810 	.word	0x20009810

080063a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <MemManage_Handler+0x4>

080063ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <BusFault_Handler+0x4>

080063b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <UsageFault_Handler+0x4>

080063bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063ce:	bf00      	nop
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063ea:	f000 f97f 	bl	80066ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063ee:	bf00      	nop
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80063f8:	4802      	ldr	r0, [pc, #8]	@ (8006404 <DMA1_Stream3_IRQHandler+0x10>)
 80063fa:	f001 f841 	bl	8007480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20008ed8 	.word	0x20008ed8

08006408 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800640c:	4802      	ldr	r0, [pc, #8]	@ (8006418 <DMA1_Stream6_IRQHandler+0x10>)
 800640e:	f001 f837 	bl	8007480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20008e78 	.word	0x20008e78

0800641c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006420:	4802      	ldr	r0, [pc, #8]	@ (800642c <USART2_IRQHandler+0x10>)
 8006422:	f002 ff65 	bl	80092f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20008de8 	.word	0x20008de8

08006430 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006434:	4802      	ldr	r0, [pc, #8]	@ (8006440 <USART3_IRQHandler+0x10>)
 8006436:	f002 ff5b 	bl	80092f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20008e30 	.word	0x20008e30

08006444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  return 1;
 8006448:	2301      	movs	r3, #1
}
 800644a:	4618      	mov	r0, r3
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <_kill>:

int _kill(int pid, int sig)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800645e:	f007 f85d 	bl	800d51c <__errno>
 8006462:	4603      	mov	r3, r0
 8006464:	2216      	movs	r2, #22
 8006466:	601a      	str	r2, [r3, #0]
  return -1;
 8006468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <_exit>:

void _exit (int status)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800647c:	f04f 31ff 	mov.w	r1, #4294967295
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ffe7 	bl	8006454 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <_exit+0x12>

0800648a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e00a      	b.n	80064b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800649c:	f3af 8000 	nop.w
 80064a0:	4601      	mov	r1, r0
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	60ba      	str	r2, [r7, #8]
 80064a8:	b2ca      	uxtb	r2, r1
 80064aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3301      	adds	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	dbf0      	blt.n	800649c <_read+0x12>
  }

  return len;
 80064ba:	687b      	ldr	r3, [r7, #4]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e009      	b.n	80064ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	60ba      	str	r2, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3301      	adds	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	dbf1      	blt.n	80064d6 <_write+0x12>
  }
  return len;
 80064f2:	687b      	ldr	r3, [r7, #4]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_close>:

int _close(int file)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006524:	605a      	str	r2, [r3, #4]
  return 0;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_isatty>:

int _isatty(int file)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800653c:	2301      	movs	r3, #1
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800656c:	4a14      	ldr	r2, [pc, #80]	@ (80065c0 <_sbrk+0x5c>)
 800656e:	4b15      	ldr	r3, [pc, #84]	@ (80065c4 <_sbrk+0x60>)
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006578:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <_sbrk+0x64>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006580:	4b11      	ldr	r3, [pc, #68]	@ (80065c8 <_sbrk+0x64>)
 8006582:	4a12      	ldr	r2, [pc, #72]	@ (80065cc <_sbrk+0x68>)
 8006584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006586:	4b10      	ldr	r3, [pc, #64]	@ (80065c8 <_sbrk+0x64>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	429a      	cmp	r2, r3
 8006592:	d207      	bcs.n	80065a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006594:	f006 ffc2 	bl	800d51c <__errno>
 8006598:	4603      	mov	r3, r0
 800659a:	220c      	movs	r2, #12
 800659c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	e009      	b.n	80065b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065a4:	4b08      	ldr	r3, [pc, #32]	@ (80065c8 <_sbrk+0x64>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065aa:	4b07      	ldr	r3, [pc, #28]	@ (80065c8 <_sbrk+0x64>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	4a05      	ldr	r2, [pc, #20]	@ (80065c8 <_sbrk+0x64>)
 80065b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065b6:	68fb      	ldr	r3, [r7, #12]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20020000 	.word	0x20020000
 80065c4:	00000400 	.word	0x00000400
 80065c8:	20009814 	.word	0x20009814
 80065cc:	20009ba8 	.word	0x20009ba8

080065d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <SystemInit+0x20>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065da:	4a05      	ldr	r2, [pc, #20]	@ (80065f0 <SystemInit+0x20>)
 80065dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	e000ed00 	.word	0xe000ed00

080065f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80065f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800662c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80065f8:	f7ff ffea 	bl	80065d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80065fc:	480c      	ldr	r0, [pc, #48]	@ (8006630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80065fe:	490d      	ldr	r1, [pc, #52]	@ (8006634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006600:	4a0d      	ldr	r2, [pc, #52]	@ (8006638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006604:	e002      	b.n	800660c <LoopCopyDataInit>

08006606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800660a:	3304      	adds	r3, #4

0800660c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800660c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800660e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006610:	d3f9      	bcc.n	8006606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006612:	4a0a      	ldr	r2, [pc, #40]	@ (800663c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006614:	4c0a      	ldr	r4, [pc, #40]	@ (8006640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006618:	e001      	b.n	800661e <LoopFillZerobss>

0800661a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800661a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800661c:	3204      	adds	r2, #4

0800661e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800661e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006620:	d3fb      	bcc.n	800661a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006622:	f006 ff81 	bl	800d528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006626:	f7fb fc27 	bl	8001e78 <main>
  bx  lr    
 800662a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800662c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006634:	20006cb4 	.word	0x20006cb4
  ldr r2, =_sidata
 8006638:	0801b774 	.word	0x0801b774
  ldr r2, =_sbss
 800663c:	20006cb4 	.word	0x20006cb4
  ldr r4, =_ebss
 8006640:	20009ba4 	.word	0x20009ba4

08006644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006644:	e7fe      	b.n	8006644 <ADC_IRQHandler>
	...

08006648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800664c:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <HAL_Init+0x40>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0d      	ldr	r2, [pc, #52]	@ (8006688 <HAL_Init+0x40>)
 8006652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006658:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <HAL_Init+0x40>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0a      	ldr	r2, [pc, #40]	@ (8006688 <HAL_Init+0x40>)
 800665e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006664:	4b08      	ldr	r3, [pc, #32]	@ (8006688 <HAL_Init+0x40>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a07      	ldr	r2, [pc, #28]	@ (8006688 <HAL_Init+0x40>)
 800666a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006670:	2003      	movs	r0, #3
 8006672:	f000 fd2b 	bl	80070cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006676:	2000      	movs	r0, #0
 8006678:	f000 f808 	bl	800668c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800667c:	f7ff fcd4 	bl	8006028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023c00 	.word	0x40023c00

0800668c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006694:	4b12      	ldr	r3, [pc, #72]	@ (80066e0 <HAL_InitTick+0x54>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <HAL_InitTick+0x58>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80066a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fd43 	bl	8007136 <HAL_SYSTICK_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e00e      	b.n	80066d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b0f      	cmp	r3, #15
 80066be:	d80a      	bhi.n	80066d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066c0:	2200      	movs	r2, #0
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	f000 fd0b 	bl	80070e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066cc:	4a06      	ldr	r2, [pc, #24]	@ (80066e8 <HAL_InitTick+0x5c>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20006c38 	.word	0x20006c38
 80066e4:	20006c40 	.word	0x20006c40
 80066e8:	20006c3c 	.word	0x20006c3c

080066ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066f0:	4b06      	ldr	r3, [pc, #24]	@ (800670c <HAL_IncTick+0x20>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_IncTick+0x24>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4413      	add	r3, r2
 80066fc:	4a04      	ldr	r2, [pc, #16]	@ (8006710 <HAL_IncTick+0x24>)
 80066fe:	6013      	str	r3, [r2, #0]
}
 8006700:	bf00      	nop
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20006c40 	.word	0x20006c40
 8006710:	20009818 	.word	0x20009818

08006714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return uwTick;
 8006718:	4b03      	ldr	r3, [pc, #12]	@ (8006728 <HAL_GetTick+0x14>)
 800671a:	681b      	ldr	r3, [r3, #0]
}
 800671c:	4618      	mov	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20009818 	.word	0x20009818

0800672c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006734:	f7ff ffee 	bl	8006714 <HAL_GetTick>
 8006738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d005      	beq.n	8006752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006746:	4b0a      	ldr	r3, [pc, #40]	@ (8006770 <HAL_Delay+0x44>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006752:	bf00      	nop
 8006754:	f7ff ffde 	bl	8006714 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	429a      	cmp	r2, r3
 8006762:	d8f7      	bhi.n	8006754 <HAL_Delay+0x28>
  {
  }
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20006c40 	.word	0x20006c40

08006774 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e033      	b.n	80067f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fc70 	bl	8006078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80067ba:	f023 0302 	bic.w	r3, r3, #2
 80067be:	f043 0202 	orr.w	r2, r3, #2
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fab4 	bl	8006d34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	f043 0201 	orr.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80067e2:	e001      	b.n	80067e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_ADC_Start+0x1a>
 8006812:	2302      	movs	r3, #2
 8006814:	e0b2      	b.n	800697c <HAL_ADC_Start+0x180>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d018      	beq.n	800685e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800683c:	4b52      	ldr	r3, [pc, #328]	@ (8006988 <HAL_ADC_Start+0x18c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a52      	ldr	r2, [pc, #328]	@ (800698c <HAL_ADC_Start+0x190>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	0c9a      	lsrs	r2, r3, #18
 8006848:	4613      	mov	r3, r2
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	4413      	add	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006850:	e002      	b.n	8006858 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	3b01      	subs	r3, #1
 8006856:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f9      	bne.n	8006852 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b01      	cmp	r3, #1
 800686a:	d17a      	bne.n	8006962 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006870:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006874:	f023 0301 	bic.w	r3, r3, #1
 8006878:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006896:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068aa:	d106      	bne.n	80068ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b0:	f023 0206 	bic.w	r2, r3, #6
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80068b8:	e002      	b.n	80068c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068c8:	4b31      	ldr	r3, [pc, #196]	@ (8006990 <HAL_ADC_Start+0x194>)
 80068ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80068d4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d12a      	bne.n	8006938 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006994 <HAL_ADC_Start+0x198>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d015      	beq.n	8006918 <HAL_ADC_Start+0x11c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a29      	ldr	r2, [pc, #164]	@ (8006998 <HAL_ADC_Start+0x19c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d105      	bne.n	8006902 <HAL_ADC_Start+0x106>
 80068f6:	4b26      	ldr	r3, [pc, #152]	@ (8006990 <HAL_ADC_Start+0x194>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a25      	ldr	r2, [pc, #148]	@ (800699c <HAL_ADC_Start+0x1a0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d136      	bne.n	800697a <HAL_ADC_Start+0x17e>
 800690c:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <HAL_ADC_Start+0x194>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d130      	bne.n	800697a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d129      	bne.n	800697a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006934:	609a      	str	r2, [r3, #8]
 8006936:	e020      	b.n	800697a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a15      	ldr	r2, [pc, #84]	@ (8006994 <HAL_ADC_Start+0x198>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d11b      	bne.n	800697a <HAL_ADC_Start+0x17e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d114      	bne.n	800697a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	e00b      	b.n	800697a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	f043 0210 	orr.w	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	f043 0201 	orr.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20006c38 	.word	0x20006c38
 800698c:	431bde83 	.word	0x431bde83
 8006990:	40012300 	.word	0x40012300
 8006994:	40012000 	.word	0x40012000
 8006998:	40012100 	.word	0x40012100
 800699c:	40012200 	.word	0x40012200

080069a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069bc:	d113      	bne.n	80069e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80069c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069cc:	d10b      	bne.n	80069e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e063      	b.n	8006aae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80069e6:	f7ff fe95 	bl	8006714 <HAL_GetTick>
 80069ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80069ec:	e021      	b.n	8006a32 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d01d      	beq.n	8006a32 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_ADC_PollForConversion+0x6c>
 80069fc:	f7ff fe8a 	bl	8006714 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d212      	bcs.n	8006a32 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d00b      	beq.n	8006a32 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	f043 0204 	orr.w	r2, r3, #4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e03d      	b.n	8006aae <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d1d6      	bne.n	80069ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0212 	mvn.w	r2, #18
 8006a48:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d123      	bne.n	8006aac <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11f      	bne.n	8006aac <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d006      	beq.n	8006a88 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d111      	bne.n	8006aac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x1c>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e113      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x244>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d925      	bls.n	8006b48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68d9      	ldr	r1, [r3, #12]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	3b1e      	subs	r3, #30
 8006b12:	2207      	movs	r2, #7
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	43da      	mvns	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	400a      	ands	r2, r1
 8006b20:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68d9      	ldr	r1, [r3, #12]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4618      	mov	r0, r3
 8006b34:	4603      	mov	r3, r0
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	4403      	add	r3, r0
 8006b3a:	3b1e      	subs	r3, #30
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	60da      	str	r2, [r3, #12]
 8006b46:	e022      	b.n	8006b8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6919      	ldr	r1, [r3, #16]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43da      	mvns	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	400a      	ands	r2, r1
 8006b6a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6919      	ldr	r1, [r3, #16]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4403      	add	r3, r0
 8006b84:	409a      	lsls	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b06      	cmp	r3, #6
 8006b94:	d824      	bhi.n	8006be0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3b05      	subs	r3, #5
 8006ba8:	221f      	movs	r2, #31
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43da      	mvns	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	3b05      	subs	r3, #5
 8006bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006bde:	e04c      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b0c      	cmp	r3, #12
 8006be6:	d824      	bhi.n	8006c32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3b23      	subs	r3, #35	@ 0x23
 8006bfa:	221f      	movs	r2, #31
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	43da      	mvns	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	400a      	ands	r2, r1
 8006c08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	4618      	mov	r0, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	3b23      	subs	r3, #35	@ 0x23
 8006c24:	fa00 f203 	lsl.w	r2, r0, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c30:	e023      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	3b41      	subs	r3, #65	@ 0x41
 8006c44:	221f      	movs	r2, #31
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43da      	mvns	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	400a      	ands	r2, r1
 8006c52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4618      	mov	r0, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3b41      	subs	r3, #65	@ 0x41
 8006c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c7a:	4b29      	ldr	r3, [pc, #164]	@ (8006d20 <HAL_ADC_ConfigChannel+0x250>)
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a28      	ldr	r2, [pc, #160]	@ (8006d24 <HAL_ADC_ConfigChannel+0x254>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10f      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x1d8>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b12      	cmp	r3, #18
 8006c8e:	d10b      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_ADC_ConfigChannel+0x254>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d12b      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x23a>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <HAL_ADC_ConfigChannel+0x258>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <HAL_ADC_ConfigChannel+0x1f4>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b11      	cmp	r3, #17
 8006cc2:	d122      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a11      	ldr	r2, [pc, #68]	@ (8006d28 <HAL_ADC_ConfigChannel+0x258>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d111      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ce6:	4b11      	ldr	r3, [pc, #68]	@ (8006d2c <HAL_ADC_ConfigChannel+0x25c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a11      	ldr	r2, [pc, #68]	@ (8006d30 <HAL_ADC_ConfigChannel+0x260>)
 8006cec:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf0:	0c9a      	lsrs	r2, r3, #18
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006cfc:	e002      	b.n	8006d04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f9      	bne.n	8006cfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	40012300 	.word	0x40012300
 8006d24:	40012000 	.word	0x40012000
 8006d28:	10000012 	.word	0x10000012
 8006d2c:	20006c38 	.word	0x20006c38
 8006d30:	431bde83 	.word	0x431bde83

08006d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d3c:	4b79      	ldr	r3, [pc, #484]	@ (8006f24 <ADC_Init+0x1f0>)
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6859      	ldr	r1, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	021a      	lsls	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6859      	ldr	r1, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6899      	ldr	r1, [r3, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc6:	4a58      	ldr	r2, [pc, #352]	@ (8006f28 <ADC_Init+0x1f4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6899      	ldr	r1, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6899      	ldr	r1, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
 8006e10:	e00f      	b.n	8006e32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006e30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0202 	bic.w	r2, r2, #2
 8006e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	7e1b      	ldrb	r3, [r3, #24]
 8006e4c:	005a      	lsls	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01b      	beq.n	8006e98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	035a      	lsls	r2, r3, #13
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	e007      	b.n	8006ea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	051a      	lsls	r2, r3, #20
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6899      	ldr	r1, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006eea:	025a      	lsls	r2, r3, #9
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6899      	ldr	r1, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	029a      	lsls	r2, r3, #10
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40012300 	.word	0x40012300
 8006f28:	0f000001 	.word	0x0f000001

08006f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f70 <__NVIC_SetPriorityGrouping+0x44>)
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f48:	4013      	ands	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f5e:	4a04      	ldr	r2, [pc, #16]	@ (8006f70 <__NVIC_SetPriorityGrouping+0x44>)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	60d3      	str	r3, [r2, #12]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	e000ed00 	.word	0xe000ed00

08006f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <__NVIC_GetPriorityGrouping+0x18>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	f003 0307 	and.w	r3, r3, #7
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	e000ed00 	.word	0xe000ed00

08006f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	db0b      	blt.n	8006fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	f003 021f 	and.w	r2, r3, #31
 8006fa8:	4907      	ldr	r1, [pc, #28]	@ (8006fc8 <__NVIC_EnableIRQ+0x38>)
 8006faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	e000e100 	.word	0xe000e100

08006fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	db0a      	blt.n	8006ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	490c      	ldr	r1, [pc, #48]	@ (8007018 <__NVIC_SetPriority+0x4c>)
 8006fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fea:	0112      	lsls	r2, r2, #4
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ff4:	e00a      	b.n	800700c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4908      	ldr	r1, [pc, #32]	@ (800701c <__NVIC_SetPriority+0x50>)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	3b04      	subs	r3, #4
 8007004:	0112      	lsls	r2, r2, #4
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	440b      	add	r3, r1
 800700a:	761a      	strb	r2, [r3, #24]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	e000e100 	.word	0xe000e100
 800701c:	e000ed00 	.word	0xe000ed00

08007020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007020:	b480      	push	{r7}
 8007022:	b089      	sub	sp, #36	@ 0x24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f1c3 0307 	rsb	r3, r3, #7
 800703a:	2b04      	cmp	r3, #4
 800703c:	bf28      	it	cs
 800703e:	2304      	movcs	r3, #4
 8007040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	3304      	adds	r3, #4
 8007046:	2b06      	cmp	r3, #6
 8007048:	d902      	bls.n	8007050 <NVIC_EncodePriority+0x30>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3b03      	subs	r3, #3
 800704e:	e000      	b.n	8007052 <NVIC_EncodePriority+0x32>
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007054:	f04f 32ff 	mov.w	r2, #4294967295
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43da      	mvns	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	401a      	ands	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007068:	f04f 31ff 	mov.w	r1, #4294967295
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	43d9      	mvns	r1, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007078:	4313      	orrs	r3, r2
         );
}
 800707a:	4618      	mov	r0, r3
 800707c:	3724      	adds	r7, #36	@ 0x24
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3b01      	subs	r3, #1
 8007094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007098:	d301      	bcc.n	800709e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800709a:	2301      	movs	r3, #1
 800709c:	e00f      	b.n	80070be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800709e:	4a0a      	ldr	r2, [pc, #40]	@ (80070c8 <SysTick_Config+0x40>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070a6:	210f      	movs	r1, #15
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	f7ff ff8e 	bl	8006fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070b0:	4b05      	ldr	r3, [pc, #20]	@ (80070c8 <SysTick_Config+0x40>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070b6:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <SysTick_Config+0x40>)
 80070b8:	2207      	movs	r2, #7
 80070ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	e000e010 	.word	0xe000e010

080070cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff29 	bl	8006f2c <__NVIC_SetPriorityGrouping>
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b086      	sub	sp, #24
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	4603      	mov	r3, r0
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80070f4:	f7ff ff3e 	bl	8006f74 <__NVIC_GetPriorityGrouping>
 80070f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	6978      	ldr	r0, [r7, #20]
 8007100:	f7ff ff8e 	bl	8007020 <NVIC_EncodePriority>
 8007104:	4602      	mov	r2, r0
 8007106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff ff5d 	bl	8006fcc <__NVIC_SetPriority>
}
 8007112:	bf00      	nop
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	4603      	mov	r3, r0
 8007122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff ff31 	bl	8006f90 <__NVIC_EnableIRQ>
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff ffa2 	bl	8007088 <SysTick_Config>
 8007144:	4603      	mov	r3, r0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800715c:	f7ff fada 	bl	8006714 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e099      	b.n	80072a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800718c:	e00f      	b.n	80071ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800718e:	f7ff fac1 	bl	8006714 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b05      	cmp	r3, #5
 800719a:	d908      	bls.n	80071ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2203      	movs	r2, #3
 80071a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e078      	b.n	80072a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e8      	bne.n	800718e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4b38      	ldr	r3, [pc, #224]	@ (80072a8 <HAL_DMA_Init+0x158>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	2b04      	cmp	r3, #4
 8007206:	d107      	bne.n	8007218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007210:	4313      	orrs	r3, r2
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0307 	bic.w	r3, r3, #7
 800722e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	2b04      	cmp	r3, #4
 8007240:	d117      	bne.n	8007272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00e      	beq.n	8007272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fb01 	bl	800785c <DMA_CheckFifoParam>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2240      	movs	r2, #64	@ 0x40
 8007264:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800726e:	2301      	movs	r3, #1
 8007270:	e016      	b.n	80072a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fab8 	bl	80077f0 <DMA_CalcBaseAndBitshift>
 8007280:	4603      	mov	r3, r0
 8007282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007288:	223f      	movs	r2, #63	@ 0x3f
 800728a:	409a      	lsls	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	f010803f 	.word	0xf010803f

080072ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_DMA_Start_IT+0x26>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e040      	b.n	8007354 <HAL_DMA_Start_IT+0xa8>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d12f      	bne.n	8007346 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fa4a 	bl	8007794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007304:	223f      	movs	r2, #63	@ 0x3f
 8007306:	409a      	lsls	r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0216 	orr.w	r2, r2, #22
 800731a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0208 	orr.w	r2, r2, #8
 8007332:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e005      	b.n	8007352 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800734e:	2302      	movs	r3, #2
 8007350:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007368:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800736a:	f7ff f9d3 	bl	8006714 <HAL_GetTick>
 800736e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d008      	beq.n	800738e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2280      	movs	r2, #128	@ 0x80
 8007380:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e052      	b.n	8007434 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0216 	bic.w	r2, r2, #22
 800739c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <HAL_DMA_Abort+0x62>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0208 	bic.w	r2, r2, #8
 80073cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0201 	bic.w	r2, r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073de:	e013      	b.n	8007408 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073e0:	f7ff f998 	bl	8006714 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d90c      	bls.n	8007408 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e015      	b.n	8007434 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e4      	bne.n	80073e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	223f      	movs	r2, #63	@ 0x3f
 800741c:	409a      	lsls	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d004      	beq.n	800745a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2280      	movs	r2, #128	@ 0x80
 8007454:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e00c      	b.n	8007474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2205      	movs	r2, #5
 800745e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800748c:	4b8e      	ldr	r3, [pc, #568]	@ (80076c8 <HAL_DMA_IRQHandler+0x248>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a8e      	ldr	r2, [pc, #568]	@ (80076cc <HAL_DMA_IRQHandler+0x24c>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	0a9b      	lsrs	r3, r3, #10
 8007498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074aa:	2208      	movs	r2, #8
 80074ac:	409a      	lsls	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01a      	beq.n	80074ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d013      	beq.n	80074ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0204 	bic.w	r2, r2, #4
 80074d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d8:	2208      	movs	r2, #8
 80074da:	409a      	lsls	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	f043 0201 	orr.w	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f0:	2201      	movs	r2, #1
 80074f2:	409a      	lsls	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750e:	2201      	movs	r2, #1
 8007510:	409a      	lsls	r2, r3
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751a:	f043 0202 	orr.w	r2, r3, #2
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007526:	2204      	movs	r2, #4
 8007528:	409a      	lsls	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4013      	ands	r3, r2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d012      	beq.n	8007558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007544:	2204      	movs	r2, #4
 8007546:	409a      	lsls	r2, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007550:	f043 0204 	orr.w	r2, r3, #4
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755c:	2210      	movs	r2, #16
 800755e:	409a      	lsls	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d043      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d03c      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757a:	2210      	movs	r2, #16
 800757c:	409a      	lsls	r2, r3
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d018      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d108      	bne.n	80075b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d024      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
 80075ae:	e01f      	b.n	80075f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01b      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
 80075c0:	e016      	b.n	80075f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d107      	bne.n	80075e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0208 	bic.w	r2, r2, #8
 80075de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f4:	2220      	movs	r2, #32
 80075f6:	409a      	lsls	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 808f 	beq.w	8007720 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8087 	beq.w	8007720 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007616:	2220      	movs	r2, #32
 8007618:	409a      	lsls	r2, r3
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b05      	cmp	r3, #5
 8007628:	d136      	bne.n	8007698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0216 	bic.w	r2, r2, #22
 8007638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <HAL_DMA_IRQHandler+0x1da>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0208 	bic.w	r2, r2, #8
 8007668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800766e:	223f      	movs	r2, #63	@ 0x3f
 8007670:	409a      	lsls	r2, r3
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768a:	2b00      	cmp	r3, #0
 800768c:	d07e      	beq.n	800778c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
        }
        return;
 8007696:	e079      	b.n	800778c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01d      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d031      	beq.n	8007720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
 80076c4:	e02c      	b.n	8007720 <HAL_DMA_IRQHandler+0x2a0>
 80076c6:	bf00      	nop
 80076c8:	20006c38 	.word	0x20006c38
 80076cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d023      	beq.n	8007720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	e01e      	b.n	8007720 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10f      	bne.n	8007710 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0210 	bic.w	r2, r2, #16
 80076fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007724:	2b00      	cmp	r3, #0
 8007726:	d032      	beq.n	800778e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d022      	beq.n	800777a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2205      	movs	r2, #5
 8007738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3301      	adds	r3, #1
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	429a      	cmp	r2, r3
 8007756:	d307      	bcc.n	8007768 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f2      	bne.n	800774c <HAL_DMA_IRQHandler+0x2cc>
 8007766:	e000      	b.n	800776a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007768:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
 800778a:	e000      	b.n	800778e <HAL_DMA_IRQHandler+0x30e>
        return;
 800778c:	bf00      	nop
    }
  }
}
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b40      	cmp	r3, #64	@ 0x40
 80077c0:	d108      	bne.n	80077d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80077d2:	e007      	b.n	80077e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	3b10      	subs	r3, #16
 8007800:	4a14      	ldr	r2, [pc, #80]	@ (8007854 <DMA_CalcBaseAndBitshift+0x64>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800780a:	4a13      	ldr	r2, [pc, #76]	@ (8007858 <DMA_CalcBaseAndBitshift+0x68>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b03      	cmp	r3, #3
 800781c:	d909      	bls.n	8007832 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007830:	e007      	b.n	8007842 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	aaaaaaab 	.word	0xaaaaaaab
 8007858:	0801b23c 	.word	0x0801b23c

0800785c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d11f      	bne.n	80078b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d856      	bhi.n	800792a <DMA_CheckFifoParam+0xce>
 800787c:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <DMA_CheckFifoParam+0x28>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007895 	.word	0x08007895
 8007888:	080078a7 	.word	0x080078a7
 800788c:	08007895 	.word	0x08007895
 8007890:	0800792b 	.word	0x0800792b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d046      	beq.n	800792e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a4:	e043      	b.n	800792e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078ae:	d140      	bne.n	8007932 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078b4:	e03d      	b.n	8007932 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078be:	d121      	bne.n	8007904 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d837      	bhi.n	8007936 <DMA_CheckFifoParam+0xda>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <DMA_CheckFifoParam+0x70>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	080078e3 	.word	0x080078e3
 80078d4:	080078dd 	.word	0x080078dd
 80078d8:	080078f5 	.word	0x080078f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
      break;
 80078e0:	e030      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d025      	beq.n	800793a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078f2:	e022      	b.n	800793a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078fc:	d11f      	bne.n	800793e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007902:	e01c      	b.n	800793e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d903      	bls.n	8007912 <DMA_CheckFifoParam+0xb6>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d003      	beq.n	8007918 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007910:	e018      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	73fb      	strb	r3, [r7, #15]
      break;
 8007916:	e015      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00e      	beq.n	8007942 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]
      break;
 8007928:	e00b      	b.n	8007942 <DMA_CheckFifoParam+0xe6>
      break;
 800792a:	bf00      	nop
 800792c:	e00a      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      break;
 800792e:	bf00      	nop
 8007930:	e008      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      break;
 8007932:	bf00      	nop
 8007934:	e006      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      break;
 8007936:	bf00      	nop
 8007938:	e004      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      break;
 800793a:	bf00      	nop
 800793c:	e002      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      break;   
 800793e:	bf00      	nop
 8007940:	e000      	b.n	8007944 <DMA_CheckFifoParam+0xe8>
      break;
 8007942:	bf00      	nop
    }
  } 
  
  return status; 
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop

08007954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007954:	b480      	push	{r7}
 8007956:	b089      	sub	sp, #36	@ 0x24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007962:	2300      	movs	r3, #0
 8007964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007966:	2300      	movs	r3, #0
 8007968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	e165      	b.n	8007c3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007970:	2201      	movs	r2, #1
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	4013      	ands	r3, r2
 8007982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	429a      	cmp	r2, r3
 800798a:	f040 8154 	bne.w	8007c36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b01      	cmp	r3, #1
 8007998:	d005      	beq.n	80079a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d130      	bne.n	8007a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	2203      	movs	r2, #3
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4013      	ands	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079dc:	2201      	movs	r2, #1
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	43db      	mvns	r3, r3
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	4013      	ands	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	f003 0201 	and.w	r2, r3, #1
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d017      	beq.n	8007a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	2203      	movs	r2, #3
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	43db      	mvns	r3, r3
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d123      	bne.n	8007a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	08da      	lsrs	r2, r3, #3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3208      	adds	r2, #8
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	220f      	movs	r2, #15
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	4013      	ands	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	fa02 f303 	lsl.w	r3, r2, r3
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	08da      	lsrs	r2, r3, #3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3208      	adds	r2, #8
 8007a92:	69b9      	ldr	r1, [r7, #24]
 8007a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f003 0203 	and.w	r2, r3, #3
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80ae 	beq.w	8007c36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	4b5d      	ldr	r3, [pc, #372]	@ (8007c54 <HAL_GPIO_Init+0x300>)
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8007c54 <HAL_GPIO_Init+0x300>)
 8007ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007aea:	4b5a      	ldr	r3, [pc, #360]	@ (8007c54 <HAL_GPIO_Init+0x300>)
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007af6:	4a58      	ldr	r2, [pc, #352]	@ (8007c58 <HAL_GPIO_Init+0x304>)
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	3302      	adds	r3, #2
 8007afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	220f      	movs	r2, #15
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4013      	ands	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8007c5c <HAL_GPIO_Init+0x308>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d025      	beq.n	8007b6e <HAL_GPIO_Init+0x21a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a4e      	ldr	r2, [pc, #312]	@ (8007c60 <HAL_GPIO_Init+0x30c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d01f      	beq.n	8007b6a <HAL_GPIO_Init+0x216>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8007c64 <HAL_GPIO_Init+0x310>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d019      	beq.n	8007b66 <HAL_GPIO_Init+0x212>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a4c      	ldr	r2, [pc, #304]	@ (8007c68 <HAL_GPIO_Init+0x314>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_GPIO_Init+0x20e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8007c6c <HAL_GPIO_Init+0x318>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00d      	beq.n	8007b5e <HAL_GPIO_Init+0x20a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a4a      	ldr	r2, [pc, #296]	@ (8007c70 <HAL_GPIO_Init+0x31c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d007      	beq.n	8007b5a <HAL_GPIO_Init+0x206>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a49      	ldr	r2, [pc, #292]	@ (8007c74 <HAL_GPIO_Init+0x320>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d101      	bne.n	8007b56 <HAL_GPIO_Init+0x202>
 8007b52:	2306      	movs	r3, #6
 8007b54:	e00c      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b56:	2307      	movs	r3, #7
 8007b58:	e00a      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b5a:	2305      	movs	r3, #5
 8007b5c:	e008      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b5e:	2304      	movs	r3, #4
 8007b60:	e006      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b62:	2303      	movs	r3, #3
 8007b64:	e004      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e002      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <HAL_GPIO_Init+0x21c>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	f002 0203 	and.w	r2, r2, #3
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	4093      	lsls	r3, r2
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b80:	4935      	ldr	r1, [pc, #212]	@ (8007c58 <HAL_GPIO_Init+0x304>)
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	089b      	lsrs	r3, r3, #2
 8007b86:	3302      	adds	r3, #2
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	43db      	mvns	r3, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bb2:	4a31      	ldr	r2, [pc, #196]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bdc:	4a26      	ldr	r2, [pc, #152]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007be2:	4b25      	ldr	r3, [pc, #148]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	43db      	mvns	r3, r3
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c06:	4a1c      	ldr	r2, [pc, #112]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	43db      	mvns	r3, r3
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c30:	4a11      	ldr	r2, [pc, #68]	@ (8007c78 <HAL_GPIO_Init+0x324>)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	2b0f      	cmp	r3, #15
 8007c40:	f67f ae96 	bls.w	8007970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	3724      	adds	r7, #36	@ 0x24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40023800 	.word	0x40023800
 8007c58:	40013800 	.word	0x40013800
 8007c5c:	40020000 	.word	0x40020000
 8007c60:	40020400 	.word	0x40020400
 8007c64:	40020800 	.word	0x40020800
 8007c68:	40020c00 	.word	0x40020c00
 8007c6c:	40021000 	.word	0x40021000
 8007c70:	40021400 	.word	0x40021400
 8007c74:	40021800 	.word	0x40021800
 8007c78:	40013c00 	.word	0x40013c00

08007c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	807b      	strh	r3, [r7, #2]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c8c:	787b      	ldrb	r3, [r7, #1]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c92:	887a      	ldrh	r2, [r7, #2]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c98:	e003      	b.n	8007ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c9a:	887b      	ldrh	r3, [r7, #2]
 8007c9c:	041a      	lsls	r2, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	619a      	str	r2, [r3, #24]
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0cc      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cc4:	4b68      	ldr	r3, [pc, #416]	@ (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d90c      	bls.n	8007cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd2:	4b65      	ldr	r3, [pc, #404]	@ (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cda:	4b63      	ldr	r3, [pc, #396]	@ (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d001      	beq.n	8007cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0b8      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d020      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d04:	4b59      	ldr	r3, [pc, #356]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	4a58      	ldr	r2, [pc, #352]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d1c:	4b53      	ldr	r3, [pc, #332]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	4a52      	ldr	r2, [pc, #328]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d28:	4b50      	ldr	r3, [pc, #320]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	494d      	ldr	r1, [pc, #308]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d044      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d107      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4e:	4b47      	ldr	r3, [pc, #284]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d119      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e07f      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d003      	beq.n	8007d6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e06f      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e067      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d8e:	4b37      	ldr	r3, [pc, #220]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f023 0203 	bic.w	r2, r3, #3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4934      	ldr	r1, [pc, #208]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007da0:	f7fe fcb8 	bl	8006714 <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da6:	e00a      	b.n	8007dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007da8:	f7fe fcb4 	bl	8006714 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e04f      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 020c 	and.w	r2, r3, #12
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d1eb      	bne.n	8007da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007dd0:	4b25      	ldr	r3, [pc, #148]	@ (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d20c      	bcs.n	8007df8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dde:	4b22      	ldr	r3, [pc, #136]	@ (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de6:	4b20      	ldr	r3, [pc, #128]	@ (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d001      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e032      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d008      	beq.n	8007e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e04:	4b19      	ldr	r3, [pc, #100]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4916      	ldr	r1, [pc, #88]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e22:	4b12      	ldr	r3, [pc, #72]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	490e      	ldr	r1, [pc, #56]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e36:	f000 f855 	bl	8007ee4 <HAL_RCC_GetSysClockFreq>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	091b      	lsrs	r3, r3, #4
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	490a      	ldr	r1, [pc, #40]	@ (8007e70 <HAL_RCC_ClockConfig+0x1c0>)
 8007e48:	5ccb      	ldrb	r3, [r1, r3]
 8007e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4e:	4a09      	ldr	r2, [pc, #36]	@ (8007e74 <HAL_RCC_ClockConfig+0x1c4>)
 8007e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007e52:	4b09      	ldr	r3, [pc, #36]	@ (8007e78 <HAL_RCC_ClockConfig+0x1c8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fc18 	bl	800668c <HAL_InitTick>

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40023c00 	.word	0x40023c00
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	0801b224 	.word	0x0801b224
 8007e74:	20006c38 	.word	0x20006c38
 8007e78:	20006c3c 	.word	0x20006c3c

08007e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e80:	4b03      	ldr	r3, [pc, #12]	@ (8007e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e82:	681b      	ldr	r3, [r3, #0]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20006c38 	.word	0x20006c38

08007e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e98:	f7ff fff0 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	4b05      	ldr	r3, [pc, #20]	@ (8007eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	0a9b      	lsrs	r3, r3, #10
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	4903      	ldr	r1, [pc, #12]	@ (8007eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eaa:	5ccb      	ldrb	r3, [r1, r3]
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	0801b234 	.word	0x0801b234

08007ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ec0:	f7ff ffdc 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	0b5b      	lsrs	r3, r3, #13
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	4903      	ldr	r1, [pc, #12]	@ (8007ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ed2:	5ccb      	ldrb	r3, [r1, r3]
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	0801b234 	.word	0x0801b234

08007ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee8:	b0ae      	sub	sp, #184	@ 0xb8
 8007eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f0a:	4bcb      	ldr	r3, [pc, #812]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	2b0c      	cmp	r3, #12
 8007f14:	f200 8206 	bhi.w	8008324 <HAL_RCC_GetSysClockFreq+0x440>
 8007f18:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f55 	.word	0x08007f55
 8007f24:	08008325 	.word	0x08008325
 8007f28:	08008325 	.word	0x08008325
 8007f2c:	08008325 	.word	0x08008325
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	08008325 	.word	0x08008325
 8007f38:	08008325 	.word	0x08008325
 8007f3c:	08008325 	.word	0x08008325
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08008325 	.word	0x08008325
 8007f48:	08008325 	.word	0x08008325
 8007f4c:	08008325 	.word	0x08008325
 8007f50:	08008155 	.word	0x08008155
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f54:	4bb9      	ldr	r3, [pc, #740]	@ (800823c <HAL_RCC_GetSysClockFreq+0x358>)
 8007f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f5a:	e1e7      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f5c:	4bb8      	ldr	r3, [pc, #736]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f62:	e1e3      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f64:	4bb4      	ldr	r3, [pc, #720]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f70:	4bb1      	ldr	r3, [pc, #708]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d071      	beq.n	8008060 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f7c:	4bae      	ldr	r3, [pc, #696]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	099b      	lsrs	r3, r3, #6
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	f04f 0000 	mov.w	r0, #0
 8007faa:	f04f 0100 	mov.w	r1, #0
 8007fae:	0159      	lsls	r1, r3, #5
 8007fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fb4:	0150      	lsls	r0, r2, #5
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4621      	mov	r1, r4
 8007fbc:	1a51      	subs	r1, r2, r1
 8007fbe:	6439      	str	r1, [r7, #64]	@ 0x40
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	018b      	lsls	r3, r1, #6
 8007fd8:	4641      	mov	r1, r8
 8007fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fde:	4641      	mov	r1, r8
 8007fe0:	018a      	lsls	r2, r1, #6
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	1a51      	subs	r1, r2, r1
 8007fe6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fe8:	4649      	mov	r1, r9
 8007fea:	eb63 0301 	sbc.w	r3, r3, r1
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	00cb      	lsls	r3, r1, #3
 8008000:	4641      	mov	r1, r8
 8008002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008006:	4641      	mov	r1, r8
 8008008:	00ca      	lsls	r2, r1, #3
 800800a:	4610      	mov	r0, r2
 800800c:	4619      	mov	r1, r3
 800800e:	4603      	mov	r3, r0
 8008010:	4622      	mov	r2, r4
 8008012:	189b      	adds	r3, r3, r2
 8008014:	633b      	str	r3, [r7, #48]	@ 0x30
 8008016:	462b      	mov	r3, r5
 8008018:	460a      	mov	r2, r1
 800801a:	eb42 0303 	adc.w	r3, r2, r3
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800802c:	4629      	mov	r1, r5
 800802e:	024b      	lsls	r3, r1, #9
 8008030:	4621      	mov	r1, r4
 8008032:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008036:	4621      	mov	r1, r4
 8008038:	024a      	lsls	r2, r1, #9
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008042:	2200      	movs	r2, #0
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008048:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800804c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008050:	f7f8 f92e 	bl	80002b0 <__aeabi_uldivmod>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4613      	mov	r3, r2
 800805a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800805e:	e067      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008060:	4b75      	ldr	r3, [pc, #468]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	099b      	lsrs	r3, r3, #6
 8008066:	2200      	movs	r2, #0
 8008068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800806c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008070:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800807a:	2300      	movs	r3, #0
 800807c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800807e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008082:	4622      	mov	r2, r4
 8008084:	462b      	mov	r3, r5
 8008086:	f04f 0000 	mov.w	r0, #0
 800808a:	f04f 0100 	mov.w	r1, #0
 800808e:	0159      	lsls	r1, r3, #5
 8008090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008094:	0150      	lsls	r0, r2, #5
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4621      	mov	r1, r4
 800809c:	1a51      	subs	r1, r2, r1
 800809e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080a0:	4629      	mov	r1, r5
 80080a2:	eb63 0301 	sbc.w	r3, r3, r1
 80080a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80080b4:	4649      	mov	r1, r9
 80080b6:	018b      	lsls	r3, r1, #6
 80080b8:	4641      	mov	r1, r8
 80080ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080be:	4641      	mov	r1, r8
 80080c0:	018a      	lsls	r2, r1, #6
 80080c2:	4641      	mov	r1, r8
 80080c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80080c8:	4649      	mov	r1, r9
 80080ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080e2:	4692      	mov	sl, r2
 80080e4:	469b      	mov	fp, r3
 80080e6:	4623      	mov	r3, r4
 80080e8:	eb1a 0303 	adds.w	r3, sl, r3
 80080ec:	623b      	str	r3, [r7, #32]
 80080ee:	462b      	mov	r3, r5
 80080f0:	eb4b 0303 	adc.w	r3, fp, r3
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008102:	4629      	mov	r1, r5
 8008104:	028b      	lsls	r3, r1, #10
 8008106:	4621      	mov	r1, r4
 8008108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800810c:	4621      	mov	r1, r4
 800810e:	028a      	lsls	r2, r1, #10
 8008110:	4610      	mov	r0, r2
 8008112:	4619      	mov	r1, r3
 8008114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008118:	2200      	movs	r2, #0
 800811a:	673b      	str	r3, [r7, #112]	@ 0x70
 800811c:	677a      	str	r2, [r7, #116]	@ 0x74
 800811e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008122:	f7f8 f8c5 	bl	80002b0 <__aeabi_uldivmod>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4613      	mov	r3, r2
 800812c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008130:	4b41      	ldr	r3, [pc, #260]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	3301      	adds	r3, #1
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800814a:	fbb2 f3f3 	udiv	r3, r2, r3
 800814e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008152:	e0eb      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008154:	4b38      	ldr	r3, [pc, #224]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800815c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008160:	4b35      	ldr	r3, [pc, #212]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d06b      	beq.n	8008244 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800816c:	4b32      	ldr	r3, [pc, #200]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x354>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	099b      	lsrs	r3, r3, #6
 8008172:	2200      	movs	r2, #0
 8008174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008176:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008180:	2300      	movs	r3, #0
 8008182:	667b      	str	r3, [r7, #100]	@ 0x64
 8008184:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008188:	4622      	mov	r2, r4
 800818a:	462b      	mov	r3, r5
 800818c:	f04f 0000 	mov.w	r0, #0
 8008190:	f04f 0100 	mov.w	r1, #0
 8008194:	0159      	lsls	r1, r3, #5
 8008196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800819a:	0150      	lsls	r0, r2, #5
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4621      	mov	r1, r4
 80081a2:	1a51      	subs	r1, r2, r1
 80081a4:	61b9      	str	r1, [r7, #24]
 80081a6:	4629      	mov	r1, r5
 80081a8:	eb63 0301 	sbc.w	r3, r3, r1
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	f04f 0300 	mov.w	r3, #0
 80081b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80081ba:	4659      	mov	r1, fp
 80081bc:	018b      	lsls	r3, r1, #6
 80081be:	4651      	mov	r1, sl
 80081c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081c4:	4651      	mov	r1, sl
 80081c6:	018a      	lsls	r2, r1, #6
 80081c8:	4651      	mov	r1, sl
 80081ca:	ebb2 0801 	subs.w	r8, r2, r1
 80081ce:	4659      	mov	r1, fp
 80081d0:	eb63 0901 	sbc.w	r9, r3, r1
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081e8:	4690      	mov	r8, r2
 80081ea:	4699      	mov	r9, r3
 80081ec:	4623      	mov	r3, r4
 80081ee:	eb18 0303 	adds.w	r3, r8, r3
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	462b      	mov	r3, r5
 80081f6:	eb49 0303 	adc.w	r3, r9, r3
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008208:	4629      	mov	r1, r5
 800820a:	024b      	lsls	r3, r1, #9
 800820c:	4621      	mov	r1, r4
 800820e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008212:	4621      	mov	r1, r4
 8008214:	024a      	lsls	r2, r1, #9
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800821e:	2200      	movs	r2, #0
 8008220:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008222:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008224:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008228:	f7f8 f842 	bl	80002b0 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4613      	mov	r3, r2
 8008232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008236:	e065      	b.n	8008304 <HAL_RCC_GetSysClockFreq+0x420>
 8008238:	40023800 	.word	0x40023800
 800823c:	00f42400 	.word	0x00f42400
 8008240:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008244:	4b3d      	ldr	r3, [pc, #244]	@ (800833c <HAL_RCC_GetSysClockFreq+0x458>)
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	099b      	lsrs	r3, r3, #6
 800824a:	2200      	movs	r2, #0
 800824c:	4618      	mov	r0, r3
 800824e:	4611      	mov	r1, r2
 8008250:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008254:	653b      	str	r3, [r7, #80]	@ 0x50
 8008256:	2300      	movs	r3, #0
 8008258:	657b      	str	r3, [r7, #84]	@ 0x54
 800825a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	f04f 0000 	mov.w	r0, #0
 8008266:	f04f 0100 	mov.w	r1, #0
 800826a:	0159      	lsls	r1, r3, #5
 800826c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008270:	0150      	lsls	r0, r2, #5
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4641      	mov	r1, r8
 8008278:	1a51      	subs	r1, r2, r1
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4649      	mov	r1, r9
 800827e:	eb63 0301 	sbc.w	r3, r3, r1
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008290:	4659      	mov	r1, fp
 8008292:	018b      	lsls	r3, r1, #6
 8008294:	4651      	mov	r1, sl
 8008296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800829a:	4651      	mov	r1, sl
 800829c:	018a      	lsls	r2, r1, #6
 800829e:	4651      	mov	r1, sl
 80082a0:	1a54      	subs	r4, r2, r1
 80082a2:	4659      	mov	r1, fp
 80082a4:	eb63 0501 	sbc.w	r5, r3, r1
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	00eb      	lsls	r3, r5, #3
 80082b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082b6:	00e2      	lsls	r2, r4, #3
 80082b8:	4614      	mov	r4, r2
 80082ba:	461d      	mov	r5, r3
 80082bc:	4643      	mov	r3, r8
 80082be:	18e3      	adds	r3, r4, r3
 80082c0:	603b      	str	r3, [r7, #0]
 80082c2:	464b      	mov	r3, r9
 80082c4:	eb45 0303 	adc.w	r3, r5, r3
 80082c8:	607b      	str	r3, [r7, #4]
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	f04f 0300 	mov.w	r3, #0
 80082d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082d6:	4629      	mov	r1, r5
 80082d8:	028b      	lsls	r3, r1, #10
 80082da:	4621      	mov	r1, r4
 80082dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082e0:	4621      	mov	r1, r4
 80082e2:	028a      	lsls	r2, r1, #10
 80082e4:	4610      	mov	r0, r2
 80082e6:	4619      	mov	r1, r3
 80082e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ec:	2200      	movs	r2, #0
 80082ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80082f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80082f6:	f7f7 ffdb 	bl	80002b0 <__aeabi_uldivmod>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4613      	mov	r3, r2
 8008300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008304:	4b0d      	ldr	r3, [pc, #52]	@ (800833c <HAL_RCC_GetSysClockFreq+0x458>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	0f1b      	lsrs	r3, r3, #28
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800831a:	fbb2 f3f3 	udiv	r3, r2, r3
 800831e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008322:	e003      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008324:	4b06      	ldr	r3, [pc, #24]	@ (8008340 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008326:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800832a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800832c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008330:	4618      	mov	r0, r3
 8008332:	37b8      	adds	r7, #184	@ 0xb8
 8008334:	46bd      	mov	sp, r7
 8008336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833a:	bf00      	nop
 800833c:	40023800 	.word	0x40023800
 8008340:	00f42400 	.word	0x00f42400

08008344 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e28d      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8083 	beq.w	800846a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008364:	4b94      	ldr	r3, [pc, #592]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 030c 	and.w	r3, r3, #12
 800836c:	2b04      	cmp	r3, #4
 800836e:	d019      	beq.n	80083a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008370:	4b91      	ldr	r3, [pc, #580]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f003 030c 	and.w	r3, r3, #12
        || \
 8008378:	2b08      	cmp	r3, #8
 800837a:	d106      	bne.n	800838a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800837c:	4b8e      	ldr	r3, [pc, #568]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008388:	d00c      	beq.n	80083a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800838a:	4b8b      	ldr	r3, [pc, #556]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008392:	2b0c      	cmp	r3, #12
 8008394:	d112      	bne.n	80083bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008396:	4b88      	ldr	r3, [pc, #544]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800839e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083a2:	d10b      	bne.n	80083bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a4:	4b84      	ldr	r3, [pc, #528]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d05b      	beq.n	8008468 <HAL_RCC_OscConfig+0x124>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d157      	bne.n	8008468 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e25a      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c4:	d106      	bne.n	80083d4 <HAL_RCC_OscConfig+0x90>
 80083c6:	4b7c      	ldr	r3, [pc, #496]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a7b      	ldr	r2, [pc, #492]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e01d      	b.n	8008410 <HAL_RCC_OscConfig+0xcc>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCC_OscConfig+0xb4>
 80083de:	4b76      	ldr	r3, [pc, #472]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a75      	ldr	r2, [pc, #468]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	4b73      	ldr	r3, [pc, #460]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a72      	ldr	r2, [pc, #456]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	e00b      	b.n	8008410 <HAL_RCC_OscConfig+0xcc>
 80083f8:	4b6f      	ldr	r3, [pc, #444]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a6e      	ldr	r2, [pc, #440]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80083fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	4b6c      	ldr	r3, [pc, #432]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6b      	ldr	r2, [pc, #428]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800840a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800840e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d013      	beq.n	8008440 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fe f97c 	bl	8006714 <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008420:	f7fe f978 	bl	8006714 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b64      	cmp	r3, #100	@ 0x64
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e21f      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008432:	4b61      	ldr	r3, [pc, #388]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f0      	beq.n	8008420 <HAL_RCC_OscConfig+0xdc>
 800843e:	e014      	b.n	800846a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fe f968 	bl	8006714 <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008448:	f7fe f964 	bl	8006714 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b64      	cmp	r3, #100	@ 0x64
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e20b      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800845a:	4b57      	ldr	r3, [pc, #348]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x104>
 8008466:	e000      	b.n	800846a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d06f      	beq.n	8008556 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008476:	4b50      	ldr	r3, [pc, #320]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 030c 	and.w	r3, r3, #12
 800847e:	2b00      	cmp	r3, #0
 8008480:	d017      	beq.n	80084b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008482:	4b4d      	ldr	r3, [pc, #308]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 030c 	and.w	r3, r3, #12
        || \
 800848a:	2b08      	cmp	r3, #8
 800848c:	d105      	bne.n	800849a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800848e:	4b4a      	ldr	r3, [pc, #296]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00b      	beq.n	80084b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800849a:	4b47      	ldr	r3, [pc, #284]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80084a2:	2b0c      	cmp	r3, #12
 80084a4:	d11c      	bne.n	80084e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084a6:	4b44      	ldr	r3, [pc, #272]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d116      	bne.n	80084e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084b2:	4b41      	ldr	r3, [pc, #260]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_RCC_OscConfig+0x186>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d001      	beq.n	80084ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e1d3      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ca:	4b3b      	ldr	r3, [pc, #236]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	4937      	ldr	r1, [pc, #220]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084de:	e03a      	b.n	8008556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d020      	beq.n	800852a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084e8:	4b34      	ldr	r3, [pc, #208]	@ (80085bc <HAL_RCC_OscConfig+0x278>)
 80084ea:	2201      	movs	r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ee:	f7fe f911 	bl	8006714 <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084f6:	f7fe f90d 	bl	8006714 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e1b4      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008508:	4b2b      	ldr	r3, [pc, #172]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0f0      	beq.n	80084f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008514:	4b28      	ldr	r3, [pc, #160]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	4925      	ldr	r1, [pc, #148]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 8008524:	4313      	orrs	r3, r2
 8008526:	600b      	str	r3, [r1, #0]
 8008528:	e015      	b.n	8008556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800852a:	4b24      	ldr	r3, [pc, #144]	@ (80085bc <HAL_RCC_OscConfig+0x278>)
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008530:	f7fe f8f0 	bl	8006714 <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008538:	f7fe f8ec 	bl	8006714 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e193      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800854a:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d036      	beq.n	80085d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d016      	beq.n	8008598 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800856a:	4b15      	ldr	r3, [pc, #84]	@ (80085c0 <HAL_RCC_OscConfig+0x27c>)
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008570:	f7fe f8d0 	bl	8006714 <HAL_GetTick>
 8008574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008576:	e008      	b.n	800858a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008578:	f7fe f8cc 	bl	8006714 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e173      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800858a:	4b0b      	ldr	r3, [pc, #44]	@ (80085b8 <HAL_RCC_OscConfig+0x274>)
 800858c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f0      	beq.n	8008578 <HAL_RCC_OscConfig+0x234>
 8008596:	e01b      	b.n	80085d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008598:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <HAL_RCC_OscConfig+0x27c>)
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800859e:	f7fe f8b9 	bl	8006714 <HAL_GetTick>
 80085a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085a4:	e00e      	b.n	80085c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a6:	f7fe f8b5 	bl	8006714 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d907      	bls.n	80085c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e15c      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
 80085b8:	40023800 	.word	0x40023800
 80085bc:	42470000 	.word	0x42470000
 80085c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c4:	4b8a      	ldr	r3, [pc, #552]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80085c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ea      	bne.n	80085a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8097 	beq.w	800870c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085e2:	4b83      	ldr	r3, [pc, #524]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10f      	bne.n	800860e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085ee:	2300      	movs	r3, #0
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	4b7f      	ldr	r3, [pc, #508]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f6:	4a7e      	ldr	r2, [pc, #504]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80085f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80085fe:	4b7c      	ldr	r3, [pc, #496]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008606:	60bb      	str	r3, [r7, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800860e:	4b79      	ldr	r3, [pc, #484]	@ (80087f4 <HAL_RCC_OscConfig+0x4b0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008616:	2b00      	cmp	r3, #0
 8008618:	d118      	bne.n	800864c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800861a:	4b76      	ldr	r3, [pc, #472]	@ (80087f4 <HAL_RCC_OscConfig+0x4b0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a75      	ldr	r2, [pc, #468]	@ (80087f4 <HAL_RCC_OscConfig+0x4b0>)
 8008620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008626:	f7fe f875 	bl	8006714 <HAL_GetTick>
 800862a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800862c:	e008      	b.n	8008640 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800862e:	f7fe f871 	bl	8006714 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e118      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008640:	4b6c      	ldr	r3, [pc, #432]	@ (80087f4 <HAL_RCC_OscConfig+0x4b0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0f0      	beq.n	800862e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d106      	bne.n	8008662 <HAL_RCC_OscConfig+0x31e>
 8008654:	4b66      	ldr	r3, [pc, #408]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008658:	4a65      	ldr	r2, [pc, #404]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008660:	e01c      	b.n	800869c <HAL_RCC_OscConfig+0x358>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b05      	cmp	r3, #5
 8008668:	d10c      	bne.n	8008684 <HAL_RCC_OscConfig+0x340>
 800866a:	4b61      	ldr	r3, [pc, #388]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866e:	4a60      	ldr	r2, [pc, #384]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008670:	f043 0304 	orr.w	r3, r3, #4
 8008674:	6713      	str	r3, [r2, #112]	@ 0x70
 8008676:	4b5e      	ldr	r3, [pc, #376]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867a:	4a5d      	ldr	r2, [pc, #372]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 800867c:	f043 0301 	orr.w	r3, r3, #1
 8008680:	6713      	str	r3, [r2, #112]	@ 0x70
 8008682:	e00b      	b.n	800869c <HAL_RCC_OscConfig+0x358>
 8008684:	4b5a      	ldr	r3, [pc, #360]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008688:	4a59      	ldr	r2, [pc, #356]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008690:	4b57      	ldr	r3, [pc, #348]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008694:	4a56      	ldr	r2, [pc, #344]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008696:	f023 0304 	bic.w	r3, r3, #4
 800869a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d015      	beq.n	80086d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a4:	f7fe f836 	bl	8006714 <HAL_GetTick>
 80086a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086aa:	e00a      	b.n	80086c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ac:	f7fe f832 	bl	8006714 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e0d7      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086c2:	4b4b      	ldr	r3, [pc, #300]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80086c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ee      	beq.n	80086ac <HAL_RCC_OscConfig+0x368>
 80086ce:	e014      	b.n	80086fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d0:	f7fe f820 	bl	8006714 <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086d6:	e00a      	b.n	80086ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d8:	f7fe f81c 	bl	8006714 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e0c1      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086ee:	4b40      	ldr	r3, [pc, #256]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1ee      	bne.n	80086d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d105      	bne.n	800870c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008700:	4b3b      	ldr	r3, [pc, #236]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008704:	4a3a      	ldr	r2, [pc, #232]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800870a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80ad 	beq.w	8008870 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008716:	4b36      	ldr	r3, [pc, #216]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 030c 	and.w	r3, r3, #12
 800871e:	2b08      	cmp	r3, #8
 8008720:	d060      	beq.n	80087e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d145      	bne.n	80087b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800872a:	4b33      	ldr	r3, [pc, #204]	@ (80087f8 <HAL_RCC_OscConfig+0x4b4>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008730:	f7fd fff0 	bl	8006714 <HAL_GetTick>
 8008734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008736:	e008      	b.n	800874a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008738:	f7fd ffec 	bl	8006714 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d901      	bls.n	800874a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e093      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874a:	4b29      	ldr	r3, [pc, #164]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1f0      	bne.n	8008738 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69da      	ldr	r2, [r3, #28]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	019b      	lsls	r3, r3, #6
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	3b01      	subs	r3, #1
 8008770:	041b      	lsls	r3, r3, #16
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	061b      	lsls	r3, r3, #24
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008780:	071b      	lsls	r3, r3, #28
 8008782:	491b      	ldr	r1, [pc, #108]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 8008784:	4313      	orrs	r3, r2
 8008786:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008788:	4b1b      	ldr	r3, [pc, #108]	@ (80087f8 <HAL_RCC_OscConfig+0x4b4>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878e:	f7fd ffc1 	bl	8006714 <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008796:	f7fd ffbd 	bl	8006714 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e064      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087a8:	4b11      	ldr	r3, [pc, #68]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0f0      	beq.n	8008796 <HAL_RCC_OscConfig+0x452>
 80087b4:	e05c      	b.n	8008870 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087b6:	4b10      	ldr	r3, [pc, #64]	@ (80087f8 <HAL_RCC_OscConfig+0x4b4>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087bc:	f7fd ffaa 	bl	8006714 <HAL_GetTick>
 80087c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c4:	f7fd ffa6 	bl	8006714 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e04d      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087d6:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <HAL_RCC_OscConfig+0x4ac>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1f0      	bne.n	80087c4 <HAL_RCC_OscConfig+0x480>
 80087e2:	e045      	b.n	8008870 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d107      	bne.n	80087fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e040      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
 80087f0:	40023800 	.word	0x40023800
 80087f4:	40007000 	.word	0x40007000
 80087f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087fc:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <HAL_RCC_OscConfig+0x538>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d030      	beq.n	800886c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008814:	429a      	cmp	r2, r3
 8008816:	d129      	bne.n	800886c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008822:	429a      	cmp	r2, r3
 8008824:	d122      	bne.n	800886c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008834:	4293      	cmp	r3, r2
 8008836:	d119      	bne.n	800886c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	3b01      	subs	r3, #1
 8008846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008848:	429a      	cmp	r2, r3
 800884a:	d10f      	bne.n	800886c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008858:	429a      	cmp	r2, r3
 800885a:	d107      	bne.n	800886c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008866:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008868:	429a      	cmp	r2, r3
 800886a:	d001      	beq.n	8008870 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e000      	b.n	8008872 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40023800 	.word	0x40023800

08008880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e07b      	b.n	800898a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d108      	bne.n	80088ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088a2:	d009      	beq.n	80088b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	61da      	str	r2, [r3, #28]
 80088aa:	e005      	b.n	80088b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7fd fc14 	bl	8006100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800893c:	ea42 0103 	orr.w	r1, r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	f003 0104 	and.w	r1, r3, #4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895e:	f003 0210 	and.w	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	603b      	str	r3, [r7, #0]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089a2:	f7fd feb7 	bl	8006714 <HAL_GetTick>
 80089a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d001      	beq.n	80089bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80089b8:	2302      	movs	r3, #2
 80089ba:	e12a      	b.n	8008c12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <HAL_SPI_Transmit+0x36>
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e122      	b.n	8008c12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_SPI_Transmit+0x48>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e11b      	b.n	8008c12 <HAL_SPI_Transmit+0x280>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2203      	movs	r2, #3
 80089e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	88fa      	ldrh	r2, [r7, #6]
 80089fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a28:	d10f      	bne.n	8008a4a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a54:	2b40      	cmp	r3, #64	@ 0x40
 8008a56:	d007      	beq.n	8008a68 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a70:	d152      	bne.n	8008b18 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <HAL_SPI_Transmit+0xee>
 8008a7a:	8b7b      	ldrh	r3, [r7, #26]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d145      	bne.n	8008b0c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a84:	881a      	ldrh	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a90:	1c9a      	adds	r2, r3, #2
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008aa4:	e032      	b.n	8008b0c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d112      	bne.n	8008ada <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab8:	881a      	ldrh	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac4:	1c9a      	adds	r2, r3, #2
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008ad8:	e018      	b.n	8008b0c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ada:	f7fd fe1b 	bl	8006714 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d803      	bhi.n	8008af2 <HAL_SPI_Transmit+0x160>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d102      	bne.n	8008af8 <HAL_SPI_Transmit+0x166>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d109      	bne.n	8008b0c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e082      	b.n	8008c12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1c7      	bne.n	8008aa6 <HAL_SPI_Transmit+0x114>
 8008b16:	e053      	b.n	8008bc0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_SPI_Transmit+0x194>
 8008b20:	8b7b      	ldrh	r3, [r7, #26]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d147      	bne.n	8008bb6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330c      	adds	r3, #12
 8008b30:	7812      	ldrb	r2, [r2, #0]
 8008b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b4c:	e033      	b.n	8008bb6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d113      	bne.n	8008b84 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	7812      	ldrb	r2, [r2, #0]
 8008b68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008b82:	e018      	b.n	8008bb6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b84:	f7fd fdc6 	bl	8006714 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d803      	bhi.n	8008b9c <HAL_SPI_Transmit+0x20a>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d102      	bne.n	8008ba2 <HAL_SPI_Transmit+0x210>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e02d      	b.n	8008c12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1c6      	bne.n	8008b4e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fa59 	bl	800907c <SPI_EndRxTxTransaction>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008c10:	2300      	movs	r3, #0
  }
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b08a      	sub	sp, #40	@ 0x28
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c2c:	f7fd fd72 	bl	8006714 <HAL_GetTick>
 8008c30:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c38:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008c40:	887b      	ldrh	r3, [r7, #2]
 8008c42:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c44:	7ffb      	ldrb	r3, [r7, #31]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d00c      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x4a>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c50:	d106      	bne.n	8008c60 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <HAL_SPI_TransmitReceive+0x46>
 8008c5a:	7ffb      	ldrb	r3, [r7, #31]
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d001      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008c60:	2302      	movs	r3, #2
 8008c62:	e17f      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <HAL_SPI_TransmitReceive+0x5c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <HAL_SPI_TransmitReceive+0x5c>
 8008c70:	887b      	ldrh	r3, [r7, #2]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e174      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_SPI_TransmitReceive+0x6e>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e16d      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d003      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	887a      	ldrh	r2, [r7, #2]
 8008cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	887a      	ldrh	r2, [r7, #2]
 8008cba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	887a      	ldrh	r2, [r7, #2]
 8008cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	887a      	ldrh	r2, [r7, #2]
 8008ccc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce4:	2b40      	cmp	r3, #64	@ 0x40
 8008ce6:	d007      	beq.n	8008cf8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d00:	d17e      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <HAL_SPI_TransmitReceive+0xf6>
 8008d0a:	8afb      	ldrh	r3, [r7, #22]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d16c      	bne.n	8008dea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d14:	881a      	ldrh	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d34:	e059      	b.n	8008dea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d11b      	bne.n	8008d7c <HAL_SPI_TransmitReceive+0x162>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d016      	beq.n	8008d7c <HAL_SPI_TransmitReceive+0x162>
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d113      	bne.n	8008d7c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d58:	881a      	ldrh	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d64:	1c9a      	adds	r2, r3, #2
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d119      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x1a4>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d014      	beq.n	8008dbe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9e:	b292      	uxth	r2, r2
 8008da0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da6:	1c9a      	adds	r2, r3, #2
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008dbe:	f7fd fca9 	bl	8006714 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d80d      	bhi.n	8008dea <HAL_SPI_TransmitReceive+0x1d0>
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd4:	d009      	beq.n	8008dea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e0bc      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1a0      	bne.n	8008d36 <HAL_SPI_TransmitReceive+0x11c>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d19b      	bne.n	8008d36 <HAL_SPI_TransmitReceive+0x11c>
 8008dfe:	e082      	b.n	8008f06 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <HAL_SPI_TransmitReceive+0x1f4>
 8008e08:	8afb      	ldrh	r3, [r7, #22]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d171      	bne.n	8008ef2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	330c      	adds	r3, #12
 8008e18:	7812      	ldrb	r2, [r2, #0]
 8008e1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e34:	e05d      	b.n	8008ef2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d11c      	bne.n	8008e7e <HAL_SPI_TransmitReceive+0x264>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d017      	beq.n	8008e7e <HAL_SPI_TransmitReceive+0x264>
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d114      	bne.n	8008e7e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d119      	bne.n	8008ec0 <HAL_SPI_TransmitReceive+0x2a6>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d014      	beq.n	8008ec0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ec0:	f7fd fc28 	bl	8006714 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d803      	bhi.n	8008ed8 <HAL_SPI_TransmitReceive+0x2be>
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d102      	bne.n	8008ede <HAL_SPI_TransmitReceive+0x2c4>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d109      	bne.n	8008ef2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e038      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d19c      	bne.n	8008e36 <HAL_SPI_TransmitReceive+0x21c>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d197      	bne.n	8008e36 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f06:	6a3a      	ldr	r2, [r7, #32]
 8008f08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f8b6 	bl	800907c <SPI_EndRxTxTransaction>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e01d      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f30:	2300      	movs	r3, #0
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	613b      	str	r3, [r7, #16]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3728      	adds	r7, #40	@ 0x28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f7c:	f7fd fbca 	bl	8006714 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4413      	add	r3, r2
 8008f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f8c:	f7fd fbc2 	bl	8006714 <HAL_GetTick>
 8008f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f92:	4b39      	ldr	r3, [pc, #228]	@ (8009078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	015b      	lsls	r3, r3, #5
 8008f98:	0d1b      	lsrs	r3, r3, #20
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	fb02 f303 	mul.w	r3, r2, r3
 8008fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fa2:	e054      	b.n	800904e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d050      	beq.n	800904e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fac:	f7fd fbb2 	bl	8006714 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d902      	bls.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d13d      	bne.n	800903e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fda:	d111      	bne.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fe4:	d004      	beq.n	8008ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fee:	d107      	bne.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009008:	d10f      	bne.n	800902a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e017      	b.n	800906e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3b01      	subs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d19b      	bne.n	8008fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3720      	adds	r7, #32
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20006c38 	.word	0x20006c38

0800907c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af02      	add	r7, sp, #8
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2201      	movs	r2, #1
 8009090:	2102      	movs	r1, #2
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f7ff ff6a 	bl	8008f6c <SPI_WaitFlagStateUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a2:	f043 0220 	orr.w	r2, r3, #32
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e032      	b.n	8009114 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090ae:	4b1b      	ldr	r3, [pc, #108]	@ (800911c <SPI_EndRxTxTransaction+0xa0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009120 <SPI_EndRxTxTransaction+0xa4>)
 80090b4:	fba2 2303 	umull	r2, r3, r2, r3
 80090b8:	0d5b      	lsrs	r3, r3, #21
 80090ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090be:	fb02 f303 	mul.w	r3, r2, r3
 80090c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090cc:	d112      	bne.n	80090f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2180      	movs	r1, #128	@ 0x80
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff ff47 	bl	8008f6c <SPI_WaitFlagStateUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d016      	beq.n	8009112 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e8:	f043 0220 	orr.w	r2, r3, #32
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e00f      	b.n	8009114 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800910a:	2b80      	cmp	r3, #128	@ 0x80
 800910c:	d0f2      	beq.n	80090f4 <SPI_EndRxTxTransaction+0x78>
 800910e:	e000      	b.n	8009112 <SPI_EndRxTxTransaction+0x96>
        break;
 8009110:	bf00      	nop
  }

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20006c38 	.word	0x20006c38
 8009120:	165e9f81 	.word	0x165e9f81

08009124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e042      	b.n	80091bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fd f820 	bl	8006190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2224      	movs	r2, #36	@ 0x24
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fe21 	bl	8009db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800917c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800918c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800919c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d112      	bne.n	8009204 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_UART_Receive_IT+0x26>
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e00b      	b.n	8009206 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	461a      	mov	r2, r3
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fbd9 	bl	80099b2 <UART_Start_Receive_IT>
 8009200:	4603      	mov	r3, r0
 8009202:	e000      	b.n	8009206 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009204:	2302      	movs	r3, #2
  }
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08c      	sub	sp, #48	@ 0x30
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b20      	cmp	r3, #32
 8009228:	d156      	bne.n	80092d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_UART_Transmit_DMA+0x26>
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e04f      	b.n	80092da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	88fa      	ldrh	r2, [r7, #6]
 8009244:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	88fa      	ldrh	r2, [r7, #6]
 800924a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2221      	movs	r2, #33	@ 0x21
 8009256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	4a21      	ldr	r2, [pc, #132]	@ (80092e4 <HAL_UART_Transmit_DMA+0xd4>)
 8009260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009266:	4a20      	ldr	r2, [pc, #128]	@ (80092e8 <HAL_UART_Transmit_DMA+0xd8>)
 8009268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926e:	4a1f      	ldr	r2, [pc, #124]	@ (80092ec <HAL_UART_Transmit_DMA+0xdc>)
 8009270:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009276:	2200      	movs	r2, #0
 8009278:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	6819      	ldr	r1, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3304      	adds	r3, #4
 800928e:	461a      	mov	r2, r3
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	f7fe f80b 	bl	80072ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800929e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3314      	adds	r3, #20
 80092a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	617b      	str	r3, [r7, #20]
   return(result);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3314      	adds	r3, #20
 80092be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80092c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6a39      	ldr	r1, [r7, #32]
 80092c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	e000      	b.n	80092da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80092d8:	2302      	movs	r3, #2
  }
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3730      	adds	r7, #48	@ 0x30
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08009869 	.word	0x08009869
 80092e8:	08009903 	.word	0x08009903
 80092ec:	0800991f 	.word	0x0800991f

080092f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b0ba      	sub	sp, #232	@ 0xe8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800931c:	2300      	movs	r3, #0
 800931e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800932e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10f      	bne.n	8009356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800933a:	f003 0320 	and.w	r3, r3, #32
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <HAL_UART_IRQHandler+0x66>
 8009342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fc70 	bl	8009c34 <UART_Receive_IT>
      return;
 8009354:	e25b      	b.n	800980e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80de 	beq.w	800951c <HAL_UART_IRQHandler+0x22c>
 8009360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d106      	bne.n	800937a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800936c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009370:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80d1 	beq.w	800951c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800937a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <HAL_UART_IRQHandler+0xae>
 8009386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009396:	f043 0201 	orr.w	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800939e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00b      	beq.n	80093c2 <HAL_UART_IRQHandler+0xd2>
 80093aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ba:	f043 0202 	orr.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <HAL_UART_IRQHandler+0xf6>
 80093ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093de:	f043 0204 	orr.w	r2, r3, #4
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <HAL_UART_IRQHandler+0x126>
 80093f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d105      	bne.n	800940a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800940e:	f043 0208 	orr.w	r2, r3, #8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 81f2 	beq.w	8009804 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d008      	beq.n	800943e <HAL_UART_IRQHandler+0x14e>
 800942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fbfb 	bl	8009c34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b40      	cmp	r3, #64	@ 0x40
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <HAL_UART_IRQHandler+0x17a>
 8009462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d04f      	beq.n	800950a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fb03 	bl	8009a76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947a:	2b40      	cmp	r3, #64	@ 0x40
 800947c:	d141      	bne.n	8009502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800949c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3314      	adds	r3, #20
 80094a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1d9      	bne.n	800947e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d013      	beq.n	80094fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d6:	4a7e      	ldr	r2, [pc, #504]	@ (80096d0 <HAL_UART_IRQHandler+0x3e0>)
 80094d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fd ffac 	bl	800743c <HAL_DMA_Abort_IT>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d016      	beq.n	8009518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f8:	e00e      	b.n	8009518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f99e 	bl	800983c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009500:	e00a      	b.n	8009518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f99a 	bl	800983c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009508:	e006      	b.n	8009518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f996 	bl	800983c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009516:	e175      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	bf00      	nop
    return;
 800951a:	e173      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009520:	2b01      	cmp	r3, #1
 8009522:	f040 814f 	bne.w	80097c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8148 	beq.w	80097c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8141 	beq.w	80097c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	60bb      	str	r3, [r7, #8]
 8009556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009562:	2b40      	cmp	r3, #64	@ 0x40
 8009564:	f040 80b6 	bne.w	80096d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8145 	beq.w	8009808 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009586:	429a      	cmp	r2, r3
 8009588:	f080 813e 	bcs.w	8009808 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009592:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800959e:	f000 8088 	beq.w	80096b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	330c      	adds	r3, #12
 80095a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	330c      	adds	r3, #12
 80095ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80095ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1d9      	bne.n	80095a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3314      	adds	r3, #20
 80095f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3314      	adds	r3, #20
 800960e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009612:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009616:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800961a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e1      	bne.n	80095ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3314      	adds	r3, #20
 8009630:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800963a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800963c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3314      	adds	r3, #20
 800964a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800964e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009650:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009654:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800965c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e3      	bne.n	800962a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2220      	movs	r2, #32
 8009666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009682:	f023 0310 	bic.w	r3, r3, #16
 8009686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	330c      	adds	r3, #12
 8009690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009694:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009696:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800969a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e3      	bne.n	8009670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fd fe55 	bl	800735c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2202      	movs	r2, #2
 80096b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f8c1 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096ce:	e09b      	b.n	8009808 <HAL_UART_IRQHandler+0x518>
 80096d0:	08009b3d 	.word	0x08009b3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096dc:	b29b      	uxth	r3, r3
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 808e 	beq.w	800980c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80096f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8089 	beq.w	800980c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	330c      	adds	r3, #12
 8009700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800970a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009710:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	330c      	adds	r3, #12
 800971a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800971e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009720:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800972c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e3      	bne.n	80096fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3314      	adds	r3, #20
 8009738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	623b      	str	r3, [r7, #32]
   return(result);
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	f023 0301 	bic.w	r3, r3, #1
 8009748:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009756:	633a      	str	r2, [r7, #48]	@ 0x30
 8009758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800975c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e3      	bne.n	8009732 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	330c      	adds	r3, #12
 800977e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60fb      	str	r3, [r7, #12]
   return(result);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0310 	bic.w	r3, r3, #16
 800978e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	330c      	adds	r3, #12
 8009798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800979c:	61fa      	str	r2, [r7, #28]
 800979e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	617b      	str	r3, [r7, #20]
   return(result);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e3      	bne.n	8009778 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f847 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097c2:	e023      	b.n	800980c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <HAL_UART_IRQHandler+0x4f4>
 80097d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f9c1 	bl	8009b64 <UART_Transmit_IT>
    return;
 80097e2:	e014      	b.n	800980e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00e      	beq.n	800980e <HAL_UART_IRQHandler+0x51e>
 80097f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fa01 	bl	8009c04 <UART_EndTransmit_IT>
    return;
 8009802:	e004      	b.n	800980e <HAL_UART_IRQHandler+0x51e>
    return;
 8009804:	bf00      	nop
 8009806:	e002      	b.n	800980e <HAL_UART_IRQHandler+0x51e>
      return;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <HAL_UART_IRQHandler+0x51e>
      return;
 800980c:	bf00      	nop
  }
}
 800980e:	37e8      	adds	r7, #232	@ 0xe8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b090      	sub	sp, #64	@ 0x40
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009880:	2b00      	cmp	r3, #0
 8009882:	d137      	bne.n	80098f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009886:	2200      	movs	r2, #0
 8009888:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800988a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3314      	adds	r3, #20
 8009890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	623b      	str	r3, [r7, #32]
   return(result);
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3314      	adds	r3, #20
 80098a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80098ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e5      	bne.n	800988a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	330c      	adds	r3, #12
 80098c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	330c      	adds	r3, #12
 80098dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098de:	61fa      	str	r2, [r7, #28]
 80098e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	69b9      	ldr	r1, [r7, #24]
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	617b      	str	r3, [r7, #20]
   return(result);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e5      	bne.n	80098be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098f2:	e002      	b.n	80098fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80098f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80098f6:	f7ff ff8d 	bl	8009814 <HAL_UART_TxCpltCallback>
}
 80098fa:	bf00      	nop
 80098fc:	3740      	adds	r7, #64	@ 0x40
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff ff89 	bl	8009828 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800993a:	2b80      	cmp	r3, #128	@ 0x80
 800993c:	bf0c      	ite	eq
 800993e:	2301      	moveq	r3, #1
 8009940:	2300      	movne	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b21      	cmp	r3, #33	@ 0x21
 8009950:	d108      	bne.n	8009964 <UART_DMAError+0x46>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800995e:	68b8      	ldr	r0, [r7, #8]
 8009960:	f000 f861 	bl	8009a26 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996e:	2b40      	cmp	r3, #64	@ 0x40
 8009970:	bf0c      	ite	eq
 8009972:	2301      	moveq	r3, #1
 8009974:	2300      	movne	r3, #0
 8009976:	b2db      	uxtb	r3, r3
 8009978:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b22      	cmp	r3, #34	@ 0x22
 8009984:	d108      	bne.n	8009998 <UART_DMAError+0x7a>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009992:	68b8      	ldr	r0, [r7, #8]
 8009994:	f000 f86f 	bl	8009a76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800999c:	f043 0210 	orr.w	r2, r3, #16
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099a4:	68b8      	ldr	r0, [r7, #8]
 80099a6:	f7ff ff49 	bl	800983c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	4613      	mov	r3, r2
 80099be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	88fa      	ldrh	r2, [r7, #6]
 80099ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	88fa      	ldrh	r2, [r7, #6]
 80099d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2222      	movs	r2, #34	@ 0x22
 80099dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d007      	beq.n	80099f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695a      	ldr	r2, [r3, #20]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0220 	orr.w	r2, r2, #32
 8009a16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b089      	sub	sp, #36	@ 0x24
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	330c      	adds	r3, #12
 8009a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	69fa      	ldr	r2, [r7, #28]
 8009a4e:	61ba      	str	r2, [r7, #24]
 8009a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6979      	ldr	r1, [r7, #20]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e5      	bne.n	8009a2e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009a6a:	bf00      	nop
 8009a6c:	3724      	adds	r7, #36	@ 0x24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b095      	sub	sp, #84	@ 0x54
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	330c      	adds	r3, #12
 8009a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	330c      	adds	r3, #12
 8009a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e5      	bne.n	8009a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3314      	adds	r3, #20
 8009ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3314      	adds	r3, #20
 8009ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e5      	bne.n	8009ab2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d119      	bne.n	8009b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f023 0310 	bic.w	r3, r3, #16
 8009b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	330c      	adds	r3, #12
 8009b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b0e:	61ba      	str	r2, [r7, #24]
 8009b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6979      	ldr	r1, [r7, #20]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e5      	bne.n	8009aee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b30:	bf00      	nop
 8009b32:	3754      	adds	r7, #84	@ 0x54
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff fe70 	bl	800983c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b21      	cmp	r3, #33	@ 0x21
 8009b76:	d13e      	bne.n	8009bf6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b80:	d114      	bne.n	8009bac <UART_Transmit_IT+0x48>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d110      	bne.n	8009bac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a1b      	ldr	r3, [r3, #32]
 8009ba4:	1c9a      	adds	r2, r3, #2
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	621a      	str	r2, [r3, #32]
 8009baa:	e008      	b.n	8009bbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	1c59      	adds	r1, r3, #1
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6211      	str	r1, [r2, #32]
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10f      	bne.n	8009bf2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009be0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bf0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e000      	b.n	8009bf8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bf6:	2302      	movs	r3, #2
  }
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff fdf5 	bl	8009814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08c      	sub	sp, #48	@ 0x30
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b22      	cmp	r3, #34	@ 0x22
 8009c46:	f040 80ae 	bne.w	8009da6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c52:	d117      	bne.n	8009c84 <UART_Receive_IT+0x50>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d113      	bne.n	8009c84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7c:	1c9a      	adds	r2, r3, #2
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c82:	e026      	b.n	8009cd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c96:	d007      	beq.n	8009ca8 <UART_Receive_IT+0x74>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <UART_Receive_IT+0x82>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d106      	bne.n	8009cb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e008      	b.n	8009cc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d15d      	bne.n	8009da2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0220 	bic.w	r2, r2, #32
 8009cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68da      	ldr	r2, [r3, #12]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695a      	ldr	r2, [r3, #20]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0201 	bic.w	r2, r2, #1
 8009d14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d135      	bne.n	8009d98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	613b      	str	r3, [r7, #16]
   return(result);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f023 0310 	bic.w	r3, r3, #16
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	330c      	adds	r3, #12
 8009d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d52:	623a      	str	r2, [r7, #32]
 8009d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	69f9      	ldr	r1, [r7, #28]
 8009d58:	6a3a      	ldr	r2, [r7, #32]
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e5      	bne.n	8009d32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0310 	and.w	r3, r3, #16
 8009d70:	2b10      	cmp	r3, #16
 8009d72:	d10a      	bne.n	8009d8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d74:	2300      	movs	r3, #0
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff fd5d 	bl	8009850 <HAL_UARTEx_RxEventCallback>
 8009d96:	e002      	b.n	8009d9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fc f929 	bl	8005ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e002      	b.n	8009da8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e000      	b.n	8009da8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009da6:	2302      	movs	r3, #2
  }
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3730      	adds	r7, #48	@ 0x30
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009db4:	b0c0      	sub	sp, #256	@ 0x100
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dcc:	68d9      	ldr	r1, [r3, #12]
 8009dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	ea40 0301 	orr.w	r3, r0, r1
 8009dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	431a      	orrs	r2, r3
 8009de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009e08:	f021 010c 	bic.w	r1, r1, #12
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009e16:	430b      	orrs	r3, r1
 8009e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e2a:	6999      	ldr	r1, [r3, #24]
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	ea40 0301 	orr.w	r3, r0, r1
 8009e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b8f      	ldr	r3, [pc, #572]	@ (800a07c <UART_SetConfig+0x2cc>)
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d005      	beq.n	8009e50 <UART_SetConfig+0xa0>
 8009e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4b8d      	ldr	r3, [pc, #564]	@ (800a080 <UART_SetConfig+0x2d0>)
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d104      	bne.n	8009e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e50:	f7fe f834 	bl	8007ebc <HAL_RCC_GetPCLK2Freq>
 8009e54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e58:	e003      	b.n	8009e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e5a:	f7fe f81b 	bl	8007e94 <HAL_RCC_GetPCLK1Freq>
 8009e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e6c:	f040 810c 	bne.w	800a088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	1891      	adds	r1, r2, r2
 8009e88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009e8a:	415b      	adcs	r3, r3
 8009e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e92:	4621      	mov	r1, r4
 8009e94:	eb12 0801 	adds.w	r8, r2, r1
 8009e98:	4629      	mov	r1, r5
 8009e9a:	eb43 0901 	adc.w	r9, r3, r1
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009eb2:	4690      	mov	r8, r2
 8009eb4:	4699      	mov	r9, r3
 8009eb6:	4623      	mov	r3, r4
 8009eb8:	eb18 0303 	adds.w	r3, r8, r3
 8009ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	eb49 0303 	adc.w	r3, r9, r3
 8009ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ede:	460b      	mov	r3, r1
 8009ee0:	18db      	adds	r3, r3, r3
 8009ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	eb42 0303 	adc.w	r3, r2, r3
 8009eea:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ef4:	f7f6 f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4b61      	ldr	r3, [pc, #388]	@ (800a084 <UART_SetConfig+0x2d4>)
 8009efe:	fba3 2302 	umull	r2, r3, r3, r2
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	011c      	lsls	r4, r3, #4
 8009f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	1891      	adds	r1, r2, r2
 8009f1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f20:	415b      	adcs	r3, r3
 8009f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f28:	4641      	mov	r1, r8
 8009f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8009f2e:	4649      	mov	r1, r9
 8009f30:	eb43 0b01 	adc.w	fp, r3, r1
 8009f34:	f04f 0200 	mov.w	r2, #0
 8009f38:	f04f 0300 	mov.w	r3, #0
 8009f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f48:	4692      	mov	sl, r2
 8009f4a:	469b      	mov	fp, r3
 8009f4c:	4643      	mov	r3, r8
 8009f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8009f52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f56:	464b      	mov	r3, r9
 8009f58:	eb4b 0303 	adc.w	r3, fp, r3
 8009f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f74:	460b      	mov	r3, r1
 8009f76:	18db      	adds	r3, r3, r3
 8009f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	eb42 0303 	adc.w	r3, r2, r3
 8009f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009f8a:	f7f6 f991 	bl	80002b0 <__aeabi_uldivmod>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	4b3b      	ldr	r3, [pc, #236]	@ (800a084 <UART_SetConfig+0x2d4>)
 8009f96:	fba3 2301 	umull	r2, r3, r3, r1
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	2264      	movs	r2, #100	@ 0x64
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
 8009fa2:	1acb      	subs	r3, r1, r3
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009faa:	4b36      	ldr	r3, [pc, #216]	@ (800a084 <UART_SetConfig+0x2d4>)
 8009fac:	fba3 2302 	umull	r2, r3, r3, r2
 8009fb0:	095b      	lsrs	r3, r3, #5
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009fb8:	441c      	add	r4, r3
 8009fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009fcc:	4642      	mov	r2, r8
 8009fce:	464b      	mov	r3, r9
 8009fd0:	1891      	adds	r1, r2, r2
 8009fd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fd4:	415b      	adcs	r3, r3
 8009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009fdc:	4641      	mov	r1, r8
 8009fde:	1851      	adds	r1, r2, r1
 8009fe0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	414b      	adcs	r3, r1
 8009fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	00cb      	lsls	r3, r1, #3
 8009ff8:	4651      	mov	r1, sl
 8009ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ffe:	4651      	mov	r1, sl
 800a000:	00ca      	lsls	r2, r1, #3
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	4603      	mov	r3, r0
 800a008:	4642      	mov	r2, r8
 800a00a:	189b      	adds	r3, r3, r2
 800a00c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a010:	464b      	mov	r3, r9
 800a012:	460a      	mov	r2, r1
 800a014:	eb42 0303 	adc.w	r3, r2, r3
 800a018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a028:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a02c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a030:	460b      	mov	r3, r1
 800a032:	18db      	adds	r3, r3, r3
 800a034:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a036:	4613      	mov	r3, r2
 800a038:	eb42 0303 	adc.w	r3, r2, r3
 800a03c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a03e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a046:	f7f6 f933 	bl	80002b0 <__aeabi_uldivmod>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <UART_SetConfig+0x2d4>)
 800a050:	fba3 1302 	umull	r1, r3, r3, r2
 800a054:	095b      	lsrs	r3, r3, #5
 800a056:	2164      	movs	r1, #100	@ 0x64
 800a058:	fb01 f303 	mul.w	r3, r1, r3
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	3332      	adds	r3, #50	@ 0x32
 800a062:	4a08      	ldr	r2, [pc, #32]	@ (800a084 <UART_SetConfig+0x2d4>)
 800a064:	fba2 2303 	umull	r2, r3, r2, r3
 800a068:	095b      	lsrs	r3, r3, #5
 800a06a:	f003 0207 	and.w	r2, r3, #7
 800a06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4422      	add	r2, r4
 800a076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a078:	e106      	b.n	800a288 <UART_SetConfig+0x4d8>
 800a07a:	bf00      	nop
 800a07c:	40011000 	.word	0x40011000
 800a080:	40011400 	.word	0x40011400
 800a084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a092:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a09a:	4642      	mov	r2, r8
 800a09c:	464b      	mov	r3, r9
 800a09e:	1891      	adds	r1, r2, r2
 800a0a0:	6239      	str	r1, [r7, #32]
 800a0a2:	415b      	adcs	r3, r3
 800a0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	1854      	adds	r4, r2, r1
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	eb43 0501 	adc.w	r5, r3, r1
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	00eb      	lsls	r3, r5, #3
 800a0be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0c2:	00e2      	lsls	r2, r4, #3
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	4643      	mov	r3, r8
 800a0ca:	18e3      	adds	r3, r4, r3
 800a0cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	eb45 0303 	adc.w	r3, r5, r3
 800a0d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0ea:	f04f 0200 	mov.w	r2, #0
 800a0ee:	f04f 0300 	mov.w	r3, #0
 800a0f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	008b      	lsls	r3, r1, #2
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a100:	4621      	mov	r1, r4
 800a102:	008a      	lsls	r2, r1, #2
 800a104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a108:	f7f6 f8d2 	bl	80002b0 <__aeabi_uldivmod>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4b60      	ldr	r3, [pc, #384]	@ (800a294 <UART_SetConfig+0x4e4>)
 800a112:	fba3 2302 	umull	r2, r3, r3, r2
 800a116:	095b      	lsrs	r3, r3, #5
 800a118:	011c      	lsls	r4, r3, #4
 800a11a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a11e:	2200      	movs	r2, #0
 800a120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a124:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a12c:	4642      	mov	r2, r8
 800a12e:	464b      	mov	r3, r9
 800a130:	1891      	adds	r1, r2, r2
 800a132:	61b9      	str	r1, [r7, #24]
 800a134:	415b      	adcs	r3, r3
 800a136:	61fb      	str	r3, [r7, #28]
 800a138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a13c:	4641      	mov	r1, r8
 800a13e:	1851      	adds	r1, r2, r1
 800a140:	6139      	str	r1, [r7, #16]
 800a142:	4649      	mov	r1, r9
 800a144:	414b      	adcs	r3, r1
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	f04f 0300 	mov.w	r3, #0
 800a150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a154:	4659      	mov	r1, fp
 800a156:	00cb      	lsls	r3, r1, #3
 800a158:	4651      	mov	r1, sl
 800a15a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a15e:	4651      	mov	r1, sl
 800a160:	00ca      	lsls	r2, r1, #3
 800a162:	4610      	mov	r0, r2
 800a164:	4619      	mov	r1, r3
 800a166:	4603      	mov	r3, r0
 800a168:	4642      	mov	r2, r8
 800a16a:	189b      	adds	r3, r3, r2
 800a16c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a170:	464b      	mov	r3, r9
 800a172:	460a      	mov	r2, r1
 800a174:	eb42 0303 	adc.w	r3, r2, r3
 800a178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a186:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a194:	4649      	mov	r1, r9
 800a196:	008b      	lsls	r3, r1, #2
 800a198:	4641      	mov	r1, r8
 800a19a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a19e:	4641      	mov	r1, r8
 800a1a0:	008a      	lsls	r2, r1, #2
 800a1a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a1a6:	f7f6 f883 	bl	80002b0 <__aeabi_uldivmod>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	4b38      	ldr	r3, [pc, #224]	@ (800a294 <UART_SetConfig+0x4e4>)
 800a1b2:	fba3 2301 	umull	r2, r3, r3, r1
 800a1b6:	095b      	lsrs	r3, r3, #5
 800a1b8:	2264      	movs	r2, #100	@ 0x64
 800a1ba:	fb02 f303 	mul.w	r3, r2, r3
 800a1be:	1acb      	subs	r3, r1, r3
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	3332      	adds	r3, #50	@ 0x32
 800a1c4:	4a33      	ldr	r2, [pc, #204]	@ (800a294 <UART_SetConfig+0x4e4>)
 800a1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ca:	095b      	lsrs	r3, r3, #5
 800a1cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1d0:	441c      	add	r4, r3
 800a1d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1da:	677a      	str	r2, [r7, #116]	@ 0x74
 800a1dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	464b      	mov	r3, r9
 800a1e4:	1891      	adds	r1, r2, r2
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	415b      	adcs	r3, r3
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	1851      	adds	r1, r2, r1
 800a1f4:	6039      	str	r1, [r7, #0]
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	414b      	adcs	r3, r1
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a208:	4659      	mov	r1, fp
 800a20a:	00cb      	lsls	r3, r1, #3
 800a20c:	4651      	mov	r1, sl
 800a20e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a212:	4651      	mov	r1, sl
 800a214:	00ca      	lsls	r2, r1, #3
 800a216:	4610      	mov	r0, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	4642      	mov	r2, r8
 800a21e:	189b      	adds	r3, r3, r2
 800a220:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a222:	464b      	mov	r3, r9
 800a224:	460a      	mov	r2, r1
 800a226:	eb42 0303 	adc.w	r3, r2, r3
 800a22a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	663b      	str	r3, [r7, #96]	@ 0x60
 800a236:	667a      	str	r2, [r7, #100]	@ 0x64
 800a238:	f04f 0200 	mov.w	r2, #0
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a244:	4649      	mov	r1, r9
 800a246:	008b      	lsls	r3, r1, #2
 800a248:	4641      	mov	r1, r8
 800a24a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a24e:	4641      	mov	r1, r8
 800a250:	008a      	lsls	r2, r1, #2
 800a252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a256:	f7f6 f82b 	bl	80002b0 <__aeabi_uldivmod>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <UART_SetConfig+0x4e4>)
 800a260:	fba3 1302 	umull	r1, r3, r3, r2
 800a264:	095b      	lsrs	r3, r3, #5
 800a266:	2164      	movs	r1, #100	@ 0x64
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	3332      	adds	r3, #50	@ 0x32
 800a272:	4a08      	ldr	r2, [pc, #32]	@ (800a294 <UART_SetConfig+0x4e4>)
 800a274:	fba2 2303 	umull	r2, r3, r2, r3
 800a278:	095b      	lsrs	r3, r3, #5
 800a27a:	f003 020f 	and.w	r2, r3, #15
 800a27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4422      	add	r2, r4
 800a286:	609a      	str	r2, [r3, #8]
}
 800a288:	bf00      	nop
 800a28a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a28e:	46bd      	mov	sp, r7
 800a290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a294:	51eb851f 	.word	0x51eb851f

0800a298 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a29c:	4904      	ldr	r1, [pc, #16]	@ (800a2b0 <MX_FATFS_Init+0x18>)
 800a29e:	4805      	ldr	r0, [pc, #20]	@ (800a2b4 <MX_FATFS_Init+0x1c>)
 800a2a0:	f002 fea6 	bl	800cff0 <FATFS_LinkDriver>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <MX_FATFS_Init+0x20>)
 800a2aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a2ac:	bf00      	nop
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20009820 	.word	0x20009820
 800a2b4:	20006c44 	.word	0x20006c44
 800a2b8:	2000981c 	.word	0x2000981c

0800a2bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a2c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800a2d6:	79fb      	ldrb	r3, [r7, #7]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f6 fb33 	bl	8000944 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800a2de:	bf00      	nop
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
	SD_disk_status (pdrv);
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7f6 fc0b 	bl	8000b10 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800a2fa:	bf00      	nop
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	603b      	str	r3, [r7, #0]
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 800a314:	7bf8      	ldrb	r0, [r7, #15]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	68b9      	ldr	r1, [r7, #8]
 800a31c:	f7f6 fc0e 	bl	8000b3c <SD_disk_read>
  /* USER CODE END READ */
}
 800a320:	bf00      	nop
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	4603      	mov	r3, r0
 800a338:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800a33a:	7bf8      	ldrb	r0, [r7, #15]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	f7f6 fc65 	bl	8000c10 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800a346:	bf00      	nop
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	603a      	str	r2, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
 800a35c:	460b      	mov	r3, r1
 800a35e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    /*DRESULT res = RES_ERROR;
    return res;*/
	SD_disk_ioctl (pdrv, cmd, buff);
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	79b9      	ldrb	r1, [r7, #6]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f7f6 fcd6 	bl	8000d18 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800a36c:	bf00      	nop
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	4a08      	ldr	r2, [pc, #32]	@ (800a3a8 <disk_status+0x30>)
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	79fa      	ldrb	r2, [r7, #7]
 800a390:	4905      	ldr	r1, [pc, #20]	@ (800a3a8 <disk_status+0x30>)
 800a392:	440a      	add	r2, r1
 800a394:	7a12      	ldrb	r2, [r2, #8]
 800a396:	4610      	mov	r0, r2
 800a398:	4798      	blx	r3
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20009a4c 	.word	0x20009a4c

0800a3ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	4a0e      	ldr	r2, [pc, #56]	@ (800a3f8 <disk_initialize+0x4c>)
 800a3be:	5cd3      	ldrb	r3, [r2, r3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d114      	bne.n	800a3ee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f8 <disk_initialize+0x4c>)
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	79fa      	ldrb	r2, [r7, #7]
 800a3d2:	4909      	ldr	r1, [pc, #36]	@ (800a3f8 <disk_initialize+0x4c>)
 800a3d4:	440a      	add	r2, r1
 800a3d6:	7a12      	ldrb	r2, [r2, #8]
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4798      	blx	r3
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	4a03      	ldr	r2, [pc, #12]	@ (800a3f8 <disk_initialize+0x4c>)
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	20009a4c 	.word	0x20009a4c

0800a3fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a3fc:	b590      	push	{r4, r7, lr}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	4a0a      	ldr	r2, [pc, #40]	@ (800a438 <disk_read+0x3c>)
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	689c      	ldr	r4, [r3, #8]
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	4a07      	ldr	r2, [pc, #28]	@ (800a438 <disk_read+0x3c>)
 800a41c:	4413      	add	r3, r2
 800a41e:	7a18      	ldrb	r0, [r3, #8]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	47a0      	blx	r4
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd90      	pop	{r4, r7, pc}
 800a436:	bf00      	nop
 800a438:	20009a4c 	.word	0x20009a4c

0800a43c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60b9      	str	r1, [r7, #8]
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	4a0a      	ldr	r2, [pc, #40]	@ (800a478 <disk_write+0x3c>)
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	68dc      	ldr	r4, [r3, #12]
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	4a07      	ldr	r2, [pc, #28]	@ (800a478 <disk_write+0x3c>)
 800a45c:	4413      	add	r3, r2
 800a45e:	7a18      	ldrb	r0, [r3, #8]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	68b9      	ldr	r1, [r7, #8]
 800a466:	47a0      	blx	r4
 800a468:	4603      	mov	r3, r0
 800a46a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	bd90      	pop	{r4, r7, pc}
 800a476:	bf00      	nop
 800a478:	20009a4c 	.word	0x20009a4c

0800a47c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	603a      	str	r2, [r7, #0]
 800a486:	71fb      	strb	r3, [r7, #7]
 800a488:	460b      	mov	r3, r1
 800a48a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	4a09      	ldr	r2, [pc, #36]	@ (800a4b4 <disk_ioctl+0x38>)
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	79fa      	ldrb	r2, [r7, #7]
 800a49a:	4906      	ldr	r1, [pc, #24]	@ (800a4b4 <disk_ioctl+0x38>)
 800a49c:	440a      	add	r2, r1
 800a49e:	7a10      	ldrb	r0, [r2, #8]
 800a4a0:	79b9      	ldrb	r1, [r7, #6]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	4798      	blx	r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  return res;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20009a4c 	.word	0x20009a4c

0800a4b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a4c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	b21a      	sxth	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b21b      	sxth	r3, r3
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a4dc:	89fb      	ldrh	r3, [r7, #14]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3303      	adds	r3, #3
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	3202      	adds	r2, #2
 800a502:	7812      	ldrb	r2, [r2, #0]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	3201      	adds	r2, #1
 800a510:	7812      	ldrb	r2, [r2, #0]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	7812      	ldrb	r2, [r2, #0]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]
	return rv;
 800a522:	68fb      	ldr	r3, [r7, #12]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	887a      	ldrh	r2, [r7, #2]
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	887b      	ldrh	r3, [r7, #2]
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	887a      	ldrh	r2, [r7, #2]
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	701a      	strb	r2, [r3, #0]
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	607a      	str	r2, [r7, #4]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	b2d2      	uxtb	r2, r2
 800a57a:	701a      	strb	r2, [r3, #0]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	0a1b      	lsrs	r3, r3, #8
 800a580:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	607a      	str	r2, [r7, #4]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	b2d2      	uxtb	r2, r2
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	0a1b      	lsrs	r3, r3, #8
 800a5a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a5be:	b480      	push	{r7}
 800a5c0:	b087      	sub	sp, #28
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00d      	beq.n	800a5f4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	1c53      	adds	r3, r2, #1
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	1c59      	adds	r1, r3, #1
 800a5e2:	6179      	str	r1, [r7, #20]
 800a5e4:	7812      	ldrb	r2, [r2, #0]
 800a5e6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	607b      	str	r3, [r7, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1f1      	bne.n	800a5d8 <mem_cpy+0x1a>
	}
}
 800a5f4:	bf00      	nop
 800a5f6:	371c      	adds	r7, #28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	617a      	str	r2, [r7, #20]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	b2d2      	uxtb	r2, r2
 800a61a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3b01      	subs	r3, #1
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1f3      	bne.n	800a610 <mem_set+0x10>
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a636:	b480      	push	{r7}
 800a638:	b089      	sub	sp, #36	@ 0x24
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	61fa      	str	r2, [r7, #28]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	4619      	mov	r1, r3
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	61ba      	str	r2, [r7, #24]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	1acb      	subs	r3, r1, r3
 800a662:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3b01      	subs	r3, #1
 800a668:	607b      	str	r3, [r7, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <mem_cmp+0x40>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0eb      	beq.n	800a64e <mem_cmp+0x18>

	return r;
 800a676:	697b      	ldr	r3, [r7, #20]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3724      	adds	r7, #36	@ 0x24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a68e:	e002      	b.n	800a696 <chk_chr+0x12>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3301      	adds	r3, #1
 800a694:	607b      	str	r3, [r7, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d005      	beq.n	800a6aa <chk_chr+0x26>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d1f2      	bne.n	800a690 <chk_chr+0xc>
	return *str;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
	...

0800a6bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	e029      	b.n	800a724 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a6d0:	4a27      	ldr	r2, [pc, #156]	@ (800a770 <chk_lock+0xb4>)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	011b      	lsls	r3, r3, #4
 800a6d6:	4413      	add	r3, r2
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01d      	beq.n	800a71a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a6de:	4a24      	ldr	r2, [pc, #144]	@ (800a770 <chk_lock+0xb4>)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	011b      	lsls	r3, r3, #4
 800a6e4:	4413      	add	r3, r2
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d116      	bne.n	800a71e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a6f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a770 <chk_lock+0xb4>)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	4413      	add	r3, r2
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a700:	429a      	cmp	r2, r3
 800a702:	d10c      	bne.n	800a71e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a704:	4a1a      	ldr	r2, [pc, #104]	@ (800a770 <chk_lock+0xb4>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	4413      	add	r3, r2
 800a70c:	3308      	adds	r3, #8
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a714:	429a      	cmp	r2, r3
 800a716:	d102      	bne.n	800a71e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a718:	e007      	b.n	800a72a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a71a:	2301      	movs	r3, #1
 800a71c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3301      	adds	r3, #1
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d9d2      	bls.n	800a6d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d109      	bne.n	800a744 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <chk_lock+0x80>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d101      	bne.n	800a740 <chk_lock+0x84>
 800a73c:	2300      	movs	r3, #0
 800a73e:	e010      	b.n	800a762 <chk_lock+0xa6>
 800a740:	2312      	movs	r3, #18
 800a742:	e00e      	b.n	800a762 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d108      	bne.n	800a75c <chk_lock+0xa0>
 800a74a:	4a09      	ldr	r2, [pc, #36]	@ (800a770 <chk_lock+0xb4>)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	011b      	lsls	r3, r3, #4
 800a750:	4413      	add	r3, r2
 800a752:	330c      	adds	r3, #12
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a75a:	d101      	bne.n	800a760 <chk_lock+0xa4>
 800a75c:	2310      	movs	r3, #16
 800a75e:	e000      	b.n	800a762 <chk_lock+0xa6>
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	2000982c 	.word	0x2000982c

0800a774 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a77a:	2300      	movs	r3, #0
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	e002      	b.n	800a786 <enq_lock+0x12>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3301      	adds	r3, #1
 800a784:	607b      	str	r3, [r7, #4]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d806      	bhi.n	800a79a <enq_lock+0x26>
 800a78c:	4a09      	ldr	r2, [pc, #36]	@ (800a7b4 <enq_lock+0x40>)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	4413      	add	r3, r2
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f2      	bne.n	800a780 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	bf14      	ite	ne
 800a7a0:	2301      	movne	r3, #1
 800a7a2:	2300      	moveq	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	2000982c 	.word	0x2000982c

0800a7b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e01f      	b.n	800a808 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a7c8:	4a41      	ldr	r2, [pc, #260]	@ (800a8d0 <inc_lock+0x118>)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	011b      	lsls	r3, r3, #4
 800a7ce:	4413      	add	r3, r2
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d113      	bne.n	800a802 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a7da:	4a3d      	ldr	r2, [pc, #244]	@ (800a8d0 <inc_lock+0x118>)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	4413      	add	r3, r2
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d109      	bne.n	800a802 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a7ee:	4a38      	ldr	r2, [pc, #224]	@ (800a8d0 <inc_lock+0x118>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	4413      	add	r3, r2
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d006      	beq.n	800a810 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3301      	adds	r3, #1
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d9dc      	bls.n	800a7c8 <inc_lock+0x10>
 800a80e:	e000      	b.n	800a812 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a810:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b02      	cmp	r3, #2
 800a816:	d132      	bne.n	800a87e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e002      	b.n	800a824 <inc_lock+0x6c>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3301      	adds	r3, #1
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d806      	bhi.n	800a838 <inc_lock+0x80>
 800a82a:	4a29      	ldr	r2, [pc, #164]	@ (800a8d0 <inc_lock+0x118>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	4413      	add	r3, r2
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f2      	bne.n	800a81e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d101      	bne.n	800a842 <inc_lock+0x8a>
 800a83e:	2300      	movs	r3, #0
 800a840:	e040      	b.n	800a8c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4922      	ldr	r1, [pc, #136]	@ (800a8d0 <inc_lock+0x118>)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	440b      	add	r3, r1
 800a84e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	491e      	ldr	r1, [pc, #120]	@ (800a8d0 <inc_lock+0x118>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	440b      	add	r3, r1
 800a85c:	3304      	adds	r3, #4
 800a85e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	695a      	ldr	r2, [r3, #20]
 800a864:	491a      	ldr	r1, [pc, #104]	@ (800a8d0 <inc_lock+0x118>)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	440b      	add	r3, r1
 800a86c:	3308      	adds	r3, #8
 800a86e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a870:	4a17      	ldr	r2, [pc, #92]	@ (800a8d0 <inc_lock+0x118>)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	4413      	add	r3, r2
 800a878:	330c      	adds	r3, #12
 800a87a:	2200      	movs	r2, #0
 800a87c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <inc_lock+0xe0>
 800a884:	4a12      	ldr	r2, [pc, #72]	@ (800a8d0 <inc_lock+0x118>)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	4413      	add	r3, r2
 800a88c:	330c      	adds	r3, #12
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <inc_lock+0xe0>
 800a894:	2300      	movs	r3, #0
 800a896:	e015      	b.n	800a8c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d108      	bne.n	800a8b0 <inc_lock+0xf8>
 800a89e:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d0 <inc_lock+0x118>)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	4413      	add	r3, r2
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	e001      	b.n	800a8b4 <inc_lock+0xfc>
 800a8b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8b4:	4906      	ldr	r1, [pc, #24]	@ (800a8d0 <inc_lock+0x118>)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	011b      	lsls	r3, r3, #4
 800a8ba:	440b      	add	r3, r1
 800a8bc:	330c      	adds	r3, #12
 800a8be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3301      	adds	r3, #1
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	2000982c 	.word	0x2000982c

0800a8d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	607b      	str	r3, [r7, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d825      	bhi.n	800a934 <dec_lock+0x60>
		n = Files[i].ctr;
 800a8e8:	4a17      	ldr	r2, [pc, #92]	@ (800a948 <dec_lock+0x74>)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	4413      	add	r3, r2
 800a8f0:	330c      	adds	r3, #12
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a8f6:	89fb      	ldrh	r3, [r7, #14]
 800a8f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8fc:	d101      	bne.n	800a902 <dec_lock+0x2e>
 800a8fe:	2300      	movs	r3, #0
 800a900:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a902:	89fb      	ldrh	r3, [r7, #14]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <dec_lock+0x3a>
 800a908:	89fb      	ldrh	r3, [r7, #14]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a90e:	4a0e      	ldr	r2, [pc, #56]	@ (800a948 <dec_lock+0x74>)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	4413      	add	r3, r2
 800a916:	330c      	adds	r3, #12
 800a918:	89fa      	ldrh	r2, [r7, #14]
 800a91a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a91c:	89fb      	ldrh	r3, [r7, #14]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d105      	bne.n	800a92e <dec_lock+0x5a>
 800a922:	4a09      	ldr	r2, [pc, #36]	@ (800a948 <dec_lock+0x74>)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	4413      	add	r3, r2
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	737b      	strb	r3, [r7, #13]
 800a932:	e001      	b.n	800a938 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a934:	2302      	movs	r3, #2
 800a936:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a938:	7b7b      	ldrb	r3, [r7, #13]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	2000982c 	.word	0x2000982c

0800a94c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e010      	b.n	800a97c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a95a:	4a0d      	ldr	r2, [pc, #52]	@ (800a990 <clear_lock+0x44>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	4413      	add	r3, r2
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	429a      	cmp	r2, r3
 800a968:	d105      	bne.n	800a976 <clear_lock+0x2a>
 800a96a:	4a09      	ldr	r2, [pc, #36]	@ (800a990 <clear_lock+0x44>)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	4413      	add	r3, r2
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3301      	adds	r3, #1
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d9eb      	bls.n	800a95a <clear_lock+0xe>
	}
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	2000982c 	.word	0x2000982c

0800a994 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	78db      	ldrb	r3, [r3, #3]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d034      	beq.n	800aa12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7858      	ldrb	r0, [r3, #1]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	f7ff fd3e 	bl	800a43c <disk_write>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	73fb      	strb	r3, [r7, #15]
 800a9ca:	e022      	b.n	800aa12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	1ad2      	subs	r2, r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d217      	bcs.n	800aa12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	789b      	ldrb	r3, [r3, #2]
 800a9e6:	613b      	str	r3, [r7, #16]
 800a9e8:	e010      	b.n	800aa0c <sync_window+0x78>
					wsect += fs->fsize;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7858      	ldrb	r0, [r3, #1]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a9fe:	2301      	movs	r3, #1
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	f7ff fd1b 	bl	800a43c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d8eb      	bhi.n	800a9ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d01b      	beq.n	800aa6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff ffad 	bl	800a994 <sync_window>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d113      	bne.n	800aa6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7858      	ldrb	r0, [r3, #1]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa4e:	2301      	movs	r3, #1
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	f7ff fcd3 	bl	800a3fc <disk_read>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d004      	beq.n	800aa66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff ff87 	bl	800a994 <sync_window>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d159      	bne.n	800ab44 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d149      	bne.n	800ab2c <sync_fs+0xb4>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	791b      	ldrb	r3, [r3, #4]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d145      	bne.n	800ab2c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	899b      	ldrh	r3, [r3, #12]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	2100      	movs	r1, #0
 800aaae:	f7ff fda7 	bl	800a600 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3338      	adds	r3, #56	@ 0x38
 800aab6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aaba:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fd36 	bl	800a530 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3338      	adds	r3, #56	@ 0x38
 800aac8:	4921      	ldr	r1, [pc, #132]	@ (800ab50 <sync_fs+0xd8>)
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fd4b 	bl	800a566 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3338      	adds	r3, #56	@ 0x38
 800aad4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800aad8:	491e      	ldr	r1, [pc, #120]	@ (800ab54 <sync_fs+0xdc>)
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fd43 	bl	800a566 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3338      	adds	r3, #56	@ 0x38
 800aae4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f7ff fd39 	bl	800a566 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3338      	adds	r3, #56	@ 0x38
 800aaf8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	4619      	mov	r1, r3
 800ab02:	4610      	mov	r0, r2
 800ab04:	f7ff fd2f 	bl	800a566 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7858      	ldrb	r0, [r3, #1]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab20:	2301      	movs	r3, #1
 800ab22:	f7ff fc8b 	bl	800a43c <disk_write>
			fs->fsi_flag = 0;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	785b      	ldrb	r3, [r3, #1]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fca1 	bl	800a47c <disk_ioctl>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <sync_fs+0xcc>
 800ab40:	2301      	movs	r3, #1
 800ab42:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	41615252 	.word	0x41615252
 800ab54:	61417272 	.word	0x61417272

0800ab58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	3b02      	subs	r3, #2
 800ab66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	3b02      	subs	r3, #2
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d301      	bcc.n	800ab78 <clust2sect+0x20>
 800ab74:	2300      	movs	r3, #0
 800ab76:	e008      	b.n	800ab8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	895b      	ldrh	r3, [r3, #10]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	fb03 f202 	mul.w	r2, r3, r2
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab88:	4413      	add	r3, r2
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d904      	bls.n	800abb6 <get_fat+0x20>
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d302      	bcc.n	800abbc <get_fat+0x26>
		val = 1;	/* Internal error */
 800abb6:	2301      	movs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	e0ba      	b.n	800ad32 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	f000 8082 	beq.w	800acd0 <get_fat+0x13a>
 800abcc:	2b03      	cmp	r3, #3
 800abce:	f300 80a6 	bgt.w	800ad1e <get_fat+0x188>
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d002      	beq.n	800abdc <get_fat+0x46>
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d055      	beq.n	800ac86 <get_fat+0xf0>
 800abda:	e0a0      	b.n	800ad1e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	085b      	lsrs	r3, r3, #1
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	899b      	ldrh	r3, [r3, #12]
 800abf2:	4619      	mov	r1, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800abfa:	4413      	add	r3, r2
 800abfc:	4619      	mov	r1, r3
 800abfe:	6938      	ldr	r0, [r7, #16]
 800ac00:	f7ff ff0c 	bl	800aa1c <move_window>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f040 808c 	bne.w	800ad24 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	60fa      	str	r2, [r7, #12]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	8992      	ldrh	r2, [r2, #12]
 800ac16:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac1a:	fb01 f202 	mul.w	r2, r1, r2
 800ac1e:	1a9b      	subs	r3, r3, r2
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	4413      	add	r3, r2
 800ac24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	899b      	ldrh	r3, [r3, #12]
 800ac32:	4619      	mov	r1, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6938      	ldr	r0, [r7, #16]
 800ac40:	f7ff feec 	bl	800aa1c <move_window>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d16e      	bne.n	800ad28 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	899b      	ldrh	r3, [r3, #12]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac56:	fb01 f202 	mul.w	r2, r1, r2
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac64:	021b      	lsls	r3, r3, #8
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <get_fat+0xe6>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	091b      	lsrs	r3, r3, #4
 800ac7a:	e002      	b.n	800ac82 <get_fat+0xec>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac82:	617b      	str	r3, [r7, #20]
			break;
 800ac84:	e055      	b.n	800ad32 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	899b      	ldrh	r3, [r3, #12]
 800ac8e:	085b      	lsrs	r3, r3, #1
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6938      	ldr	r0, [r7, #16]
 800aca0:	f7ff febc 	bl	800aa1c <move_window>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d140      	bne.n	800ad2c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	8992      	ldrh	r2, [r2, #12]
 800acb8:	fbb3 f0f2 	udiv	r0, r3, r2
 800acbc:	fb00 f202 	mul.w	r2, r0, r2
 800acc0:	1a9b      	subs	r3, r3, r2
 800acc2:	440b      	add	r3, r1
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff fbf7 	bl	800a4b8 <ld_word>
 800acca:	4603      	mov	r3, r0
 800accc:	617b      	str	r3, [r7, #20]
			break;
 800acce:	e030      	b.n	800ad32 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	899b      	ldrh	r3, [r3, #12]
 800acd8:	089b      	lsrs	r3, r3, #2
 800acda:	b29b      	uxth	r3, r3
 800acdc:	4619      	mov	r1, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ace4:	4413      	add	r3, r2
 800ace6:	4619      	mov	r1, r3
 800ace8:	6938      	ldr	r0, [r7, #16]
 800acea:	f7ff fe97 	bl	800aa1c <move_window>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11d      	bne.n	800ad30 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	8992      	ldrh	r2, [r2, #12]
 800ad02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad06:	fb00 f202 	mul.w	r2, r0, r2
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fbeb 	bl	800a4ea <ld_dword>
 800ad14:	4603      	mov	r3, r0
 800ad16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ad1a:	617b      	str	r3, [r7, #20]
			break;
 800ad1c:	e009      	b.n	800ad32 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad1e:	2301      	movs	r3, #1
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	e006      	b.n	800ad32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad24:	bf00      	nop
 800ad26:	e004      	b.n	800ad32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad28:	bf00      	nop
 800ad2a:	e002      	b.n	800ad32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad2c:	bf00      	nop
 800ad2e:	e000      	b.n	800ad32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad30:	bf00      	nop
		}
	}

	return val;
 800ad32:	697b      	ldr	r3, [r7, #20]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad3c:	b590      	push	{r4, r7, lr}
 800ad3e:	b089      	sub	sp, #36	@ 0x24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	f240 8109 	bls.w	800af66 <put_fat+0x22a>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	69db      	ldr	r3, [r3, #28]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	f080 8103 	bcs.w	800af66 <put_fat+0x22a>
		switch (fs->fs_type) {
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	f000 80b6 	beq.w	800aed6 <put_fat+0x19a>
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	f300 80fb 	bgt.w	800af66 <put_fat+0x22a>
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d003      	beq.n	800ad7c <put_fat+0x40>
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	f000 8083 	beq.w	800ae80 <put_fat+0x144>
 800ad7a:	e0f4      	b.n	800af66 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	61bb      	str	r3, [r7, #24]
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	085b      	lsrs	r3, r3, #1
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	4413      	add	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	899b      	ldrh	r3, [r3, #12]
 800ad92:	4619      	mov	r1, r3
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad9a:	4413      	add	r3, r2
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7ff fe3c 	bl	800aa1c <move_window>
 800ada4:	4603      	mov	r3, r0
 800ada6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ada8:	7ffb      	ldrb	r3, [r7, #31]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f040 80d4 	bne.w	800af58 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	61ba      	str	r2, [r7, #24]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	8992      	ldrh	r2, [r2, #12]
 800adc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800adc4:	fb00 f202 	mul.w	r2, r0, r2
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	440b      	add	r3, r1
 800adcc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00d      	beq.n	800adf4 <put_fat+0xb8>
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	b25b      	sxtb	r3, r3
 800adde:	f003 030f 	and.w	r3, r3, #15
 800ade2:	b25a      	sxtb	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	b25b      	sxtb	r3, r3
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	b25b      	sxtb	r3, r3
 800adec:	4313      	orrs	r3, r2
 800adee:	b25b      	sxtb	r3, r3
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	e001      	b.n	800adf8 <put_fat+0xbc>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	899b      	ldrh	r3, [r3, #12]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae12:	4413      	add	r3, r2
 800ae14:	4619      	mov	r1, r3
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff fe00 	bl	800aa1c <move_window>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae20:	7ffb      	ldrb	r3, [r7, #31]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f040 809a 	bne.w	800af5c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	899b      	ldrh	r3, [r3, #12]
 800ae32:	461a      	mov	r2, r3
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae3a:	fb00 f202 	mul.w	r2, r0, r2
 800ae3e:	1a9b      	subs	r3, r3, r2
 800ae40:	440b      	add	r3, r1
 800ae42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <put_fat+0x11a>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	e00e      	b.n	800ae74 <put_fat+0x138>
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	b25b      	sxtb	r3, r3
 800ae5c:	f023 030f 	bic.w	r3, r3, #15
 800ae60:	b25a      	sxtb	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	0a1b      	lsrs	r3, r3, #8
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	b25b      	sxtb	r3, r3
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	b25b      	sxtb	r3, r3
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	70da      	strb	r2, [r3, #3]
			break;
 800ae7e:	e072      	b.n	800af66 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	899b      	ldrh	r3, [r3, #12]
 800ae88:	085b      	lsrs	r3, r3, #1
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae94:	4413      	add	r3, r2
 800ae96:	4619      	mov	r1, r3
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7ff fdbf 	bl	800aa1c <move_window>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aea2:	7ffb      	ldrb	r3, [r7, #31]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d15b      	bne.n	800af60 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	8992      	ldrh	r2, [r2, #12]
 800aeb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeba:	fb00 f202 	mul.w	r2, r0, r2
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	440b      	add	r3, r1
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	b292      	uxth	r2, r2
 800aec6:	4611      	mov	r1, r2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff fb31 	bl	800a530 <st_word>
			fs->wflag = 1;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2201      	movs	r2, #1
 800aed2:	70da      	strb	r2, [r3, #3]
			break;
 800aed4:	e047      	b.n	800af66 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	899b      	ldrh	r3, [r3, #12]
 800aede:	089b      	lsrs	r3, r3, #2
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4619      	mov	r1, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeea:	4413      	add	r3, r2
 800aeec:	4619      	mov	r1, r3
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff fd94 	bl	800aa1c <move_window>
 800aef4:	4603      	mov	r3, r0
 800aef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aef8:	7ffb      	ldrb	r3, [r7, #31]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d132      	bne.n	800af64 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	8992      	ldrh	r2, [r2, #12]
 800af12:	fbb3 f0f2 	udiv	r0, r3, r2
 800af16:	fb00 f202 	mul.w	r2, r0, r2
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	440b      	add	r3, r1
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fae3 	bl	800a4ea <ld_dword>
 800af24:	4603      	mov	r3, r0
 800af26:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800af2a:	4323      	orrs	r3, r4
 800af2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	8992      	ldrh	r2, [r2, #12]
 800af3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800af40:	fb00 f202 	mul.w	r2, r0, r2
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	440b      	add	r3, r1
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fb0b 	bl	800a566 <st_dword>
			fs->wflag = 1;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	70da      	strb	r2, [r3, #3]
			break;
 800af56:	e006      	b.n	800af66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800af58:	bf00      	nop
 800af5a:	e004      	b.n	800af66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800af5c:	bf00      	nop
 800af5e:	e002      	b.n	800af66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800af64:	bf00      	nop
		}
	}
	return res;
 800af66:	7ffb      	ldrb	r3, [r7, #31]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3724      	adds	r7, #36	@ 0x24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd90      	pop	{r4, r7, pc}

0800af70 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d904      	bls.n	800af96 <remove_chain+0x26>
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	429a      	cmp	r2, r3
 800af94:	d301      	bcc.n	800af9a <remove_chain+0x2a>
 800af96:	2302      	movs	r3, #2
 800af98:	e04b      	b.n	800b032 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00c      	beq.n	800afba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800afa0:	f04f 32ff 	mov.w	r2, #4294967295
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	69b8      	ldr	r0, [r7, #24]
 800afa8:	f7ff fec8 	bl	800ad3c <put_fat>
 800afac:	4603      	mov	r3, r0
 800afae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800afb0:	7ffb      	ldrb	r3, [r7, #31]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <remove_chain+0x4a>
 800afb6:	7ffb      	ldrb	r3, [r7, #31]
 800afb8:	e03b      	b.n	800b032 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7ff fdea 	bl	800ab96 <get_fat>
 800afc2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d031      	beq.n	800b02e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d101      	bne.n	800afd4 <remove_chain+0x64>
 800afd0:	2302      	movs	r3, #2
 800afd2:	e02e      	b.n	800b032 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d101      	bne.n	800afe0 <remove_chain+0x70>
 800afdc:	2301      	movs	r3, #1
 800afde:	e028      	b.n	800b032 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800afe0:	2200      	movs	r2, #0
 800afe2:	68b9      	ldr	r1, [r7, #8]
 800afe4:	69b8      	ldr	r0, [r7, #24]
 800afe6:	f7ff fea9 	bl	800ad3c <put_fat>
 800afea:	4603      	mov	r3, r0
 800afec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800afee:	7ffb      	ldrb	r3, [r7, #31]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <remove_chain+0x88>
 800aff4:	7ffb      	ldrb	r3, [r7, #31]
 800aff6:	e01c      	b.n	800b032 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	699a      	ldr	r2, [r3, #24]
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	69db      	ldr	r3, [r3, #28]
 800b000:	3b02      	subs	r3, #2
 800b002:	429a      	cmp	r2, r3
 800b004:	d20b      	bcs.n	800b01e <remove_chain+0xae>
			fs->free_clst++;
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	791b      	ldrb	r3, [r3, #4]
 800b014:	f043 0301 	orr.w	r3, r3, #1
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d3c6      	bcc.n	800afba <remove_chain+0x4a>
 800b02c:	e000      	b.n	800b030 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b02e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3720      	adds	r7, #32
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b088      	sub	sp, #32
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10d      	bne.n	800b06c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <create_chain+0x2c>
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	429a      	cmp	r2, r3
 800b064:	d31b      	bcc.n	800b09e <create_chain+0x64>
 800b066:	2301      	movs	r3, #1
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	e018      	b.n	800b09e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff fd91 	bl	800ab96 <get_fat>
 800b074:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d801      	bhi.n	800b080 <create_chain+0x46>
 800b07c:	2301      	movs	r3, #1
 800b07e:	e070      	b.n	800b162 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d101      	bne.n	800b08c <create_chain+0x52>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	e06a      	b.n	800b162 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	429a      	cmp	r2, r3
 800b094:	d201      	bcs.n	800b09a <create_chain+0x60>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	e063      	b.n	800b162 <create_chain+0x128>
		scl = clst;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d307      	bcc.n	800b0c2 <create_chain+0x88>
				ncl = 2;
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b0b6:	69fa      	ldr	r2, [r7, #28]
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d901      	bls.n	800b0c2 <create_chain+0x88>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e04f      	b.n	800b162 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b0c2:	69f9      	ldr	r1, [r7, #28]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff fd66 	bl	800ab96 <get_fat>
 800b0ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00e      	beq.n	800b0f0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d003      	beq.n	800b0e0 <create_chain+0xa6>
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0de:	d101      	bne.n	800b0e4 <create_chain+0xaa>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	e03e      	b.n	800b162 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d1da      	bne.n	800b0a2 <create_chain+0x68>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e038      	b.n	800b162 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b0f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f6:	69f9      	ldr	r1, [r7, #28]
 800b0f8:	6938      	ldr	r0, [r7, #16]
 800b0fa:	f7ff fe1f 	bl	800ad3c <put_fat>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b102:	7dfb      	ldrb	r3, [r7, #23]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d109      	bne.n	800b11c <create_chain+0xe2>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d006      	beq.n	800b11c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6938      	ldr	r0, [r7, #16]
 800b114:	f7ff fe12 	bl	800ad3c <put_fat>
 800b118:	4603      	mov	r3, r0
 800b11a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d116      	bne.n	800b150 <create_chain+0x116>
		fs->last_clst = ncl;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	699a      	ldr	r2, [r3, #24]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	3b02      	subs	r3, #2
 800b132:	429a      	cmp	r2, r3
 800b134:	d804      	bhi.n	800b140 <create_chain+0x106>
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	1e5a      	subs	r2, r3, #1
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	791b      	ldrb	r3, [r3, #4]
 800b144:	f043 0301 	orr.w	r3, r3, #1
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	711a      	strb	r2, [r3, #4]
 800b14e:	e007      	b.n	800b160 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d102      	bne.n	800b15c <create_chain+0x122>
 800b156:	f04f 33ff 	mov.w	r3, #4294967295
 800b15a:	e000      	b.n	800b15e <create_chain+0x124>
 800b15c:	2301      	movs	r3, #1
 800b15e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b160:	69fb      	ldr	r3, [r7, #28]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b087      	sub	sp, #28
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17e:	3304      	adds	r3, #4
 800b180:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	899b      	ldrh	r3, [r3, #12]
 800b186:	461a      	mov	r2, r3
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	8952      	ldrh	r2, [r2, #10]
 800b192:	fbb3 f3f2 	udiv	r3, r3, r2
 800b196:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	1d1a      	adds	r2, r3, #4
 800b19c:	613a      	str	r2, [r7, #16]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <clmt_clust+0x42>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e010      	b.n	800b1ce <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d307      	bcc.n	800b1c4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1c2:	e7e9      	b.n	800b198 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b1c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	4413      	add	r3, r2
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b086      	sub	sp, #24
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1f0:	d204      	bcs.n	800b1fc <dir_sdi+0x22>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	f003 031f 	and.w	r3, r3, #31
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e071      	b.n	800b2e4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d106      	bne.n	800b220 <dir_sdi+0x46>
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d902      	bls.n	800b220 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10c      	bne.n	800b240 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	095b      	lsrs	r3, r3, #5
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	8912      	ldrh	r2, [r2, #8]
 800b22e:	4293      	cmp	r3, r2
 800b230:	d301      	bcc.n	800b236 <dir_sdi+0x5c>
 800b232:	2302      	movs	r3, #2
 800b234:	e056      	b.n	800b2e4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	61da      	str	r2, [r3, #28]
 800b23e:	e02d      	b.n	800b29c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	895b      	ldrh	r3, [r3, #10]
 800b244:	461a      	mov	r2, r3
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	899b      	ldrh	r3, [r3, #12]
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
 800b24e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b250:	e019      	b.n	800b286 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6979      	ldr	r1, [r7, #20]
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff fc9d 	bl	800ab96 <get_fat>
 800b25c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b264:	d101      	bne.n	800b26a <dir_sdi+0x90>
 800b266:	2301      	movs	r3, #1
 800b268:	e03c      	b.n	800b2e4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d904      	bls.n	800b27a <dir_sdi+0xa0>
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	429a      	cmp	r2, r3
 800b278:	d301      	bcc.n	800b27e <dir_sdi+0xa4>
 800b27a:	2302      	movs	r3, #2
 800b27c:	e032      	b.n	800b2e4 <dir_sdi+0x10a>
			ofs -= csz;
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d2e1      	bcs.n	800b252 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b28e:	6979      	ldr	r1, [r7, #20]
 800b290:	6938      	ldr	r0, [r7, #16]
 800b292:	f7ff fc61 	bl	800ab58 <clust2sect>
 800b296:	4602      	mov	r2, r0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <dir_sdi+0xd4>
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e01a      	b.n	800b2e4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	69da      	ldr	r2, [r3, #28]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	899b      	ldrh	r3, [r3, #12]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2be:	441a      	add	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	899b      	ldrh	r3, [r3, #12]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2d6:	fb00 f202 	mul.w	r2, r0, r2
 800b2da:	1a9b      	subs	r3, r3, r2
 800b2dc:	18ca      	adds	r2, r1, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	3320      	adds	r3, #32
 800b302:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <dir_next+0x28>
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b312:	d301      	bcc.n	800b318 <dir_next+0x2c>
 800b314:	2304      	movs	r3, #4
 800b316:	e0bb      	b.n	800b490 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	899b      	ldrh	r3, [r3, #12]
 800b31c:	461a      	mov	r2, r3
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	fbb3 f1f2 	udiv	r1, r3, r2
 800b324:	fb01 f202 	mul.w	r2, r1, r2
 800b328:	1a9b      	subs	r3, r3, r2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f040 809d 	bne.w	800b46a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10b      	bne.n	800b35a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	095b      	lsrs	r3, r3, #5
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	8912      	ldrh	r2, [r2, #8]
 800b34a:	4293      	cmp	r3, r2
 800b34c:	f0c0 808d 	bcc.w	800b46a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	61da      	str	r2, [r3, #28]
 800b356:	2304      	movs	r3, #4
 800b358:	e09a      	b.n	800b490 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	899b      	ldrh	r3, [r3, #12]
 800b35e:	461a      	mov	r2, r3
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	fbb3 f3f2 	udiv	r3, r3, r2
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	8952      	ldrh	r2, [r2, #10]
 800b36a:	3a01      	subs	r2, #1
 800b36c:	4013      	ands	r3, r2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d17b      	bne.n	800b46a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	f7ff fc0b 	bl	800ab96 <get_fat>
 800b380:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d801      	bhi.n	800b38c <dir_next+0xa0>
 800b388:	2302      	movs	r3, #2
 800b38a:	e081      	b.n	800b490 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d101      	bne.n	800b398 <dir_next+0xac>
 800b394:	2301      	movs	r3, #1
 800b396:	e07b      	b.n	800b490 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d359      	bcc.n	800b456 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d104      	bne.n	800b3b2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	61da      	str	r2, [r3, #28]
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	e06e      	b.n	800b490 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	f7ff fe3d 	bl	800b03a <create_chain>
 800b3c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <dir_next+0xe0>
 800b3c8:	2307      	movs	r3, #7
 800b3ca:	e061      	b.n	800b490 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <dir_next+0xea>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e05c      	b.n	800b490 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3dc:	d101      	bne.n	800b3e2 <dir_next+0xf6>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e056      	b.n	800b490 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7ff fad6 	bl	800a994 <sync_window>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <dir_next+0x106>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e04e      	b.n	800b490 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	899b      	ldrh	r3, [r3, #12]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	2100      	movs	r1, #0
 800b400:	f7ff f8fe 	bl	800a600 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b404:	2300      	movs	r3, #0
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	6979      	ldr	r1, [r7, #20]
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fba4 	bl	800ab58 <clust2sect>
 800b410:	4602      	mov	r2, r0
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	635a      	str	r2, [r3, #52]	@ 0x34
 800b416:	e012      	b.n	800b43e <dir_next+0x152>
						fs->wflag = 1;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff fab8 	bl	800a994 <sync_window>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <dir_next+0x142>
 800b42a:	2301      	movs	r3, #1
 800b42c:	e030      	b.n	800b490 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	3301      	adds	r3, #1
 800b432:	613b      	str	r3, [r7, #16]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	895b      	ldrh	r3, [r3, #10]
 800b442:	461a      	mov	r2, r3
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	4293      	cmp	r3, r2
 800b448:	d3e6      	bcc.n	800b418 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	1ad2      	subs	r2, r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b45c:	6979      	ldr	r1, [r7, #20]
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f7ff fb7a 	bl	800ab58 <clust2sect>
 800b464:	4602      	mov	r2, r0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	899b      	ldrh	r3, [r3, #12]
 800b47a:	461a      	mov	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b482:	fb00 f202 	mul.w	r2, r0, r2
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	18ca      	adds	r2, r1, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff fe95 	bl	800b1da <dir_sdi>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d12b      	bne.n	800b512 <dir_alloc+0x7a>
		n = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7ff faa9 	bl	800aa1c <move_window>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b4ce:	7dfb      	ldrb	r3, [r7, #23]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d11d      	bne.n	800b510 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2be5      	cmp	r3, #229	@ 0xe5
 800b4dc:	d004      	beq.n	800b4e8 <dir_alloc+0x50>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d107      	bne.n	800b4f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	613b      	str	r3, [r7, #16]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d102      	bne.n	800b4fc <dir_alloc+0x64>
 800b4f6:	e00c      	b.n	800b512 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7ff fef4 	bl	800b2ec <dir_next>
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b508:	7dfb      	ldrb	r3, [r7, #23]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0d7      	beq.n	800b4be <dir_alloc+0x26>
 800b50e:	e000      	b.n	800b512 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b510:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	2b04      	cmp	r3, #4
 800b516:	d101      	bne.n	800b51c <dir_alloc+0x84>
 800b518:	2307      	movs	r3, #7
 800b51a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	331a      	adds	r3, #26
 800b534:	4618      	mov	r0, r3
 800b536:	f7fe ffbf 	bl	800a4b8 <ld_word>
 800b53a:	4603      	mov	r3, r0
 800b53c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b03      	cmp	r3, #3
 800b544:	d109      	bne.n	800b55a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	3314      	adds	r3, #20
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe ffb4 	bl	800a4b8 <ld_word>
 800b550:	4603      	mov	r3, r0
 800b552:	041b      	lsls	r3, r3, #16
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b55a:	68fb      	ldr	r3, [r7, #12]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	331a      	adds	r3, #26
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	b292      	uxth	r2, r2
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe ffd8 	bl	800a530 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b03      	cmp	r3, #3
 800b586:	d109      	bne.n	800b59c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f103 0214 	add.w	r2, r3, #20
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	0c1b      	lsrs	r3, r3, #16
 800b592:	b29b      	uxth	r3, r3
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f7fe ffca 	bl	800a530 <st_word>
	}
}
 800b59c:	bf00      	nop
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	331a      	adds	r3, #26
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe ff80 	bl	800a4b8 <ld_word>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <cmp_lfn+0x1e>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e059      	b.n	800b676 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5ca:	1e5a      	subs	r2, r3, #1
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b5d8:	2301      	movs	r3, #1
 800b5da:	81fb      	strh	r3, [r7, #14]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	613b      	str	r3, [r7, #16]
 800b5e0:	e033      	b.n	800b64a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b5e2:	4a27      	ldr	r2, [pc, #156]	@ (800b680 <cmp_lfn+0xdc>)
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe ff61 	bl	800a4b8 <ld_word>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b5fa:	89fb      	ldrh	r3, [r7, #14]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01a      	beq.n	800b636 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2bfe      	cmp	r3, #254	@ 0xfe
 800b604:	d812      	bhi.n	800b62c <cmp_lfn+0x88>
 800b606:	89bb      	ldrh	r3, [r7, #12]
 800b608:	4618      	mov	r0, r3
 800b60a:	f001 fd3d 	bl	800d088 <ff_wtoupper>
 800b60e:	4603      	mov	r3, r0
 800b610:	461c      	mov	r4, r3
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	1c5a      	adds	r2, r3, #1
 800b616:	617a      	str	r2, [r7, #20]
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	4413      	add	r3, r2
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f001 fd31 	bl	800d088 <ff_wtoupper>
 800b626:	4603      	mov	r3, r0
 800b628:	429c      	cmp	r4, r3
 800b62a:	d001      	beq.n	800b630 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b62c:	2300      	movs	r3, #0
 800b62e:	e022      	b.n	800b676 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b630:	89bb      	ldrh	r3, [r7, #12]
 800b632:	81fb      	strh	r3, [r7, #14]
 800b634:	e006      	b.n	800b644 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b636:	89bb      	ldrh	r3, [r7, #12]
 800b638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d001      	beq.n	800b644 <cmp_lfn+0xa0>
 800b640:	2300      	movs	r3, #0
 800b642:	e018      	b.n	800b676 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	3301      	adds	r3, #1
 800b648:	613b      	str	r3, [r7, #16]
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b0c      	cmp	r3, #12
 800b64e:	d9c8      	bls.n	800b5e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <cmp_lfn+0xd0>
 800b65c:	89fb      	ldrh	r3, [r7, #14]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d008      	beq.n	800b674 <cmp_lfn+0xd0>
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	4413      	add	r3, r2
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <cmp_lfn+0xd0>
 800b670:	2300      	movs	r3, #0
 800b672:	e000      	b.n	800b676 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b674:	2301      	movs	r3, #1
}
 800b676:	4618      	mov	r0, r3
 800b678:	371c      	adds	r7, #28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd90      	pop	{r4, r7, pc}
 800b67e:	bf00      	nop
 800b680:	0801b2c4 	.word	0x0801b2c4

0800b684 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4611      	mov	r1, r2
 800b690:	461a      	mov	r2, r3
 800b692:	460b      	mov	r3, r1
 800b694:	71fb      	strb	r3, [r7, #7]
 800b696:	4613      	mov	r3, r2
 800b698:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	330d      	adds	r3, #13
 800b69e:	79ba      	ldrb	r2, [r7, #6]
 800b6a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	330b      	adds	r3, #11
 800b6a6:	220f      	movs	r2, #15
 800b6a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	330c      	adds	r3, #12
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	331a      	adds	r3, #26
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe ff39 	bl	800a530 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	1e5a      	subs	r2, r3, #1
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	82fb      	strh	r3, [r7, #22]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b6d6:	8afb      	ldrh	r3, [r7, #22]
 800b6d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d007      	beq.n	800b6f0 <put_lfn+0x6c>
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	61fa      	str	r2, [r7, #28]
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b6f0:	4a17      	ldr	r2, [pc, #92]	@ (800b750 <put_lfn+0xcc>)
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	8afa      	ldrh	r2, [r7, #22]
 800b700:	4611      	mov	r1, r2
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe ff14 	bl	800a530 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b708:	8afb      	ldrh	r3, [r7, #22]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d102      	bne.n	800b714 <put_lfn+0x90>
 800b70e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b712:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	3301      	adds	r3, #1
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2b0c      	cmp	r3, #12
 800b71e:	d9da      	bls.n	800b6d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b720:	8afb      	ldrh	r3, [r7, #22]
 800b722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b726:	4293      	cmp	r3, r2
 800b728:	d006      	beq.n	800b738 <put_lfn+0xb4>
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	4413      	add	r3, r2
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <put_lfn+0xbc>
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	79fa      	ldrb	r2, [r7, #7]
 800b744:	701a      	strb	r2, [r3, #0]
}
 800b746:	bf00      	nop
 800b748:	3720      	adds	r7, #32
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	0801b2c4 	.word	0x0801b2c4

0800b754 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08c      	sub	sp, #48	@ 0x30
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b762:	220b      	movs	r2, #11
 800b764:	68b9      	ldr	r1, [r7, #8]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7fe ff29 	bl	800a5be <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b05      	cmp	r3, #5
 800b770:	d92b      	bls.n	800b7ca <gen_numname+0x76>
		sr = seq;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b776:	e022      	b.n	800b7be <gen_numname+0x6a>
			wc = *lfn++;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	1c9a      	adds	r2, r3, #2
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b782:	2300      	movs	r3, #0
 800b784:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b786:	e017      	b.n	800b7b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	005a      	lsls	r2, r3, #1
 800b78c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	4413      	add	r3, r2
 800b794:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b796:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b798:	085b      	lsrs	r3, r3, #1
 800b79a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d005      	beq.n	800b7b2 <gen_numname+0x5e>
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b7ac:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b7b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	2b0f      	cmp	r3, #15
 800b7bc:	d9e4      	bls.n	800b788 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1d8      	bne.n	800b778 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b7ca:	2307      	movs	r3, #7
 800b7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 030f 	and.w	r3, r3, #15
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	3330      	adds	r3, #48	@ 0x30
 800b7da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b7de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7e2:	2b39      	cmp	r3, #57	@ 0x39
 800b7e4:	d904      	bls.n	800b7f0 <gen_numname+0x9c>
 800b7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7ea:	3307      	adds	r3, #7
 800b7ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f2:	1e5a      	subs	r2, r3, #1
 800b7f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b7f6:	3330      	adds	r3, #48	@ 0x30
 800b7f8:	443b      	add	r3, r7
 800b7fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b7fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	091b      	lsrs	r3, r3, #4
 800b806:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1df      	bne.n	800b7ce <gen_numname+0x7a>
	ns[i] = '~';
 800b80e:	f107 0214 	add.w	r2, r7, #20
 800b812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b814:	4413      	add	r3, r2
 800b816:	227e      	movs	r2, #126	@ 0x7e
 800b818:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b81a:	2300      	movs	r3, #0
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b81e:	e002      	b.n	800b826 <gen_numname+0xd2>
 800b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b822:	3301      	adds	r3, #1
 800b824:	627b      	str	r3, [r7, #36]	@ 0x24
 800b826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d205      	bcs.n	800b83a <gen_numname+0xe6>
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	4413      	add	r3, r2
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b20      	cmp	r3, #32
 800b838:	d1f2      	bne.n	800b820 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83c:	2b07      	cmp	r3, #7
 800b83e:	d807      	bhi.n	800b850 <gen_numname+0xfc>
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b846:	3330      	adds	r3, #48	@ 0x30
 800b848:	443b      	add	r3, r7
 800b84a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b84e:	e000      	b.n	800b852 <gen_numname+0xfe>
 800b850:	2120      	movs	r1, #32
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	627a      	str	r2, [r7, #36]	@ 0x24
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	460a      	mov	r2, r1
 800b85e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	2b07      	cmp	r3, #7
 800b864:	d9e9      	bls.n	800b83a <gen_numname+0xe6>
}
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	3730      	adds	r7, #48	@ 0x30
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b87c:	230b      	movs	r3, #11
 800b87e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b880:	7bfb      	ldrb	r3, [r7, #15]
 800b882:	b2da      	uxtb	r2, r3
 800b884:	0852      	lsrs	r2, r2, #1
 800b886:	01db      	lsls	r3, r3, #7
 800b888:	4313      	orrs	r3, r2
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	1c59      	adds	r1, r3, #1
 800b890:	6079      	str	r1, [r7, #4]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	4413      	add	r3, r2
 800b896:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	60bb      	str	r3, [r7, #8]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1ed      	bne.n	800b880 <sum_sfn+0x10>
	return sum;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b086      	sub	sp, #24
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fc89 	bl	800b1da <dir_sdi>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <dir_find+0x24>
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	e0a9      	b.n	800ba2a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8d6:	23ff      	movs	r3, #255	@ 0xff
 800b8d8:	753b      	strb	r3, [r7, #20]
 800b8da:	7d3b      	ldrb	r3, [r7, #20]
 800b8dc:	757b      	strb	r3, [r7, #21]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6938      	ldr	r0, [r7, #16]
 800b8ee:	f7ff f895 	bl	800aa1c <move_window>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f040 8090 	bne.w	800ba1e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b906:	7dbb      	ldrb	r3, [r7, #22]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <dir_find+0x60>
 800b90c:	2304      	movs	r3, #4
 800b90e:	75fb      	strb	r3, [r7, #23]
 800b910:	e08a      	b.n	800ba28 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	330b      	adds	r3, #11
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b91e:	73fb      	strb	r3, [r7, #15]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7bfa      	ldrb	r2, [r7, #15]
 800b924:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b926:	7dbb      	ldrb	r3, [r7, #22]
 800b928:	2be5      	cmp	r3, #229	@ 0xe5
 800b92a:	d007      	beq.n	800b93c <dir_find+0x8a>
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	f003 0308 	and.w	r3, r3, #8
 800b932:	2b00      	cmp	r3, #0
 800b934:	d009      	beq.n	800b94a <dir_find+0x98>
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	2b0f      	cmp	r3, #15
 800b93a:	d006      	beq.n	800b94a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b93c:	23ff      	movs	r3, #255	@ 0xff
 800b93e:	757b      	strb	r3, [r7, #21]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f04f 32ff 	mov.w	r2, #4294967295
 800b946:	631a      	str	r2, [r3, #48]	@ 0x30
 800b948:	e05e      	b.n	800ba08 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	2b0f      	cmp	r3, #15
 800b94e:	d136      	bne.n	800b9be <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d154      	bne.n	800ba08 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b95e:	7dbb      	ldrb	r3, [r7, #22]
 800b960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00d      	beq.n	800b984 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	7b5b      	ldrb	r3, [r3, #13]
 800b96e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b970:	7dbb      	ldrb	r3, [r7, #22]
 800b972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b976:	75bb      	strb	r3, [r7, #22]
 800b978:	7dbb      	ldrb	r3, [r7, #22]
 800b97a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	695a      	ldr	r2, [r3, #20]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b984:	7dba      	ldrb	r2, [r7, #22]
 800b986:	7d7b      	ldrb	r3, [r7, #21]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d115      	bne.n	800b9b8 <dir_find+0x106>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	330d      	adds	r3, #13
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	7d3a      	ldrb	r2, [r7, #20]
 800b996:	429a      	cmp	r2, r3
 800b998:	d10e      	bne.n	800b9b8 <dir_find+0x106>
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	691a      	ldr	r2, [r3, #16]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	f7ff fdfd 	bl	800b5a4 <cmp_lfn>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <dir_find+0x106>
 800b9b0:	7d7b      	ldrb	r3, [r7, #21]
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	e000      	b.n	800b9ba <dir_find+0x108>
 800b9b8:	23ff      	movs	r3, #255	@ 0xff
 800b9ba:	757b      	strb	r3, [r7, #21]
 800b9bc:	e024      	b.n	800ba08 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b9be:	7d7b      	ldrb	r3, [r7, #21]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d109      	bne.n	800b9d8 <dir_find+0x126>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff ff51 	bl	800b870 <sum_sfn>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	7d3b      	ldrb	r3, [r7, #20]
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d024      	beq.n	800ba22 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <dir_find+0x14a>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a18      	ldr	r0, [r3, #32]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3324      	adds	r3, #36	@ 0x24
 800b9ee:	220b      	movs	r2, #11
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	f7fe fe20 	bl	800a636 <mem_cmp>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d014      	beq.n	800ba26 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9fc:	23ff      	movs	r3, #255	@ 0xff
 800b9fe:	757b      	strb	r3, [r7, #21]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f04f 32ff 	mov.w	r2, #4294967295
 800ba06:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba08:	2100      	movs	r1, #0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff fc6e 	bl	800b2ec <dir_next>
 800ba10:	4603      	mov	r3, r0
 800ba12:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f43f af65 	beq.w	800b8e6 <dir_find+0x34>
 800ba1c:	e004      	b.n	800ba28 <dir_find+0x176>
		if (res != FR_OK) break;
 800ba1e:	bf00      	nop
 800ba20:	e002      	b.n	800ba28 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba22:	bf00      	nop
 800ba24:	e000      	b.n	800ba28 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba26:	bf00      	nop

	return res;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08c      	sub	sp, #48	@ 0x30
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba48:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <dir_register+0x20>
 800ba50:	2306      	movs	r3, #6
 800ba52:	e0e0      	b.n	800bc16 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ba54:	2300      	movs	r3, #0
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba58:	e002      	b.n	800ba60 <dir_register+0x2c>
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	691a      	ldr	r2, [r3, #16]
 800ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	4413      	add	r3, r2
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f4      	bne.n	800ba5a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800ba76:	f107 030c 	add.w	r3, r7, #12
 800ba7a:	220c      	movs	r2, #12
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fd9e 	bl	800a5be <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d032      	beq.n	800baf2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2240      	movs	r2, #64	@ 0x40
 800ba90:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ba94:	2301      	movs	r3, #1
 800ba96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba98:	e016      	b.n	800bac8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	691a      	ldr	r2, [r3, #16]
 800baa4:	f107 010c 	add.w	r1, r7, #12
 800baa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baaa:	f7ff fe53 	bl	800b754 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff feff 	bl	800b8b2 <dir_find>
 800bab4:	4603      	mov	r3, r0
 800bab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800baba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac4:	3301      	adds	r3, #1
 800bac6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baca:	2b63      	cmp	r3, #99	@ 0x63
 800bacc:	d9e5      	bls.n	800ba9a <dir_register+0x66>
 800bace:	e000      	b.n	800bad2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bad0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad4:	2b64      	cmp	r3, #100	@ 0x64
 800bad6:	d101      	bne.n	800badc <dir_register+0xa8>
 800bad8:	2307      	movs	r3, #7
 800bada:	e09c      	b.n	800bc16 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800badc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d002      	beq.n	800baea <dir_register+0xb6>
 800bae4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bae8:	e095      	b.n	800bc16 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800baea:	7dfa      	ldrb	r2, [r7, #23]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <dir_register+0xd8>
 800bafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafe:	330c      	adds	r3, #12
 800bb00:	4a47      	ldr	r2, [pc, #284]	@ (800bc20 <dir_register+0x1ec>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	089b      	lsrs	r3, r3, #2
 800bb08:	3301      	adds	r3, #1
 800bb0a:	e000      	b.n	800bb0e <dir_register+0xda>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bb10:	6a39      	ldr	r1, [r7, #32]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fcc0 	bl	800b498 <dir_alloc>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d148      	bne.n	800bbb8 <dir_register+0x184>
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	623b      	str	r3, [r7, #32]
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d042      	beq.n	800bbb8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	695a      	ldr	r2, [r3, #20]
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	015b      	lsls	r3, r3, #5
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff fb4b 	bl	800b1da <dir_sdi>
 800bb44:	4603      	mov	r3, r0
 800bb46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bb4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d132      	bne.n	800bbb8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	3324      	adds	r3, #36	@ 0x24
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff fe8a 	bl	800b870 <sum_sfn>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	69db      	ldr	r3, [r3, #28]
 800bb64:	4619      	mov	r1, r3
 800bb66:	69f8      	ldr	r0, [r7, #28]
 800bb68:	f7fe ff58 	bl	800aa1c <move_window>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800bb72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d11d      	bne.n	800bbb6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	6918      	ldr	r0, [r3, #16]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a19      	ldr	r1, [r3, #32]
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	7efb      	ldrb	r3, [r7, #27]
 800bb88:	f7ff fd7c 	bl	800b684 <put_lfn>
				fs->wflag = 1;
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bb92:	2100      	movs	r1, #0
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff fba9 	bl	800b2ec <dir_next>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800bba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d107      	bne.n	800bbb8 <dir_register+0x184>
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	623b      	str	r3, [r7, #32]
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1d5      	bne.n	800bb60 <dir_register+0x12c>
 800bbb4:	e000      	b.n	800bbb8 <dir_register+0x184>
				if (res != FR_OK) break;
 800bbb6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bbb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d128      	bne.n	800bc12 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	69f8      	ldr	r0, [r7, #28]
 800bbc8:	f7fe ff28 	bl	800aa1c <move_window>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bbd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d11b      	bne.n	800bc12 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fd0c 	bl	800a600 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a18      	ldr	r0, [r3, #32]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3324      	adds	r3, #36	@ 0x24
 800bbf0:	220b      	movs	r2, #11
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f7fe fce3 	bl	800a5be <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	330c      	adds	r3, #12
 800bc04:	f002 0218 	and.w	r2, r2, #24
 800bc08:	b2d2      	uxtb	r2, r2
 800bc0a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3730      	adds	r7, #48	@ 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	4ec4ec4f 	.word	0x4ec4ec4f

0800bc24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	@ 0x28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	613b      	str	r3, [r7, #16]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	61ba      	str	r2, [r7, #24]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bc52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc54:	2b1f      	cmp	r3, #31
 800bc56:	d940      	bls.n	800bcda <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bc58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc5a:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc5c:	d006      	beq.n	800bc6c <create_name+0x48>
 800bc5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc60:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc62:	d110      	bne.n	800bc86 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bc64:	e002      	b.n	800bc6c <create_name+0x48>
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	61bb      	str	r3, [r7, #24]
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	4413      	add	r3, r2
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc76:	d0f6      	beq.n	800bc66 <create_name+0x42>
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc82:	d0f0      	beq.n	800bc66 <create_name+0x42>
			break;
 800bc84:	e02a      	b.n	800bcdc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2bfe      	cmp	r3, #254	@ 0xfe
 800bc8a:	d901      	bls.n	800bc90 <create_name+0x6c>
 800bc8c:	2306      	movs	r3, #6
 800bc8e:	e17d      	b.n	800bf8c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bc90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bc96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc98:	2101      	movs	r1, #1
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 f9b8 	bl	800d010 <ff_convert>
 800bca0:	4603      	mov	r3, r0
 800bca2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bca4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <create_name+0x8a>
 800bcaa:	2306      	movs	r3, #6
 800bcac:	e16e      	b.n	800bf8c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bcae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcb0:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcb2:	d809      	bhi.n	800bcc8 <create_name+0xa4>
 800bcb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	488d      	ldr	r0, [pc, #564]	@ (800bef0 <create_name+0x2cc>)
 800bcba:	f7fe fce3 	bl	800a684 <chk_chr>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <create_name+0xa4>
 800bcc4:	2306      	movs	r3, #6
 800bcc6:	e161      	b.n	800bf8c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	617a      	str	r2, [r7, #20]
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bcd6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bcd8:	e7b4      	b.n	800bc44 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bcda:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	441a      	add	r2, r3
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bce8:	2b1f      	cmp	r3, #31
 800bcea:	d801      	bhi.n	800bcf0 <create_name+0xcc>
 800bcec:	2304      	movs	r3, #4
 800bcee:	e000      	b.n	800bcf2 <create_name+0xce>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bcf6:	e011      	b.n	800bd1c <create_name+0xf8>
		w = lfn[di - 1];
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	4413      	add	r3, r2
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800bd0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd0c:	2b20      	cmp	r3, #32
 800bd0e:	d002      	beq.n	800bd16 <create_name+0xf2>
 800bd10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd12:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd14:	d106      	bne.n	800bd24 <create_name+0x100>
		di--;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1ea      	bne.n	800bcf8 <create_name+0xd4>
 800bd22:	e000      	b.n	800bd26 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bd24:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	2200      	movs	r2, #0
 800bd30:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <create_name+0x118>
 800bd38:	2306      	movs	r3, #6
 800bd3a:	e127      	b.n	800bf8c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3324      	adds	r3, #36	@ 0x24
 800bd40:	220b      	movs	r2, #11
 800bd42:	2120      	movs	r1, #32
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fe fc5b 	bl	800a600 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	61bb      	str	r3, [r7, #24]
 800bd4e:	e002      	b.n	800bd56 <create_name+0x132>
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	3301      	adds	r3, #1
 800bd54:	61bb      	str	r3, [r7, #24]
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	d0f5      	beq.n	800bd50 <create_name+0x12c>
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	881b      	ldrh	r3, [r3, #0]
 800bd6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd70:	d0ee      	beq.n	800bd50 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d009      	beq.n	800bd8c <create_name+0x168>
 800bd78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd7c:	f043 0303 	orr.w	r3, r3, #3
 800bd80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bd84:	e002      	b.n	800bd8c <create_name+0x168>
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d009      	beq.n	800bda6 <create_name+0x182>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bda4:	d1ef      	bne.n	800bd86 <create_name+0x162>

	i = b = 0; ni = 8;
 800bda6:	2300      	movs	r3, #0
 800bda8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bdac:	2300      	movs	r3, #0
 800bdae:	623b      	str	r3, [r7, #32]
 800bdb0:	2308      	movs	r3, #8
 800bdb2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	61ba      	str	r2, [r7, #24]
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bdc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 8090 	beq.w	800beec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bdcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bdce:	2b20      	cmp	r3, #32
 800bdd0:	d006      	beq.n	800bde0 <create_name+0x1bc>
 800bdd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bdd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdd6:	d10a      	bne.n	800bdee <create_name+0x1ca>
 800bdd8:	69ba      	ldr	r2, [r7, #24]
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d006      	beq.n	800bdee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bde0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bde4:	f043 0303 	orr.w	r3, r3, #3
 800bde8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bdec:	e07d      	b.n	800beea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bdee:	6a3a      	ldr	r2, [r7, #32]
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d203      	bcs.n	800bdfe <create_name+0x1da>
 800bdf6:	69ba      	ldr	r2, [r7, #24]
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d123      	bne.n	800be46 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	2b0b      	cmp	r3, #11
 800be02:	d106      	bne.n	800be12 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800be04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be08:	f043 0303 	orr.w	r3, r3, #3
 800be0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be10:	e075      	b.n	800befe <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	429a      	cmp	r2, r3
 800be18:	d005      	beq.n	800be26 <create_name+0x202>
 800be1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be1e:	f043 0303 	orr.w	r3, r3, #3
 800be22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d866      	bhi.n	800befc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	61bb      	str	r3, [r7, #24]
 800be32:	2308      	movs	r3, #8
 800be34:	623b      	str	r3, [r7, #32]
 800be36:	230b      	movs	r3, #11
 800be38:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800be3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800be44:	e051      	b.n	800beea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800be46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be48:	2b7f      	cmp	r3, #127	@ 0x7f
 800be4a:	d914      	bls.n	800be76 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800be4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be4e:	2100      	movs	r1, #0
 800be50:	4618      	mov	r0, r3
 800be52:	f001 f8dd 	bl	800d010 <ff_convert>
 800be56:	4603      	mov	r3, r0
 800be58:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800be5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d004      	beq.n	800be6a <create_name+0x246>
 800be60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be62:	3b80      	subs	r3, #128	@ 0x80
 800be64:	4a23      	ldr	r2, [pc, #140]	@ (800bef4 <create_name+0x2d0>)
 800be66:	5cd3      	ldrb	r3, [r2, r3]
 800be68:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800be6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be6e:	f043 0302 	orr.w	r3, r3, #2
 800be72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800be76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d007      	beq.n	800be8c <create_name+0x268>
 800be7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be7e:	4619      	mov	r1, r3
 800be80:	481d      	ldr	r0, [pc, #116]	@ (800bef8 <create_name+0x2d4>)
 800be82:	f7fe fbff 	bl	800a684 <chk_chr>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d008      	beq.n	800be9e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800be8c:	235f      	movs	r3, #95	@ 0x5f
 800be8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800be90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be94:	f043 0303 	orr.w	r3, r3, #3
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be9c:	e01b      	b.n	800bed6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800be9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bea0:	2b40      	cmp	r3, #64	@ 0x40
 800bea2:	d909      	bls.n	800beb8 <create_name+0x294>
 800bea4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bea6:	2b5a      	cmp	r3, #90	@ 0x5a
 800bea8:	d806      	bhi.n	800beb8 <create_name+0x294>
					b |= 2;
 800beaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800beae:	f043 0302 	orr.w	r3, r3, #2
 800beb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800beb6:	e00e      	b.n	800bed6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800beb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beba:	2b60      	cmp	r3, #96	@ 0x60
 800bebc:	d90b      	bls.n	800bed6 <create_name+0x2b2>
 800bebe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bec0:	2b7a      	cmp	r3, #122	@ 0x7a
 800bec2:	d808      	bhi.n	800bed6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bec4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bec8:	f043 0301 	orr.w	r3, r3, #1
 800becc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bed0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bed2:	3b20      	subs	r3, #32
 800bed4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	623a      	str	r2, [r7, #32]
 800bedc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bede:	b2d1      	uxtb	r1, r2
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	4413      	add	r3, r2
 800bee4:	460a      	mov	r2, r1
 800bee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800beea:	e763      	b.n	800bdb4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800beec:	bf00      	nop
 800beee:	e006      	b.n	800befe <create_name+0x2da>
 800bef0:	0800e214 	.word	0x0800e214
 800bef4:	0801b244 	.word	0x0801b244
 800bef8:	0800e220 	.word	0x0800e220
			if (si > di) break;			/* No extension */
 800befc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bf04:	2be5      	cmp	r3, #229	@ 0xe5
 800bf06:	d103      	bne.n	800bf10 <create_name+0x2ec>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2205      	movs	r2, #5
 800bf0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	2b08      	cmp	r3, #8
 800bf14:	d104      	bne.n	800bf20 <create_name+0x2fc>
 800bf16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bf20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf24:	f003 030c 	and.w	r3, r3, #12
 800bf28:	2b0c      	cmp	r3, #12
 800bf2a:	d005      	beq.n	800bf38 <create_name+0x314>
 800bf2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	d105      	bne.n	800bf44 <create_name+0x320>
 800bf38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf3c:	f043 0302 	orr.w	r3, r3, #2
 800bf40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bf44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d117      	bne.n	800bf80 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bf50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf54:	f003 0303 	and.w	r3, r3, #3
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d105      	bne.n	800bf68 <create_name+0x344>
 800bf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf60:	f043 0310 	orr.w	r3, r3, #16
 800bf64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bf68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf6c:	f003 030c 	and.w	r3, r3, #12
 800bf70:	2b04      	cmp	r3, #4
 800bf72:	d105      	bne.n	800bf80 <create_name+0x35c>
 800bf74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf78:	f043 0308 	orr.w	r3, r3, #8
 800bf7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf86:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800bf8a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3728      	adds	r7, #40	@ 0x28
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bfa8:	e002      	b.n	800bfb0 <follow_path+0x1c>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	3301      	adds	r3, #1
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfb6:	d0f8      	beq.n	800bfaa <follow_path+0x16>
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b5c      	cmp	r3, #92	@ 0x5c
 800bfbe:	d0f4      	beq.n	800bfaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b1f      	cmp	r3, #31
 800bfcc:	d80a      	bhi.n	800bfe4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2280      	movs	r2, #128	@ 0x80
 800bfd2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff f8fe 	bl	800b1da <dir_sdi>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	75fb      	strb	r3, [r7, #23]
 800bfe2:	e048      	b.n	800c076 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7ff fe1b 	bl	800bc24 <create_name>
 800bfee:	4603      	mov	r3, r0
 800bff0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d139      	bne.n	800c06c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7ff fc5a 	bl	800b8b2 <dir_find>
 800bffe:	4603      	mov	r3, r0
 800c000:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c008:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00a      	beq.n	800c026 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c010:	7dfb      	ldrb	r3, [r7, #23]
 800c012:	2b04      	cmp	r3, #4
 800c014:	d12c      	bne.n	800c070 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c016:	7afb      	ldrb	r3, [r7, #11]
 800c018:	f003 0304 	and.w	r3, r3, #4
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d127      	bne.n	800c070 <follow_path+0xdc>
 800c020:	2305      	movs	r3, #5
 800c022:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c024:	e024      	b.n	800c070 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	f003 0304 	and.w	r3, r3, #4
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d121      	bne.n	800c074 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	799b      	ldrb	r3, [r3, #6]
 800c034:	f003 0310 	and.w	r3, r3, #16
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d102      	bne.n	800c042 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c03c:	2305      	movs	r3, #5
 800c03e:	75fb      	strb	r3, [r7, #23]
 800c040:	e019      	b.n	800c076 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	8992      	ldrh	r2, [r2, #12]
 800c050:	fbb3 f0f2 	udiv	r0, r3, r2
 800c054:	fb00 f202 	mul.w	r2, r0, r2
 800c058:	1a9b      	subs	r3, r3, r2
 800c05a:	440b      	add	r3, r1
 800c05c:	4619      	mov	r1, r3
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f7ff fa61 	bl	800b526 <ld_clust>
 800c064:	4602      	mov	r2, r0
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c06a:	e7bb      	b.n	800bfe4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c06c:	bf00      	nop
 800c06e:	e002      	b.n	800c076 <follow_path+0xe2>
				break;
 800c070:	bf00      	nop
 800c072:	e000      	b.n	800c076 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c074:	bf00      	nop
			}
		}
	}

	return res;
 800c076:	7dfb      	ldrb	r3, [r7, #23]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c088:	f04f 33ff 	mov.w	r3, #4294967295
 800c08c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d031      	beq.n	800c0fa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	617b      	str	r3, [r7, #20]
 800c09c:	e002      	b.n	800c0a4 <get_ldnumber+0x24>
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	617b      	str	r3, [r7, #20]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b1f      	cmp	r3, #31
 800c0aa:	d903      	bls.n	800c0b4 <get_ldnumber+0x34>
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	2b3a      	cmp	r3, #58	@ 0x3a
 800c0b2:	d1f4      	bne.n	800c09e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	2b3a      	cmp	r3, #58	@ 0x3a
 800c0ba:	d11c      	bne.n	800c0f6 <get_ldnumber+0x76>
			tp = *path;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	60fa      	str	r2, [r7, #12]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	3b30      	subs	r3, #48	@ 0x30
 800c0cc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b09      	cmp	r3, #9
 800c0d2:	d80e      	bhi.n	800c0f2 <get_ldnumber+0x72>
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d10a      	bne.n	800c0f2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d107      	bne.n	800c0f2 <get_ldnumber+0x72>
					vol = (int)i;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	617b      	str	r3, [r7, #20]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	e002      	b.n	800c0fc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c0fa:	693b      	ldr	r3, [r7, #16]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	70da      	strb	r2, [r3, #3]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f04f 32ff 	mov.w	r2, #4294967295
 800c11e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7fe fc7a 	bl	800aa1c <move_window>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <check_fs+0x2a>
 800c12e:	2304      	movs	r3, #4
 800c130:	e038      	b.n	800c1a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3338      	adds	r3, #56	@ 0x38
 800c136:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe f9bc 	bl	800a4b8 <ld_word>
 800c140:	4603      	mov	r3, r0
 800c142:	461a      	mov	r2, r3
 800c144:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c148:	429a      	cmp	r2, r3
 800c14a:	d001      	beq.n	800c150 <check_fs+0x48>
 800c14c:	2303      	movs	r3, #3
 800c14e:	e029      	b.n	800c1a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c156:	2be9      	cmp	r3, #233	@ 0xe9
 800c158:	d009      	beq.n	800c16e <check_fs+0x66>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c160:	2beb      	cmp	r3, #235	@ 0xeb
 800c162:	d11e      	bne.n	800c1a2 <check_fs+0x9a>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c16a:	2b90      	cmp	r3, #144	@ 0x90
 800c16c:	d119      	bne.n	800c1a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3338      	adds	r3, #56	@ 0x38
 800c172:	3336      	adds	r3, #54	@ 0x36
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe f9b8 	bl	800a4ea <ld_dword>
 800c17a:	4603      	mov	r3, r0
 800c17c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c180:	4a0a      	ldr	r2, [pc, #40]	@ (800c1ac <check_fs+0xa4>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d101      	bne.n	800c18a <check_fs+0x82>
 800c186:	2300      	movs	r3, #0
 800c188:	e00c      	b.n	800c1a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3338      	adds	r3, #56	@ 0x38
 800c18e:	3352      	adds	r3, #82	@ 0x52
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe f9aa 	bl	800a4ea <ld_dword>
 800c196:	4603      	mov	r3, r0
 800c198:	4a05      	ldr	r2, [pc, #20]	@ (800c1b0 <check_fs+0xa8>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d101      	bne.n	800c1a2 <check_fs+0x9a>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e000      	b.n	800c1a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c1a2:	2302      	movs	r3, #2
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	00544146 	.word	0x00544146
 800c1b0:	33544146 	.word	0x33544146

0800c1b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b096      	sub	sp, #88	@ 0x58
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff ff59 	bl	800c080 <get_ldnumber>
 800c1ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da01      	bge.n	800c1da <find_volume+0x26>
 800c1d6:	230b      	movs	r3, #11
 800c1d8:	e265      	b.n	800c6a6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c1da:	4a9f      	ldr	r2, [pc, #636]	@ (800c458 <find_volume+0x2a4>)
 800c1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <find_volume+0x3a>
 800c1ea:	230c      	movs	r3, #12
 800c1ec:	e25b      	b.n	800c6a6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c1f4:	79fb      	ldrb	r3, [r7, #7]
 800c1f6:	f023 0301 	bic.w	r3, r3, #1
 800c1fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01a      	beq.n	800c23a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c206:	785b      	ldrb	r3, [r3, #1]
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe f8b5 	bl	800a378 <disk_status>
 800c20e:	4603      	mov	r3, r0
 800c210:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c214:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10c      	bne.n	800c23a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d007      	beq.n	800c236 <find_volume+0x82>
 800c226:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c22a:	f003 0304 	and.w	r3, r3, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c232:	230a      	movs	r3, #10
 800c234:	e237      	b.n	800c6a6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c236:	2300      	movs	r3, #0
 800c238:	e235      	b.n	800c6a6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23c:	2200      	movs	r2, #0
 800c23e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c242:	b2da      	uxtb	r2, r3
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24a:	785b      	ldrb	r3, [r3, #1]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe f8ad 	bl	800a3ac <disk_initialize>
 800c252:	4603      	mov	r3, r0
 800c254:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c258:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c264:	2303      	movs	r3, #3
 800c266:	e21e      	b.n	800c6a6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d007      	beq.n	800c27e <find_volume+0xca>
 800c26e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c27a:	230a      	movs	r3, #10
 800c27c:	e213      	b.n	800c6a6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c280:	7858      	ldrb	r0, [r3, #1]
 800c282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c284:	330c      	adds	r3, #12
 800c286:	461a      	mov	r2, r3
 800c288:	2102      	movs	r1, #2
 800c28a:	f7fe f8f7 	bl	800a47c <disk_ioctl>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <find_volume+0xe4>
 800c294:	2301      	movs	r3, #1
 800c296:	e206      	b.n	800c6a6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29a:	899b      	ldrh	r3, [r3, #12]
 800c29c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2a0:	d80d      	bhi.n	800c2be <find_volume+0x10a>
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a4:	899b      	ldrh	r3, [r3, #12]
 800c2a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2aa:	d308      	bcc.n	800c2be <find_volume+0x10a>
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ae:	899b      	ldrh	r3, [r3, #12]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b4:	899b      	ldrh	r3, [r3, #12]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <find_volume+0x10e>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e1f1      	b.n	800c6a6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c2c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c2c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2ca:	f7ff ff1d 	bl	800c108 <check_fs>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d149      	bne.n	800c370 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2dc:	2300      	movs	r3, #0
 800c2de:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2e0:	e01e      	b.n	800c320 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c2e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c2f0:	4413      	add	r3, r2
 800c2f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <find_volume+0x158>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c300:	3308      	adds	r3, #8
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe f8f1 	bl	800a4ea <ld_dword>
 800c308:	4602      	mov	r2, r0
 800c30a:	e000      	b.n	800c30e <find_volume+0x15a>
 800c30c:	2200      	movs	r2, #0
 800c30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	3358      	adds	r3, #88	@ 0x58
 800c314:	443b      	add	r3, r7
 800c316:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c31c:	3301      	adds	r3, #1
 800c31e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c322:	2b03      	cmp	r3, #3
 800c324:	d9dd      	bls.n	800c2e2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c326:	2300      	movs	r3, #0
 800c328:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <find_volume+0x182>
 800c330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c332:	3b01      	subs	r3, #1
 800c334:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	3358      	adds	r3, #88	@ 0x58
 800c33c:	443b      	add	r3, r7
 800c33e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c342:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <find_volume+0x1a2>
 800c34a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c34c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c34e:	f7ff fedb 	bl	800c108 <check_fs>
 800c352:	4603      	mov	r3, r0
 800c354:	e000      	b.n	800c358 <find_volume+0x1a4>
 800c356:	2303      	movs	r3, #3
 800c358:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c35c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c360:	2b01      	cmp	r3, #1
 800c362:	d905      	bls.n	800c370 <find_volume+0x1bc>
 800c364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c366:	3301      	adds	r3, #1
 800c368:	643b      	str	r3, [r7, #64]	@ 0x40
 800c36a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d9e2      	bls.n	800c336 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c374:	2b04      	cmp	r3, #4
 800c376:	d101      	bne.n	800c37c <find_volume+0x1c8>
 800c378:	2301      	movs	r3, #1
 800c37a:	e194      	b.n	800c6a6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c37c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c380:	2b01      	cmp	r3, #1
 800c382:	d901      	bls.n	800c388 <find_volume+0x1d4>
 800c384:	230d      	movs	r3, #13
 800c386:	e18e      	b.n	800c6a6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38a:	3338      	adds	r3, #56	@ 0x38
 800c38c:	330b      	adds	r3, #11
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe f892 	bl	800a4b8 <ld_word>
 800c394:	4603      	mov	r3, r0
 800c396:	461a      	mov	r2, r3
 800c398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39a:	899b      	ldrh	r3, [r3, #12]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d001      	beq.n	800c3a4 <find_volume+0x1f0>
 800c3a0:	230d      	movs	r3, #13
 800c3a2:	e180      	b.n	800c6a6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a6:	3338      	adds	r3, #56	@ 0x38
 800c3a8:	3316      	adds	r3, #22
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fe f884 	bl	800a4b8 <ld_word>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d106      	bne.n	800c3c8 <find_volume+0x214>
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3bc:	3338      	adds	r3, #56	@ 0x38
 800c3be:	3324      	adds	r3, #36	@ 0x24
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe f892 	bl	800a4ea <ld_dword>
 800c3c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3da:	789b      	ldrb	r3, [r3, #2]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d005      	beq.n	800c3ec <find_volume+0x238>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e2:	789b      	ldrb	r3, [r3, #2]
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d001      	beq.n	800c3ec <find_volume+0x238>
 800c3e8:	230d      	movs	r3, #13
 800c3ea:	e15c      	b.n	800c6a6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ee:	789b      	ldrb	r3, [r3, #2]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3f4:	fb02 f303 	mul.w	r3, r2, r3
 800c3f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c400:	461a      	mov	r2, r3
 800c402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c404:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	895b      	ldrh	r3, [r3, #10]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d008      	beq.n	800c420 <find_volume+0x26c>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c410:	895b      	ldrh	r3, [r3, #10]
 800c412:	461a      	mov	r2, r3
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	895b      	ldrh	r3, [r3, #10]
 800c418:	3b01      	subs	r3, #1
 800c41a:	4013      	ands	r3, r2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <find_volume+0x270>
 800c420:	230d      	movs	r3, #13
 800c422:	e140      	b.n	800c6a6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c426:	3338      	adds	r3, #56	@ 0x38
 800c428:	3311      	adds	r3, #17
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe f844 	bl	800a4b8 <ld_word>
 800c430:	4603      	mov	r3, r0
 800c432:	461a      	mov	r2, r3
 800c434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c436:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	891b      	ldrh	r3, [r3, #8]
 800c43c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c43e:	8992      	ldrh	r2, [r2, #12]
 800c440:	0952      	lsrs	r2, r2, #5
 800c442:	b292      	uxth	r2, r2
 800c444:	fbb3 f1f2 	udiv	r1, r3, r2
 800c448:	fb01 f202 	mul.w	r2, r1, r2
 800c44c:	1a9b      	subs	r3, r3, r2
 800c44e:	b29b      	uxth	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d003      	beq.n	800c45c <find_volume+0x2a8>
 800c454:	230d      	movs	r3, #13
 800c456:	e126      	b.n	800c6a6 <find_volume+0x4f2>
 800c458:	20009824 	.word	0x20009824

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45e:	3338      	adds	r3, #56	@ 0x38
 800c460:	3313      	adds	r3, #19
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe f828 	bl	800a4b8 <ld_word>
 800c468:	4603      	mov	r3, r0
 800c46a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c46c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <find_volume+0x2cc>
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	3338      	adds	r3, #56	@ 0x38
 800c476:	3320      	adds	r3, #32
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe f836 	bl	800a4ea <ld_dword>
 800c47e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c482:	3338      	adds	r3, #56	@ 0x38
 800c484:	330e      	adds	r3, #14
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe f816 	bl	800a4b8 <ld_word>
 800c48c:	4603      	mov	r3, r0
 800c48e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c490:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c492:	2b00      	cmp	r3, #0
 800c494:	d101      	bne.n	800c49a <find_volume+0x2e6>
 800c496:	230d      	movs	r3, #13
 800c498:	e105      	b.n	800c6a6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c49a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c49e:	4413      	add	r3, r2
 800c4a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4a2:	8911      	ldrh	r1, [r2, #8]
 800c4a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4a6:	8992      	ldrh	r2, [r2, #12]
 800c4a8:	0952      	lsrs	r2, r2, #5
 800c4aa:	b292      	uxth	r2, r2
 800c4ac:	fbb1 f2f2 	udiv	r2, r1, r2
 800c4b0:	b292      	uxth	r2, r2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c4b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d201      	bcs.n	800c4c2 <find_volume+0x30e>
 800c4be:	230d      	movs	r3, #13
 800c4c0:	e0f1      	b.n	800c6a6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c4c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4ca:	8952      	ldrh	r2, [r2, #10]
 800c4cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4d0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <find_volume+0x328>
 800c4d8:	230d      	movs	r3, #13
 800c4da:	e0e4      	b.n	800c6a6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d802      	bhi.n	800c4f2 <find_volume+0x33e>
 800c4ec:	2302      	movs	r3, #2
 800c4ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d802      	bhi.n	800c502 <find_volume+0x34e>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	1c9a      	adds	r2, r3, #2
 800c506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c508:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c50e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c510:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c514:	441a      	add	r2, r3
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c51a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51e:	441a      	add	r2, r3
 800c520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c522:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c524:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d11e      	bne.n	800c56a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	3338      	adds	r3, #56	@ 0x38
 800c530:	332a      	adds	r3, #42	@ 0x2a
 800c532:	4618      	mov	r0, r3
 800c534:	f7fd ffc0 	bl	800a4b8 <ld_word>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <find_volume+0x38e>
 800c53e:	230d      	movs	r3, #13
 800c540:	e0b1      	b.n	800c6a6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c544:	891b      	ldrh	r3, [r3, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <find_volume+0x39a>
 800c54a:	230d      	movs	r3, #13
 800c54c:	e0ab      	b.n	800c6a6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c550:	3338      	adds	r3, #56	@ 0x38
 800c552:	332c      	adds	r3, #44	@ 0x2c
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd ffc8 	bl	800a4ea <ld_dword>
 800c55a:	4602      	mov	r2, r0
 800c55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	647b      	str	r3, [r7, #68]	@ 0x44
 800c568:	e01f      	b.n	800c5aa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56c:	891b      	ldrh	r3, [r3, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <find_volume+0x3c2>
 800c572:	230d      	movs	r3, #13
 800c574:	e097      	b.n	800c6a6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c57a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c57c:	441a      	add	r2, r3
 800c57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c580:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c582:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c586:	2b02      	cmp	r3, #2
 800c588:	d103      	bne.n	800c592 <find_volume+0x3de>
 800c58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	e00a      	b.n	800c5a8 <find_volume+0x3f4>
 800c592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c594:	69da      	ldr	r2, [r3, #28]
 800c596:	4613      	mov	r3, r2
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	4413      	add	r3, r2
 800c59c:	085a      	lsrs	r2, r3, #1
 800c59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c5a8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ac:	6a1a      	ldr	r2, [r3, #32]
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b0:	899b      	ldrh	r3, [r3, #12]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5b6:	440b      	add	r3, r1
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c5bc:	8989      	ldrh	r1, [r1, #12]
 800c5be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d201      	bcs.n	800c5ca <find_volume+0x416>
 800c5c6:	230d      	movs	r3, #13
 800c5c8:	e06d      	b.n	800c6a6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d0:	619a      	str	r2, [r3, #24]
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d4:	699a      	ldr	r2, [r3, #24]
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5dc:	2280      	movs	r2, #128	@ 0x80
 800c5de:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d149      	bne.n	800c67c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ea:	3338      	adds	r3, #56	@ 0x38
 800c5ec:	3330      	adds	r3, #48	@ 0x30
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fd ff62 	bl	800a4b8 <ld_word>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d140      	bne.n	800c67c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c5fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	4619      	mov	r1, r3
 800c600:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c602:	f7fe fa0b 	bl	800aa1c <move_window>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d137      	bne.n	800c67c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60e:	2200      	movs	r2, #0
 800c610:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c614:	3338      	adds	r3, #56	@ 0x38
 800c616:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fd ff4c 	bl	800a4b8 <ld_word>
 800c620:	4603      	mov	r3, r0
 800c622:	461a      	mov	r2, r3
 800c624:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c628:	429a      	cmp	r2, r3
 800c62a:	d127      	bne.n	800c67c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62e:	3338      	adds	r3, #56	@ 0x38
 800c630:	4618      	mov	r0, r3
 800c632:	f7fd ff5a 	bl	800a4ea <ld_dword>
 800c636:	4603      	mov	r3, r0
 800c638:	4a1d      	ldr	r2, [pc, #116]	@ (800c6b0 <find_volume+0x4fc>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d11e      	bne.n	800c67c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	3338      	adds	r3, #56	@ 0x38
 800c642:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c646:	4618      	mov	r0, r3
 800c648:	f7fd ff4f 	bl	800a4ea <ld_dword>
 800c64c:	4603      	mov	r3, r0
 800c64e:	4a19      	ldr	r2, [pc, #100]	@ (800c6b4 <find_volume+0x500>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d113      	bne.n	800c67c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c656:	3338      	adds	r3, #56	@ 0x38
 800c658:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fd ff44 	bl	800a4ea <ld_dword>
 800c662:	4602      	mov	r2, r0
 800c664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c666:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66a:	3338      	adds	r3, #56	@ 0x38
 800c66c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c670:	4618      	mov	r0, r3
 800c672:	f7fd ff3a 	bl	800a4ea <ld_dword>
 800c676:	4602      	mov	r2, r0
 800c678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c682:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c684:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b8 <find_volume+0x504>)
 800c686:	881b      	ldrh	r3, [r3, #0]
 800c688:	3301      	adds	r3, #1
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <find_volume+0x504>)
 800c68e:	801a      	strh	r2, [r3, #0]
 800c690:	4b09      	ldr	r3, [pc, #36]	@ (800c6b8 <find_volume+0x504>)
 800c692:	881a      	ldrh	r2, [r3, #0]
 800c694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c696:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69a:	4a08      	ldr	r2, [pc, #32]	@ (800c6bc <find_volume+0x508>)
 800c69c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c69e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c6a0:	f7fe f954 	bl	800a94c <clear_lock>
#endif
	return FR_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3758      	adds	r7, #88	@ 0x58
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	41615252 	.word	0x41615252
 800c6b4:	61417272 	.word	0x61417272
 800c6b8:	20009828 	.word	0x20009828
 800c6bc:	2000984c 	.word	0x2000984c

0800c6c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c6ca:	2309      	movs	r3, #9
 800c6cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d01c      	beq.n	800c70e <validate+0x4e>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d018      	beq.n	800c70e <validate+0x4e>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d013      	beq.n	800c70e <validate+0x4e>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	889a      	ldrh	r2, [r3, #4]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	88db      	ldrh	r3, [r3, #6]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d10c      	bne.n	800c70e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	785b      	ldrb	r3, [r3, #1]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fd fe3c 	bl	800a378 <disk_status>
 800c700:	4603      	mov	r3, r0
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <validate+0x4e>
			res = FR_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <validate+0x5a>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	e000      	b.n	800c71c <validate+0x5c>
 800c71a:	2300      	movs	r3, #0
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	6013      	str	r3, [r2, #0]
	return res;
 800c720:	7bfb      	ldrb	r3, [r7, #15]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
	...

0800c72c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c73e:	f107 0310 	add.w	r3, r7, #16
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff fc9c 	bl	800c080 <get_ldnumber>
 800c748:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da01      	bge.n	800c754 <f_mount+0x28>
 800c750:	230b      	movs	r3, #11
 800c752:	e02b      	b.n	800c7ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c754:	4a17      	ldr	r2, [pc, #92]	@ (800c7b4 <f_mount+0x88>)
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c75c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d005      	beq.n	800c770 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c764:	69b8      	ldr	r0, [r7, #24]
 800c766:	f7fe f8f1 	bl	800a94c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	2200      	movs	r2, #0
 800c76e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	490d      	ldr	r1, [pc, #52]	@ (800c7b4 <f_mount+0x88>)
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <f_mount+0x66>
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d001      	beq.n	800c796 <f_mount+0x6a>
 800c792:	2300      	movs	r3, #0
 800c794:	e00a      	b.n	800c7ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c796:	f107 010c 	add.w	r1, r7, #12
 800c79a:	f107 0308 	add.w	r3, r7, #8
 800c79e:	2200      	movs	r2, #0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fd07 	bl	800c1b4 <find_volume>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3720      	adds	r7, #32
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	20009824 	.word	0x20009824

0800c7b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b09a      	sub	sp, #104	@ 0x68
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <f_open+0x18>
 800c7cc:	2309      	movs	r3, #9
 800c7ce:	e1b7      	b.n	800cb40 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c7d0:	79fb      	ldrb	r3, [r7, #7]
 800c7d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c7d8:	79fa      	ldrb	r2, [r7, #7]
 800c7da:	f107 0114 	add.w	r1, r7, #20
 800c7de:	f107 0308 	add.w	r3, r7, #8
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fce6 	bl	800c1b4 <find_volume>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c7ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f040 819b 	bne.w	800cb2e <f_open+0x376>
		dj.obj.fs = fs;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	f107 0318 	add.w	r3, r7, #24
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff fbc5 	bl	800bf94 <follow_path>
 800c80a:	4603      	mov	r3, r0
 800c80c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c810:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c814:	2b00      	cmp	r3, #0
 800c816:	d118      	bne.n	800c84a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c818:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c81c:	b25b      	sxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	da03      	bge.n	800c82a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c822:	2306      	movs	r3, #6
 800c824:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c828:	e00f      	b.n	800c84a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	bf8c      	ite	hi
 800c830:	2301      	movhi	r3, #1
 800c832:	2300      	movls	r3, #0
 800c834:	b2db      	uxtb	r3, r3
 800c836:	461a      	mov	r2, r3
 800c838:	f107 0318 	add.w	r3, r7, #24
 800c83c:	4611      	mov	r1, r2
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fd ff3c 	bl	800a6bc <chk_lock>
 800c844:	4603      	mov	r3, r0
 800c846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c84a:	79fb      	ldrb	r3, [r7, #7]
 800c84c:	f003 031c 	and.w	r3, r3, #28
 800c850:	2b00      	cmp	r3, #0
 800c852:	d07f      	beq.n	800c954 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c854:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d017      	beq.n	800c88c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c85c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c860:	2b04      	cmp	r3, #4
 800c862:	d10e      	bne.n	800c882 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c864:	f7fd ff86 	bl	800a774 <enq_lock>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d006      	beq.n	800c87c <f_open+0xc4>
 800c86e:	f107 0318 	add.w	r3, r7, #24
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff f8de 	bl	800ba34 <dir_register>
 800c878:	4603      	mov	r3, r0
 800c87a:	e000      	b.n	800c87e <f_open+0xc6>
 800c87c:	2312      	movs	r3, #18
 800c87e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	f043 0308 	orr.w	r3, r3, #8
 800c888:	71fb      	strb	r3, [r7, #7]
 800c88a:	e010      	b.n	800c8ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c88c:	7fbb      	ldrb	r3, [r7, #30]
 800c88e:	f003 0311 	and.w	r3, r3, #17
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <f_open+0xe6>
					res = FR_DENIED;
 800c896:	2307      	movs	r3, #7
 800c898:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c89c:	e007      	b.n	800c8ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <f_open+0xf6>
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c8ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d168      	bne.n	800c988 <f_open+0x1d0>
 800c8b6:	79fb      	ldrb	r3, [r7, #7]
 800c8b8:	f003 0308 	and.w	r3, r3, #8
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d063      	beq.n	800c988 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c8c0:	f7fd fcfc 	bl	800a2bc <get_fattime>
 800c8c4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c8:	330e      	adds	r3, #14
 800c8ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fd fe4a 	bl	800a566 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d4:	3316      	adds	r3, #22
 800c8d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fd fe44 	bl	800a566 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e0:	330b      	adds	r3, #11
 800c8e2:	2220      	movs	r2, #32
 800c8e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe fe1a 	bl	800b526 <ld_clust>
 800c8f2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fe32 	bl	800b564 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	331c      	adds	r3, #28
 800c904:	2100      	movs	r1, #0
 800c906:	4618      	mov	r0, r3
 800c908:	f7fd fe2d 	bl	800a566 <st_dword>
					fs->wflag = 1;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	2201      	movs	r2, #1
 800c910:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c914:	2b00      	cmp	r3, #0
 800c916:	d037      	beq.n	800c988 <f_open+0x1d0>
						dw = fs->winsect;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c91c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c91e:	f107 0318 	add.w	r3, r7, #24
 800c922:	2200      	movs	r2, #0
 800c924:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c926:	4618      	mov	r0, r3
 800c928:	f7fe fb22 	bl	800af70 <remove_chain>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c932:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c936:	2b00      	cmp	r3, #0
 800c938:	d126      	bne.n	800c988 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe f86c 	bl	800aa1c <move_window>
 800c944:	4603      	mov	r3, r0
 800c946:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c94e:	3a01      	subs	r2, #1
 800c950:	615a      	str	r2, [r3, #20]
 800c952:	e019      	b.n	800c988 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c954:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d115      	bne.n	800c988 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c95c:	7fbb      	ldrb	r3, [r7, #30]
 800c95e:	f003 0310 	and.w	r3, r3, #16
 800c962:	2b00      	cmp	r3, #0
 800c964:	d003      	beq.n	800c96e <f_open+0x1b6>
					res = FR_NO_FILE;
 800c966:	2304      	movs	r3, #4
 800c968:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c96c:	e00c      	b.n	800c988 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	2b00      	cmp	r3, #0
 800c976:	d007      	beq.n	800c988 <f_open+0x1d0>
 800c978:	7fbb      	ldrb	r3, [r7, #30]
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d002      	beq.n	800c988 <f_open+0x1d0>
						res = FR_DENIED;
 800c982:	2307      	movs	r3, #7
 800c984:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c988:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d126      	bne.n	800c9de <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	f003 0308 	and.w	r3, r3, #8
 800c996:	2b00      	cmp	r3, #0
 800c998:	d003      	beq.n	800c9a2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c99a:	79fb      	ldrb	r3, [r7, #7]
 800c99c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c9aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	bf8c      	ite	hi
 800c9b6:	2301      	movhi	r3, #1
 800c9b8:	2300      	movls	r3, #0
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	461a      	mov	r2, r3
 800c9be:	f107 0318 	add.w	r3, r7, #24
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fef7 	bl	800a7b8 <inc_lock>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <f_open+0x226>
 800c9d8:	2302      	movs	r3, #2
 800c9da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c9de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f040 80a3 	bne.w	800cb2e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fd99 	bl	800b526 <ld_clust>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	331c      	adds	r3, #28
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fd fd73 	bl	800a4ea <ld_dword>
 800ca04:	4602      	mov	r2, r0
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	88da      	ldrh	r2, [r3, #6]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	79fa      	ldrb	r2, [r7, #7]
 800ca22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3330      	adds	r3, #48	@ 0x30
 800ca3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ca3e:	2100      	movs	r1, #0
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fd fddd 	bl	800a600 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	f003 0320 	and.w	r3, r3, #32
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d06e      	beq.n	800cb2e <f_open+0x376>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d06a      	beq.n	800cb2e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	895b      	ldrh	r3, [r3, #10]
 800ca64:	461a      	mov	r2, r3
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	899b      	ldrh	r3, [r3, #12]
 800ca6a:	fb02 f303 	mul.w	r3, r2, r3
 800ca6e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca7c:	e016      	b.n	800caac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe f887 	bl	800ab96 <get_fat>
 800ca88:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ca8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d802      	bhi.n	800ca96 <f_open+0x2de>
 800ca90:	2302      	movs	r3, #2
 800ca92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ca96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9c:	d102      	bne.n	800caa4 <f_open+0x2ec>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800caa4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800caa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <f_open+0x304>
 800cab4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cab8:	429a      	cmp	r2, r3
 800caba:	d8e0      	bhi.n	800ca7e <f_open+0x2c6>
				}
				fp->clust = clst;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cac0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cac2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d131      	bne.n	800cb2e <f_open+0x376>
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	899b      	ldrh	r3, [r3, #12]
 800cace:	461a      	mov	r2, r3
 800cad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cad2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cad6:	fb01 f202 	mul.w	r2, r1, r2
 800cada:	1a9b      	subs	r3, r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d026      	beq.n	800cb2e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe f837 	bl	800ab58 <clust2sect>
 800caea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800caec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d103      	bne.n	800cafa <f_open+0x342>
						res = FR_INT_ERR;
 800caf2:	2302      	movs	r3, #2
 800caf4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800caf8:	e019      	b.n	800cb2e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	899b      	ldrh	r3, [r3, #12]
 800cafe:	461a      	mov	r2, r3
 800cb00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb02:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb08:	441a      	add	r2, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	7858      	ldrb	r0, [r3, #1]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6a1a      	ldr	r2, [r3, #32]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	f7fd fc6d 	bl	800a3fc <disk_read>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <f_open+0x376>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cb2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d002      	beq.n	800cb3c <f_open+0x384>
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cb3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3768      	adds	r7, #104	@ 0x68
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08e      	sub	sp, #56	@ 0x38
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f107 0214 	add.w	r2, r7, #20
 800cb66:	4611      	mov	r1, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff fda9 	bl	800c6c0 <validate>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d107      	bne.n	800cb8c <f_read+0x44>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	7d5b      	ldrb	r3, [r3, #21]
 800cb80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <f_read+0x4a>
 800cb8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb90:	e135      	b.n	800cdfe <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	7d1b      	ldrb	r3, [r3, #20]
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <f_read+0x5a>
 800cb9e:	2307      	movs	r3, #7
 800cba0:	e12d      	b.n	800cdfe <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	68da      	ldr	r2, [r3, #12]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	f240 811e 	bls.w	800cdf4 <f_read+0x2ac>
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cbbc:	e11a      	b.n	800cdf4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	8992      	ldrh	r2, [r2, #12]
 800cbc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbca:	fb01 f202 	mul.w	r2, r1, r2
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f040 80d5 	bne.w	800cd80 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	699b      	ldr	r3, [r3, #24]
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	8992      	ldrh	r2, [r2, #12]
 800cbde:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	8952      	ldrh	r2, [r2, #10]
 800cbe6:	3a01      	subs	r2, #1
 800cbe8:	4013      	ands	r3, r2
 800cbea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d12f      	bne.n	800cc52 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d103      	bne.n	800cc02 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc00:	e013      	b.n	800cc2a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d007      	beq.n	800cc1a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7fe faaa 	bl	800b16a <clmt_clust>
 800cc16:	6338      	str	r0, [r7, #48]	@ 0x30
 800cc18:	e007      	b.n	800cc2a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	4619      	mov	r1, r3
 800cc22:	4610      	mov	r0, r2
 800cc24:	f7fd ffb7 	bl	800ab96 <get_fat>
 800cc28:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d804      	bhi.n	800cc3a <f_read+0xf2>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2202      	movs	r2, #2
 800cc34:	755a      	strb	r2, [r3, #21]
 800cc36:	2302      	movs	r3, #2
 800cc38:	e0e1      	b.n	800cdfe <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc40:	d104      	bne.n	800cc4c <f_read+0x104>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2201      	movs	r2, #1
 800cc46:	755a      	strb	r2, [r3, #21]
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e0d8      	b.n	800cdfe <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc50:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	69db      	ldr	r3, [r3, #28]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f7fd ff7c 	bl	800ab58 <clust2sect>
 800cc60:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d104      	bne.n	800cc72 <f_read+0x12a>
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2202      	movs	r2, #2
 800cc6c:	755a      	strb	r2, [r3, #21]
 800cc6e:	2302      	movs	r3, #2
 800cc70:	e0c5      	b.n	800cdfe <f_read+0x2b6>
			sect += csect;
 800cc72:	69ba      	ldr	r2, [r7, #24]
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	4413      	add	r3, r2
 800cc78:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	899b      	ldrh	r3, [r3, #12]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc86:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d041      	beq.n	800cd12 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cc8e:	69fa      	ldr	r2, [r7, #28]
 800cc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc92:	4413      	add	r3, r2
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	8952      	ldrh	r2, [r2, #10]
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d905      	bls.n	800cca8 <f_read+0x160>
					cc = fs->csize - csect;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	895b      	ldrh	r3, [r3, #10]
 800cca0:	461a      	mov	r2, r3
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	7858      	ldrb	r0, [r3, #1]
 800ccac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccae:	69ba      	ldr	r2, [r7, #24]
 800ccb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ccb2:	f7fd fba3 	bl	800a3fc <disk_read>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d004      	beq.n	800ccc6 <f_read+0x17e>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	755a      	strb	r2, [r3, #21]
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e09b      	b.n	800cdfe <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	7d1b      	ldrb	r3, [r3, #20]
 800ccca:	b25b      	sxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	da18      	bge.n	800cd02 <f_read+0x1ba>
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6a1a      	ldr	r2, [r3, #32]
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d911      	bls.n	800cd02 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6a1a      	ldr	r2, [r3, #32]
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	8992      	ldrh	r2, [r2, #12]
 800ccea:	fb02 f303 	mul.w	r3, r2, r3
 800ccee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccf0:	18d0      	adds	r0, r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	899b      	ldrh	r3, [r3, #12]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	f7fd fc5e 	bl	800a5be <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	899b      	ldrh	r3, [r3, #12]
 800cd06:	461a      	mov	r2, r3
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	fb02 f303 	mul.w	r3, r2, r3
 800cd0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cd10:	e05c      	b.n	800cdcc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	69ba      	ldr	r2, [r7, #24]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d02e      	beq.n	800cd7a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	7d1b      	ldrb	r3, [r3, #20]
 800cd20:	b25b      	sxtb	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da18      	bge.n	800cd58 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	7858      	ldrb	r0, [r3, #1]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6a1a      	ldr	r2, [r3, #32]
 800cd34:	2301      	movs	r3, #1
 800cd36:	f7fd fb81 	bl	800a43c <disk_write>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <f_read+0x202>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2201      	movs	r2, #1
 800cd44:	755a      	strb	r2, [r3, #21]
 800cd46:	2301      	movs	r3, #1
 800cd48:	e059      	b.n	800cdfe <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	7d1b      	ldrb	r3, [r3, #20]
 800cd4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	7858      	ldrb	r0, [r3, #1]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd62:	2301      	movs	r3, #1
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	f7fd fb49 	bl	800a3fc <disk_read>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d004      	beq.n	800cd7a <f_read+0x232>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2201      	movs	r2, #1
 800cd74:	755a      	strb	r2, [r3, #21]
 800cd76:	2301      	movs	r3, #1
 800cd78:	e041      	b.n	800cdfe <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	69ba      	ldr	r2, [r7, #24]
 800cd7e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	899b      	ldrh	r3, [r3, #12]
 800cd84:	4618      	mov	r0, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	8992      	ldrh	r2, [r2, #12]
 800cd8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd92:	fb01 f202 	mul.w	r2, r1, r2
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	1ac3      	subs	r3, r0, r3
 800cd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cd9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d901      	bls.n	800cda8 <f_read+0x260>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	8992      	ldrh	r2, [r2, #12]
 800cdb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdba:	fb00 f202 	mul.w	r2, r0, r2
 800cdbe:	1a9b      	subs	r3, r3, r2
 800cdc0:	440b      	add	r3, r1
 800cdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdc8:	f7fd fbf9 	bl	800a5be <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cdcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd0:	4413      	add	r3, r2
 800cdd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	699a      	ldr	r2, [r3, #24]
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	441a      	add	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	619a      	str	r2, [r3, #24]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde6:	441a      	add	r2, r3
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	601a      	str	r2, [r3, #0]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f47f aee1 	bne.w	800cbbe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3738      	adds	r7, #56	@ 0x38
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b086      	sub	sp, #24
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f107 0208 	add.w	r2, r7, #8
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fc52 	bl	800c6c0 <validate>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d168      	bne.n	800cef8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7d1b      	ldrb	r3, [r3, #20]
 800ce2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d062      	beq.n	800cef8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7d1b      	ldrb	r3, [r3, #20]
 800ce36:	b25b      	sxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	da15      	bge.n	800ce68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	7858      	ldrb	r0, [r3, #1]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a1a      	ldr	r2, [r3, #32]
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	f7fd faf6 	bl	800a43c <disk_write>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <f_sync+0x54>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e04f      	b.n	800cefa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	7d1b      	ldrb	r3, [r3, #20]
 800ce5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ce68:	f7fd fa28 	bl	800a2bc <get_fattime>
 800ce6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce74:	4619      	mov	r1, r3
 800ce76:	4610      	mov	r0, r2
 800ce78:	f7fd fdd0 	bl	800aa1c <move_window>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d138      	bne.n	800cef8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	330b      	adds	r3, #11
 800ce90:	781a      	ldrb	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	330b      	adds	r3, #11
 800ce96:	f042 0220 	orr.w	r2, r2, #32
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	461a      	mov	r2, r3
 800cea8:	68f9      	ldr	r1, [r7, #12]
 800ceaa:	f7fe fb5b 	bl	800b564 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f103 021c 	add.w	r2, r3, #28
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	4610      	mov	r0, r2
 800cebc:	f7fd fb53 	bl	800a566 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3316      	adds	r3, #22
 800cec4:	6939      	ldr	r1, [r7, #16]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd fb4d 	bl	800a566 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3312      	adds	r3, #18
 800ced0:	2100      	movs	r1, #0
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fd fb2c 	bl	800a530 <st_word>
					fs->wflag = 1;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	2201      	movs	r2, #1
 800cedc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fd fdc9 	bl	800aa78 <sync_fs>
 800cee6:	4603      	mov	r3, r0
 800cee8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	7d1b      	ldrb	r3, [r3, #20]
 800ceee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b084      	sub	sp, #16
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff ff7b 	bl	800ce06 <f_sync>
 800cf10:	4603      	mov	r3, r0
 800cf12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d118      	bne.n	800cf4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f107 0208 	add.w	r2, r7, #8
 800cf20:	4611      	mov	r1, r2
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fbcc 	bl	800c6c0 <validate>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10c      	bne.n	800cf4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fd fccc 	bl	800a8d4 <dec_lock>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d102      	bne.n	800cf4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b087      	sub	sp, #28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	4613      	mov	r3, r2
 800cf64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf66:	2301      	movs	r3, #1
 800cf68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf6e:	4b1f      	ldr	r3, [pc, #124]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cf70:	7a5b      	ldrb	r3, [r3, #9]
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d131      	bne.n	800cfdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf78:	4b1c      	ldr	r3, [pc, #112]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cf7a:	7a5b      	ldrb	r3, [r3, #9]
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4b1a      	ldr	r3, [pc, #104]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cf82:	2100      	movs	r1, #0
 800cf84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf86:	4b19      	ldr	r3, [pc, #100]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cf88:	7a5b      	ldrb	r3, [r3, #9]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	4a17      	ldr	r2, [pc, #92]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4413      	add	r3, r2
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf96:	4b15      	ldr	r3, [pc, #84]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cf98:	7a5b      	ldrb	r3, [r3, #9]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	4b13      	ldr	r3, [pc, #76]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cfa0:	4413      	add	r3, r2
 800cfa2:	79fa      	ldrb	r2, [r7, #7]
 800cfa4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cfa6:	4b11      	ldr	r3, [pc, #68]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cfa8:	7a5b      	ldrb	r3, [r3, #9]
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	b2d1      	uxtb	r1, r2
 800cfb0:	4a0e      	ldr	r2, [pc, #56]	@ (800cfec <FATFS_LinkDriverEx+0x94>)
 800cfb2:	7251      	strb	r1, [r2, #9]
 800cfb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cfb6:	7dbb      	ldrb	r3, [r7, #22]
 800cfb8:	3330      	adds	r3, #48	@ 0x30
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	223a      	movs	r2, #58	@ 0x3a
 800cfc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	3302      	adds	r3, #2
 800cfcc:	222f      	movs	r2, #47	@ 0x2f
 800cfce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	3303      	adds	r3, #3
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cfdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	371c      	adds	r7, #28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	20009a4c 	.word	0x20009a4c

0800cff0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cffa:	2200      	movs	r2, #0
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7ff ffaa 	bl	800cf58 <FATFS_LinkDriverEx>
 800d004:	4603      	mov	r3, r0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	4603      	mov	r3, r0
 800d018:	6039      	str	r1, [r7, #0]
 800d01a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d01c:	88fb      	ldrh	r3, [r7, #6]
 800d01e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d020:	d802      	bhi.n	800d028 <ff_convert+0x18>
		c = chr;
 800d022:	88fb      	ldrh	r3, [r7, #6]
 800d024:	81fb      	strh	r3, [r7, #14]
 800d026:	e025      	b.n	800d074 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00b      	beq.n	800d046 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d02e:	88fb      	ldrh	r3, [r7, #6]
 800d030:	2bff      	cmp	r3, #255	@ 0xff
 800d032:	d805      	bhi.n	800d040 <ff_convert+0x30>
 800d034:	88fb      	ldrh	r3, [r7, #6]
 800d036:	3b80      	subs	r3, #128	@ 0x80
 800d038:	4a12      	ldr	r2, [pc, #72]	@ (800d084 <ff_convert+0x74>)
 800d03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d03e:	e000      	b.n	800d042 <ff_convert+0x32>
 800d040:	2300      	movs	r3, #0
 800d042:	81fb      	strh	r3, [r7, #14]
 800d044:	e016      	b.n	800d074 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d046:	2300      	movs	r3, #0
 800d048:	81fb      	strh	r3, [r7, #14]
 800d04a:	e009      	b.n	800d060 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d04c:	89fb      	ldrh	r3, [r7, #14]
 800d04e:	4a0d      	ldr	r2, [pc, #52]	@ (800d084 <ff_convert+0x74>)
 800d050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d054:	88fa      	ldrh	r2, [r7, #6]
 800d056:	429a      	cmp	r2, r3
 800d058:	d006      	beq.n	800d068 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d05a:	89fb      	ldrh	r3, [r7, #14]
 800d05c:	3301      	adds	r3, #1
 800d05e:	81fb      	strh	r3, [r7, #14]
 800d060:	89fb      	ldrh	r3, [r7, #14]
 800d062:	2b7f      	cmp	r3, #127	@ 0x7f
 800d064:	d9f2      	bls.n	800d04c <ff_convert+0x3c>
 800d066:	e000      	b.n	800d06a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d068:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d06a:	89fb      	ldrh	r3, [r7, #14]
 800d06c:	3380      	adds	r3, #128	@ 0x80
 800d06e:	b29b      	uxth	r3, r3
 800d070:	b2db      	uxtb	r3, r3
 800d072:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d074:	89fb      	ldrh	r3, [r7, #14]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	0801b2d4 	.word	0x0801b2d4

0800d088 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d088:	b480      	push	{r7}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d092:	88fb      	ldrh	r3, [r7, #6]
 800d094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d098:	d201      	bcs.n	800d09e <ff_wtoupper+0x16>
 800d09a:	4b3e      	ldr	r3, [pc, #248]	@ (800d194 <ff_wtoupper+0x10c>)
 800d09c:	e000      	b.n	800d0a0 <ff_wtoupper+0x18>
 800d09e:	4b3e      	ldr	r3, [pc, #248]	@ (800d198 <ff_wtoupper+0x110>)
 800d0a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	1c9a      	adds	r2, r3, #2
 800d0a6:	617a      	str	r2, [r7, #20]
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d0ac:	8a7b      	ldrh	r3, [r7, #18]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d068      	beq.n	800d184 <ff_wtoupper+0xfc>
 800d0b2:	88fa      	ldrh	r2, [r7, #6]
 800d0b4:	8a7b      	ldrh	r3, [r7, #18]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d364      	bcc.n	800d184 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	1c9a      	adds	r2, r3, #2
 800d0be:	617a      	str	r2, [r7, #20]
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	823b      	strh	r3, [r7, #16]
 800d0c4:	8a3b      	ldrh	r3, [r7, #16]
 800d0c6:	0a1b      	lsrs	r3, r3, #8
 800d0c8:	81fb      	strh	r3, [r7, #14]
 800d0ca:	8a3b      	ldrh	r3, [r7, #16]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d0d0:	88fa      	ldrh	r2, [r7, #6]
 800d0d2:	8a79      	ldrh	r1, [r7, #18]
 800d0d4:	8a3b      	ldrh	r3, [r7, #16]
 800d0d6:	440b      	add	r3, r1
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	da49      	bge.n	800d170 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d0dc:	89fb      	ldrh	r3, [r7, #14]
 800d0de:	2b08      	cmp	r3, #8
 800d0e0:	d84f      	bhi.n	800d182 <ff_wtoupper+0xfa>
 800d0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e8 <ff_wtoupper+0x60>)
 800d0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e8:	0800d10d 	.word	0x0800d10d
 800d0ec:	0800d11f 	.word	0x0800d11f
 800d0f0:	0800d135 	.word	0x0800d135
 800d0f4:	0800d13d 	.word	0x0800d13d
 800d0f8:	0800d145 	.word	0x0800d145
 800d0fc:	0800d14d 	.word	0x0800d14d
 800d100:	0800d155 	.word	0x0800d155
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d165 	.word	0x0800d165
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d10c:	88fa      	ldrh	r2, [r7, #6]
 800d10e:	8a7b      	ldrh	r3, [r7, #18]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	4413      	add	r3, r2
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	80fb      	strh	r3, [r7, #6]
 800d11c:	e027      	b.n	800d16e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d11e:	88fa      	ldrh	r2, [r7, #6]
 800d120:	8a7b      	ldrh	r3, [r7, #18]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	b29b      	uxth	r3, r3
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	88fa      	ldrh	r2, [r7, #6]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	80fb      	strh	r3, [r7, #6]
 800d132:	e01c      	b.n	800d16e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	3b10      	subs	r3, #16
 800d138:	80fb      	strh	r3, [r7, #6]
 800d13a:	e018      	b.n	800d16e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d13c:	88fb      	ldrh	r3, [r7, #6]
 800d13e:	3b20      	subs	r3, #32
 800d140:	80fb      	strh	r3, [r7, #6]
 800d142:	e014      	b.n	800d16e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d144:	88fb      	ldrh	r3, [r7, #6]
 800d146:	3b30      	subs	r3, #48	@ 0x30
 800d148:	80fb      	strh	r3, [r7, #6]
 800d14a:	e010      	b.n	800d16e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d14c:	88fb      	ldrh	r3, [r7, #6]
 800d14e:	3b1a      	subs	r3, #26
 800d150:	80fb      	strh	r3, [r7, #6]
 800d152:	e00c      	b.n	800d16e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	3308      	adds	r3, #8
 800d158:	80fb      	strh	r3, [r7, #6]
 800d15a:	e008      	b.n	800d16e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d15c:	88fb      	ldrh	r3, [r7, #6]
 800d15e:	3b50      	subs	r3, #80	@ 0x50
 800d160:	80fb      	strh	r3, [r7, #6]
 800d162:	e004      	b.n	800d16e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d164:	88fb      	ldrh	r3, [r7, #6]
 800d166:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d16a:	80fb      	strh	r3, [r7, #6]
 800d16c:	bf00      	nop
			}
			break;
 800d16e:	e008      	b.n	800d182 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d170:	89fb      	ldrh	r3, [r7, #14]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d195      	bne.n	800d0a2 <ff_wtoupper+0x1a>
 800d176:	8a3b      	ldrh	r3, [r7, #16]
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	4413      	add	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d180:	e78f      	b.n	800d0a2 <ff_wtoupper+0x1a>
			break;
 800d182:	bf00      	nop
	}

	return chr;
 800d184:	88fb      	ldrh	r3, [r7, #6]
}
 800d186:	4618      	mov	r0, r3
 800d188:	371c      	adds	r7, #28
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	0801b3d4 	.word	0x0801b3d4
 800d198:	0801b5c8 	.word	0x0801b5c8

0800d19c <srand>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4b10      	ldr	r3, [pc, #64]	@ (800d1e0 <srand+0x44>)
 800d1a0:	681d      	ldr	r5, [r3, #0]
 800d1a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	b9b3      	cbnz	r3, 800d1d6 <srand+0x3a>
 800d1a8:	2018      	movs	r0, #24
 800d1aa:	f000 fa4d 	bl	800d648 <malloc>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	6328      	str	r0, [r5, #48]	@ 0x30
 800d1b2:	b920      	cbnz	r0, 800d1be <srand+0x22>
 800d1b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e4 <srand+0x48>)
 800d1b6:	480c      	ldr	r0, [pc, #48]	@ (800d1e8 <srand+0x4c>)
 800d1b8:	2146      	movs	r1, #70	@ 0x46
 800d1ba:	f000 f9dd 	bl	800d578 <__assert_func>
 800d1be:	490b      	ldr	r1, [pc, #44]	@ (800d1ec <srand+0x50>)
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f0 <srand+0x54>)
 800d1c2:	e9c0 1300 	strd	r1, r3, [r0]
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f4 <srand+0x58>)
 800d1c8:	6083      	str	r3, [r0, #8]
 800d1ca:	230b      	movs	r3, #11
 800d1cc:	8183      	strh	r3, [r0, #12]
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	2001      	movs	r0, #1
 800d1d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d1d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d1d8:	2200      	movs	r2, #0
 800d1da:	611c      	str	r4, [r3, #16]
 800d1dc:	615a      	str	r2, [r3, #20]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	20006c64 	.word	0x20006c64
 800d1e4:	0801b684 	.word	0x0801b684
 800d1e8:	0801b69b 	.word	0x0801b69b
 800d1ec:	abcd330e 	.word	0xabcd330e
 800d1f0:	e66d1234 	.word	0xe66d1234
 800d1f4:	0005deec 	.word	0x0005deec

0800d1f8 <rand>:
 800d1f8:	4b16      	ldr	r3, [pc, #88]	@ (800d254 <rand+0x5c>)
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	681c      	ldr	r4, [r3, #0]
 800d1fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d200:	b9b3      	cbnz	r3, 800d230 <rand+0x38>
 800d202:	2018      	movs	r0, #24
 800d204:	f000 fa20 	bl	800d648 <malloc>
 800d208:	4602      	mov	r2, r0
 800d20a:	6320      	str	r0, [r4, #48]	@ 0x30
 800d20c:	b920      	cbnz	r0, 800d218 <rand+0x20>
 800d20e:	4b12      	ldr	r3, [pc, #72]	@ (800d258 <rand+0x60>)
 800d210:	4812      	ldr	r0, [pc, #72]	@ (800d25c <rand+0x64>)
 800d212:	2152      	movs	r1, #82	@ 0x52
 800d214:	f000 f9b0 	bl	800d578 <__assert_func>
 800d218:	4911      	ldr	r1, [pc, #68]	@ (800d260 <rand+0x68>)
 800d21a:	4b12      	ldr	r3, [pc, #72]	@ (800d264 <rand+0x6c>)
 800d21c:	e9c0 1300 	strd	r1, r3, [r0]
 800d220:	4b11      	ldr	r3, [pc, #68]	@ (800d268 <rand+0x70>)
 800d222:	6083      	str	r3, [r0, #8]
 800d224:	230b      	movs	r3, #11
 800d226:	8183      	strh	r3, [r0, #12]
 800d228:	2100      	movs	r1, #0
 800d22a:	2001      	movs	r0, #1
 800d22c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d230:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d232:	480e      	ldr	r0, [pc, #56]	@ (800d26c <rand+0x74>)
 800d234:	690b      	ldr	r3, [r1, #16]
 800d236:	694c      	ldr	r4, [r1, #20]
 800d238:	4a0d      	ldr	r2, [pc, #52]	@ (800d270 <rand+0x78>)
 800d23a:	4358      	muls	r0, r3
 800d23c:	fb02 0004 	mla	r0, r2, r4, r0
 800d240:	fba3 3202 	umull	r3, r2, r3, r2
 800d244:	3301      	adds	r3, #1
 800d246:	eb40 0002 	adc.w	r0, r0, r2
 800d24a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d24e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d252:	bd10      	pop	{r4, pc}
 800d254:	20006c64 	.word	0x20006c64
 800d258:	0801b684 	.word	0x0801b684
 800d25c:	0801b69b 	.word	0x0801b69b
 800d260:	abcd330e 	.word	0xabcd330e
 800d264:	e66d1234 	.word	0xe66d1234
 800d268:	0005deec 	.word	0x0005deec
 800d26c:	5851f42d 	.word	0x5851f42d
 800d270:	4c957f2d 	.word	0x4c957f2d

0800d274 <std>:
 800d274:	2300      	movs	r3, #0
 800d276:	b510      	push	{r4, lr}
 800d278:	4604      	mov	r4, r0
 800d27a:	e9c0 3300 	strd	r3, r3, [r0]
 800d27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d282:	6083      	str	r3, [r0, #8]
 800d284:	8181      	strh	r1, [r0, #12]
 800d286:	6643      	str	r3, [r0, #100]	@ 0x64
 800d288:	81c2      	strh	r2, [r0, #14]
 800d28a:	6183      	str	r3, [r0, #24]
 800d28c:	4619      	mov	r1, r3
 800d28e:	2208      	movs	r2, #8
 800d290:	305c      	adds	r0, #92	@ 0x5c
 800d292:	f000 f8f4 	bl	800d47e <memset>
 800d296:	4b0d      	ldr	r3, [pc, #52]	@ (800d2cc <std+0x58>)
 800d298:	6263      	str	r3, [r4, #36]	@ 0x24
 800d29a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <std+0x5c>)
 800d29c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d29e:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d4 <std+0x60>)
 800d2a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d8 <std+0x64>)
 800d2a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d2dc <std+0x68>)
 800d2a8:	6224      	str	r4, [r4, #32]
 800d2aa:	429c      	cmp	r4, r3
 800d2ac:	d006      	beq.n	800d2bc <std+0x48>
 800d2ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d2b2:	4294      	cmp	r4, r2
 800d2b4:	d002      	beq.n	800d2bc <std+0x48>
 800d2b6:	33d0      	adds	r3, #208	@ 0xd0
 800d2b8:	429c      	cmp	r4, r3
 800d2ba:	d105      	bne.n	800d2c8 <std+0x54>
 800d2bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c4:	f000 b954 	b.w	800d570 <__retarget_lock_init_recursive>
 800d2c8:	bd10      	pop	{r4, pc}
 800d2ca:	bf00      	nop
 800d2cc:	0800d3f9 	.word	0x0800d3f9
 800d2d0:	0800d41b 	.word	0x0800d41b
 800d2d4:	0800d453 	.word	0x0800d453
 800d2d8:	0800d477 	.word	0x0800d477
 800d2dc:	20009a58 	.word	0x20009a58

0800d2e0 <stdio_exit_handler>:
 800d2e0:	4a02      	ldr	r2, [pc, #8]	@ (800d2ec <stdio_exit_handler+0xc>)
 800d2e2:	4903      	ldr	r1, [pc, #12]	@ (800d2f0 <stdio_exit_handler+0x10>)
 800d2e4:	4803      	ldr	r0, [pc, #12]	@ (800d2f4 <stdio_exit_handler+0x14>)
 800d2e6:	f000 b869 	b.w	800d3bc <_fwalk_sglue>
 800d2ea:	bf00      	nop
 800d2ec:	20006c58 	.word	0x20006c58
 800d2f0:	0800d8bd 	.word	0x0800d8bd
 800d2f4:	20006c68 	.word	0x20006c68

0800d2f8 <cleanup_stdio>:
 800d2f8:	6841      	ldr	r1, [r0, #4]
 800d2fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d32c <cleanup_stdio+0x34>)
 800d2fc:	4299      	cmp	r1, r3
 800d2fe:	b510      	push	{r4, lr}
 800d300:	4604      	mov	r4, r0
 800d302:	d001      	beq.n	800d308 <cleanup_stdio+0x10>
 800d304:	f000 fada 	bl	800d8bc <_fflush_r>
 800d308:	68a1      	ldr	r1, [r4, #8]
 800d30a:	4b09      	ldr	r3, [pc, #36]	@ (800d330 <cleanup_stdio+0x38>)
 800d30c:	4299      	cmp	r1, r3
 800d30e:	d002      	beq.n	800d316 <cleanup_stdio+0x1e>
 800d310:	4620      	mov	r0, r4
 800d312:	f000 fad3 	bl	800d8bc <_fflush_r>
 800d316:	68e1      	ldr	r1, [r4, #12]
 800d318:	4b06      	ldr	r3, [pc, #24]	@ (800d334 <cleanup_stdio+0x3c>)
 800d31a:	4299      	cmp	r1, r3
 800d31c:	d004      	beq.n	800d328 <cleanup_stdio+0x30>
 800d31e:	4620      	mov	r0, r4
 800d320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d324:	f000 baca 	b.w	800d8bc <_fflush_r>
 800d328:	bd10      	pop	{r4, pc}
 800d32a:	bf00      	nop
 800d32c:	20009a58 	.word	0x20009a58
 800d330:	20009ac0 	.word	0x20009ac0
 800d334:	20009b28 	.word	0x20009b28

0800d338 <global_stdio_init.part.0>:
 800d338:	b510      	push	{r4, lr}
 800d33a:	4b0b      	ldr	r3, [pc, #44]	@ (800d368 <global_stdio_init.part.0+0x30>)
 800d33c:	4c0b      	ldr	r4, [pc, #44]	@ (800d36c <global_stdio_init.part.0+0x34>)
 800d33e:	4a0c      	ldr	r2, [pc, #48]	@ (800d370 <global_stdio_init.part.0+0x38>)
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	4620      	mov	r0, r4
 800d344:	2200      	movs	r2, #0
 800d346:	2104      	movs	r1, #4
 800d348:	f7ff ff94 	bl	800d274 <std>
 800d34c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d350:	2201      	movs	r2, #1
 800d352:	2109      	movs	r1, #9
 800d354:	f7ff ff8e 	bl	800d274 <std>
 800d358:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d35c:	2202      	movs	r2, #2
 800d35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d362:	2112      	movs	r1, #18
 800d364:	f7ff bf86 	b.w	800d274 <std>
 800d368:	20009b90 	.word	0x20009b90
 800d36c:	20009a58 	.word	0x20009a58
 800d370:	0800d2e1 	.word	0x0800d2e1

0800d374 <__sfp_lock_acquire>:
 800d374:	4801      	ldr	r0, [pc, #4]	@ (800d37c <__sfp_lock_acquire+0x8>)
 800d376:	f000 b8fc 	b.w	800d572 <__retarget_lock_acquire_recursive>
 800d37a:	bf00      	nop
 800d37c:	20009b99 	.word	0x20009b99

0800d380 <__sfp_lock_release>:
 800d380:	4801      	ldr	r0, [pc, #4]	@ (800d388 <__sfp_lock_release+0x8>)
 800d382:	f000 b8f7 	b.w	800d574 <__retarget_lock_release_recursive>
 800d386:	bf00      	nop
 800d388:	20009b99 	.word	0x20009b99

0800d38c <__sinit>:
 800d38c:	b510      	push	{r4, lr}
 800d38e:	4604      	mov	r4, r0
 800d390:	f7ff fff0 	bl	800d374 <__sfp_lock_acquire>
 800d394:	6a23      	ldr	r3, [r4, #32]
 800d396:	b11b      	cbz	r3, 800d3a0 <__sinit+0x14>
 800d398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d39c:	f7ff bff0 	b.w	800d380 <__sfp_lock_release>
 800d3a0:	4b04      	ldr	r3, [pc, #16]	@ (800d3b4 <__sinit+0x28>)
 800d3a2:	6223      	str	r3, [r4, #32]
 800d3a4:	4b04      	ldr	r3, [pc, #16]	@ (800d3b8 <__sinit+0x2c>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1f5      	bne.n	800d398 <__sinit+0xc>
 800d3ac:	f7ff ffc4 	bl	800d338 <global_stdio_init.part.0>
 800d3b0:	e7f2      	b.n	800d398 <__sinit+0xc>
 800d3b2:	bf00      	nop
 800d3b4:	0800d2f9 	.word	0x0800d2f9
 800d3b8:	20009b90 	.word	0x20009b90

0800d3bc <_fwalk_sglue>:
 800d3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c0:	4607      	mov	r7, r0
 800d3c2:	4688      	mov	r8, r1
 800d3c4:	4614      	mov	r4, r2
 800d3c6:	2600      	movs	r6, #0
 800d3c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3cc:	f1b9 0901 	subs.w	r9, r9, #1
 800d3d0:	d505      	bpl.n	800d3de <_fwalk_sglue+0x22>
 800d3d2:	6824      	ldr	r4, [r4, #0]
 800d3d4:	2c00      	cmp	r4, #0
 800d3d6:	d1f7      	bne.n	800d3c8 <_fwalk_sglue+0xc>
 800d3d8:	4630      	mov	r0, r6
 800d3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d907      	bls.n	800d3f4 <_fwalk_sglue+0x38>
 800d3e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	d003      	beq.n	800d3f4 <_fwalk_sglue+0x38>
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	47c0      	blx	r8
 800d3f2:	4306      	orrs	r6, r0
 800d3f4:	3568      	adds	r5, #104	@ 0x68
 800d3f6:	e7e9      	b.n	800d3cc <_fwalk_sglue+0x10>

0800d3f8 <__sread>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d400:	f000 f868 	bl	800d4d4 <_read_r>
 800d404:	2800      	cmp	r0, #0
 800d406:	bfab      	itete	ge
 800d408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d40a:	89a3      	ldrhlt	r3, [r4, #12]
 800d40c:	181b      	addge	r3, r3, r0
 800d40e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d412:	bfac      	ite	ge
 800d414:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d416:	81a3      	strhlt	r3, [r4, #12]
 800d418:	bd10      	pop	{r4, pc}

0800d41a <__swrite>:
 800d41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41e:	461f      	mov	r7, r3
 800d420:	898b      	ldrh	r3, [r1, #12]
 800d422:	05db      	lsls	r3, r3, #23
 800d424:	4605      	mov	r5, r0
 800d426:	460c      	mov	r4, r1
 800d428:	4616      	mov	r6, r2
 800d42a:	d505      	bpl.n	800d438 <__swrite+0x1e>
 800d42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d430:	2302      	movs	r3, #2
 800d432:	2200      	movs	r2, #0
 800d434:	f000 f83c 	bl	800d4b0 <_lseek_r>
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d43e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d442:	81a3      	strh	r3, [r4, #12]
 800d444:	4632      	mov	r2, r6
 800d446:	463b      	mov	r3, r7
 800d448:	4628      	mov	r0, r5
 800d44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d44e:	f000 b853 	b.w	800d4f8 <_write_r>

0800d452 <__sseek>:
 800d452:	b510      	push	{r4, lr}
 800d454:	460c      	mov	r4, r1
 800d456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d45a:	f000 f829 	bl	800d4b0 <_lseek_r>
 800d45e:	1c43      	adds	r3, r0, #1
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	bf15      	itete	ne
 800d464:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d46a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d46e:	81a3      	strheq	r3, [r4, #12]
 800d470:	bf18      	it	ne
 800d472:	81a3      	strhne	r3, [r4, #12]
 800d474:	bd10      	pop	{r4, pc}

0800d476 <__sclose>:
 800d476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d47a:	f000 b809 	b.w	800d490 <_close_r>

0800d47e <memset>:
 800d47e:	4402      	add	r2, r0
 800d480:	4603      	mov	r3, r0
 800d482:	4293      	cmp	r3, r2
 800d484:	d100      	bne.n	800d488 <memset+0xa>
 800d486:	4770      	bx	lr
 800d488:	f803 1b01 	strb.w	r1, [r3], #1
 800d48c:	e7f9      	b.n	800d482 <memset+0x4>
	...

0800d490 <_close_r>:
 800d490:	b538      	push	{r3, r4, r5, lr}
 800d492:	4d06      	ldr	r5, [pc, #24]	@ (800d4ac <_close_r+0x1c>)
 800d494:	2300      	movs	r3, #0
 800d496:	4604      	mov	r4, r0
 800d498:	4608      	mov	r0, r1
 800d49a:	602b      	str	r3, [r5, #0]
 800d49c:	f7f9 f82e 	bl	80064fc <_close>
 800d4a0:	1c43      	adds	r3, r0, #1
 800d4a2:	d102      	bne.n	800d4aa <_close_r+0x1a>
 800d4a4:	682b      	ldr	r3, [r5, #0]
 800d4a6:	b103      	cbz	r3, 800d4aa <_close_r+0x1a>
 800d4a8:	6023      	str	r3, [r4, #0]
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	20009b94 	.word	0x20009b94

0800d4b0 <_lseek_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4d07      	ldr	r5, [pc, #28]	@ (800d4d0 <_lseek_r+0x20>)
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	4608      	mov	r0, r1
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	602a      	str	r2, [r5, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	f7f9 f843 	bl	800654a <_lseek>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_lseek_r+0x1e>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_lseek_r+0x1e>
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	20009b94 	.word	0x20009b94

0800d4d4 <_read_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d07      	ldr	r5, [pc, #28]	@ (800d4f4 <_read_r+0x20>)
 800d4d8:	4604      	mov	r4, r0
 800d4da:	4608      	mov	r0, r1
 800d4dc:	4611      	mov	r1, r2
 800d4de:	2200      	movs	r2, #0
 800d4e0:	602a      	str	r2, [r5, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f7f8 ffd1 	bl	800648a <_read>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_read_r+0x1e>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_read_r+0x1e>
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	20009b94 	.word	0x20009b94

0800d4f8 <_write_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	@ (800d518 <_write_r+0x20>)
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	4608      	mov	r0, r1
 800d500:	4611      	mov	r1, r2
 800d502:	2200      	movs	r2, #0
 800d504:	602a      	str	r2, [r5, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	f7f8 ffdc 	bl	80064c4 <_write>
 800d50c:	1c43      	adds	r3, r0, #1
 800d50e:	d102      	bne.n	800d516 <_write_r+0x1e>
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	b103      	cbz	r3, 800d516 <_write_r+0x1e>
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	bd38      	pop	{r3, r4, r5, pc}
 800d518:	20009b94 	.word	0x20009b94

0800d51c <__errno>:
 800d51c:	4b01      	ldr	r3, [pc, #4]	@ (800d524 <__errno+0x8>)
 800d51e:	6818      	ldr	r0, [r3, #0]
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	20006c64 	.word	0x20006c64

0800d528 <__libc_init_array>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	4d0d      	ldr	r5, [pc, #52]	@ (800d560 <__libc_init_array+0x38>)
 800d52c:	4c0d      	ldr	r4, [pc, #52]	@ (800d564 <__libc_init_array+0x3c>)
 800d52e:	1b64      	subs	r4, r4, r5
 800d530:	10a4      	asrs	r4, r4, #2
 800d532:	2600      	movs	r6, #0
 800d534:	42a6      	cmp	r6, r4
 800d536:	d109      	bne.n	800d54c <__libc_init_array+0x24>
 800d538:	4d0b      	ldr	r5, [pc, #44]	@ (800d568 <__libc_init_array+0x40>)
 800d53a:	4c0c      	ldr	r4, [pc, #48]	@ (800d56c <__libc_init_array+0x44>)
 800d53c:	f000 fe38 	bl	800e1b0 <_init>
 800d540:	1b64      	subs	r4, r4, r5
 800d542:	10a4      	asrs	r4, r4, #2
 800d544:	2600      	movs	r6, #0
 800d546:	42a6      	cmp	r6, r4
 800d548:	d105      	bne.n	800d556 <__libc_init_array+0x2e>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d550:	4798      	blx	r3
 800d552:	3601      	adds	r6, #1
 800d554:	e7ee      	b.n	800d534 <__libc_init_array+0xc>
 800d556:	f855 3b04 	ldr.w	r3, [r5], #4
 800d55a:	4798      	blx	r3
 800d55c:	3601      	adds	r6, #1
 800d55e:	e7f2      	b.n	800d546 <__libc_init_array+0x1e>
 800d560:	0801b76c 	.word	0x0801b76c
 800d564:	0801b76c 	.word	0x0801b76c
 800d568:	0801b76c 	.word	0x0801b76c
 800d56c:	0801b770 	.word	0x0801b770

0800d570 <__retarget_lock_init_recursive>:
 800d570:	4770      	bx	lr

0800d572 <__retarget_lock_acquire_recursive>:
 800d572:	4770      	bx	lr

0800d574 <__retarget_lock_release_recursive>:
 800d574:	4770      	bx	lr
	...

0800d578 <__assert_func>:
 800d578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d57a:	4614      	mov	r4, r2
 800d57c:	461a      	mov	r2, r3
 800d57e:	4b09      	ldr	r3, [pc, #36]	@ (800d5a4 <__assert_func+0x2c>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4605      	mov	r5, r0
 800d584:	68d8      	ldr	r0, [r3, #12]
 800d586:	b14c      	cbz	r4, 800d59c <__assert_func+0x24>
 800d588:	4b07      	ldr	r3, [pc, #28]	@ (800d5a8 <__assert_func+0x30>)
 800d58a:	9100      	str	r1, [sp, #0]
 800d58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d590:	4906      	ldr	r1, [pc, #24]	@ (800d5ac <__assert_func+0x34>)
 800d592:	462b      	mov	r3, r5
 800d594:	f000 f9ba 	bl	800d90c <fiprintf>
 800d598:	f000 f9da 	bl	800d950 <abort>
 800d59c:	4b04      	ldr	r3, [pc, #16]	@ (800d5b0 <__assert_func+0x38>)
 800d59e:	461c      	mov	r4, r3
 800d5a0:	e7f3      	b.n	800d58a <__assert_func+0x12>
 800d5a2:	bf00      	nop
 800d5a4:	20006c64 	.word	0x20006c64
 800d5a8:	0801b6f3 	.word	0x0801b6f3
 800d5ac:	0801b700 	.word	0x0801b700
 800d5b0:	0801b72e 	.word	0x0801b72e

0800d5b4 <_free_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4605      	mov	r5, r0
 800d5b8:	2900      	cmp	r1, #0
 800d5ba:	d041      	beq.n	800d640 <_free_r+0x8c>
 800d5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5c0:	1f0c      	subs	r4, r1, #4
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	bfb8      	it	lt
 800d5c6:	18e4      	addlt	r4, r4, r3
 800d5c8:	f000 f8e8 	bl	800d79c <__malloc_lock>
 800d5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d644 <_free_r+0x90>)
 800d5ce:	6813      	ldr	r3, [r2, #0]
 800d5d0:	b933      	cbnz	r3, 800d5e0 <_free_r+0x2c>
 800d5d2:	6063      	str	r3, [r4, #4]
 800d5d4:	6014      	str	r4, [r2, #0]
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5dc:	f000 b8e4 	b.w	800d7a8 <__malloc_unlock>
 800d5e0:	42a3      	cmp	r3, r4
 800d5e2:	d908      	bls.n	800d5f6 <_free_r+0x42>
 800d5e4:	6820      	ldr	r0, [r4, #0]
 800d5e6:	1821      	adds	r1, r4, r0
 800d5e8:	428b      	cmp	r3, r1
 800d5ea:	bf01      	itttt	eq
 800d5ec:	6819      	ldreq	r1, [r3, #0]
 800d5ee:	685b      	ldreq	r3, [r3, #4]
 800d5f0:	1809      	addeq	r1, r1, r0
 800d5f2:	6021      	streq	r1, [r4, #0]
 800d5f4:	e7ed      	b.n	800d5d2 <_free_r+0x1e>
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	b10b      	cbz	r3, 800d600 <_free_r+0x4c>
 800d5fc:	42a3      	cmp	r3, r4
 800d5fe:	d9fa      	bls.n	800d5f6 <_free_r+0x42>
 800d600:	6811      	ldr	r1, [r2, #0]
 800d602:	1850      	adds	r0, r2, r1
 800d604:	42a0      	cmp	r0, r4
 800d606:	d10b      	bne.n	800d620 <_free_r+0x6c>
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	4401      	add	r1, r0
 800d60c:	1850      	adds	r0, r2, r1
 800d60e:	4283      	cmp	r3, r0
 800d610:	6011      	str	r1, [r2, #0]
 800d612:	d1e0      	bne.n	800d5d6 <_free_r+0x22>
 800d614:	6818      	ldr	r0, [r3, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	6053      	str	r3, [r2, #4]
 800d61a:	4408      	add	r0, r1
 800d61c:	6010      	str	r0, [r2, #0]
 800d61e:	e7da      	b.n	800d5d6 <_free_r+0x22>
 800d620:	d902      	bls.n	800d628 <_free_r+0x74>
 800d622:	230c      	movs	r3, #12
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	e7d6      	b.n	800d5d6 <_free_r+0x22>
 800d628:	6820      	ldr	r0, [r4, #0]
 800d62a:	1821      	adds	r1, r4, r0
 800d62c:	428b      	cmp	r3, r1
 800d62e:	bf04      	itt	eq
 800d630:	6819      	ldreq	r1, [r3, #0]
 800d632:	685b      	ldreq	r3, [r3, #4]
 800d634:	6063      	str	r3, [r4, #4]
 800d636:	bf04      	itt	eq
 800d638:	1809      	addeq	r1, r1, r0
 800d63a:	6021      	streq	r1, [r4, #0]
 800d63c:	6054      	str	r4, [r2, #4]
 800d63e:	e7ca      	b.n	800d5d6 <_free_r+0x22>
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	bf00      	nop
 800d644:	20009ba0 	.word	0x20009ba0

0800d648 <malloc>:
 800d648:	4b02      	ldr	r3, [pc, #8]	@ (800d654 <malloc+0xc>)
 800d64a:	4601      	mov	r1, r0
 800d64c:	6818      	ldr	r0, [r3, #0]
 800d64e:	f000 b825 	b.w	800d69c <_malloc_r>
 800d652:	bf00      	nop
 800d654:	20006c64 	.word	0x20006c64

0800d658 <sbrk_aligned>:
 800d658:	b570      	push	{r4, r5, r6, lr}
 800d65a:	4e0f      	ldr	r6, [pc, #60]	@ (800d698 <sbrk_aligned+0x40>)
 800d65c:	460c      	mov	r4, r1
 800d65e:	6831      	ldr	r1, [r6, #0]
 800d660:	4605      	mov	r5, r0
 800d662:	b911      	cbnz	r1, 800d66a <sbrk_aligned+0x12>
 800d664:	f000 f964 	bl	800d930 <_sbrk_r>
 800d668:	6030      	str	r0, [r6, #0]
 800d66a:	4621      	mov	r1, r4
 800d66c:	4628      	mov	r0, r5
 800d66e:	f000 f95f 	bl	800d930 <_sbrk_r>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	d103      	bne.n	800d67e <sbrk_aligned+0x26>
 800d676:	f04f 34ff 	mov.w	r4, #4294967295
 800d67a:	4620      	mov	r0, r4
 800d67c:	bd70      	pop	{r4, r5, r6, pc}
 800d67e:	1cc4      	adds	r4, r0, #3
 800d680:	f024 0403 	bic.w	r4, r4, #3
 800d684:	42a0      	cmp	r0, r4
 800d686:	d0f8      	beq.n	800d67a <sbrk_aligned+0x22>
 800d688:	1a21      	subs	r1, r4, r0
 800d68a:	4628      	mov	r0, r5
 800d68c:	f000 f950 	bl	800d930 <_sbrk_r>
 800d690:	3001      	adds	r0, #1
 800d692:	d1f2      	bne.n	800d67a <sbrk_aligned+0x22>
 800d694:	e7ef      	b.n	800d676 <sbrk_aligned+0x1e>
 800d696:	bf00      	nop
 800d698:	20009b9c 	.word	0x20009b9c

0800d69c <_malloc_r>:
 800d69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a0:	1ccd      	adds	r5, r1, #3
 800d6a2:	f025 0503 	bic.w	r5, r5, #3
 800d6a6:	3508      	adds	r5, #8
 800d6a8:	2d0c      	cmp	r5, #12
 800d6aa:	bf38      	it	cc
 800d6ac:	250c      	movcc	r5, #12
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	db01      	blt.n	800d6b8 <_malloc_r+0x1c>
 800d6b4:	42a9      	cmp	r1, r5
 800d6b6:	d904      	bls.n	800d6c2 <_malloc_r+0x26>
 800d6b8:	230c      	movs	r3, #12
 800d6ba:	6033      	str	r3, [r6, #0]
 800d6bc:	2000      	movs	r0, #0
 800d6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d798 <_malloc_r+0xfc>
 800d6c6:	f000 f869 	bl	800d79c <__malloc_lock>
 800d6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ce:	461c      	mov	r4, r3
 800d6d0:	bb44      	cbnz	r4, 800d724 <_malloc_r+0x88>
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7ff ffbf 	bl	800d658 <sbrk_aligned>
 800d6da:	1c43      	adds	r3, r0, #1
 800d6dc:	4604      	mov	r4, r0
 800d6de:	d158      	bne.n	800d792 <_malloc_r+0xf6>
 800d6e0:	f8d8 4000 	ldr.w	r4, [r8]
 800d6e4:	4627      	mov	r7, r4
 800d6e6:	2f00      	cmp	r7, #0
 800d6e8:	d143      	bne.n	800d772 <_malloc_r+0xd6>
 800d6ea:	2c00      	cmp	r4, #0
 800d6ec:	d04b      	beq.n	800d786 <_malloc_r+0xea>
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	eb04 0903 	add.w	r9, r4, r3
 800d6f8:	f000 f91a 	bl	800d930 <_sbrk_r>
 800d6fc:	4581      	cmp	r9, r0
 800d6fe:	d142      	bne.n	800d786 <_malloc_r+0xea>
 800d700:	6821      	ldr	r1, [r4, #0]
 800d702:	1a6d      	subs	r5, r5, r1
 800d704:	4629      	mov	r1, r5
 800d706:	4630      	mov	r0, r6
 800d708:	f7ff ffa6 	bl	800d658 <sbrk_aligned>
 800d70c:	3001      	adds	r0, #1
 800d70e:	d03a      	beq.n	800d786 <_malloc_r+0xea>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	442b      	add	r3, r5
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	f8d8 3000 	ldr.w	r3, [r8]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	bb62      	cbnz	r2, 800d778 <_malloc_r+0xdc>
 800d71e:	f8c8 7000 	str.w	r7, [r8]
 800d722:	e00f      	b.n	800d744 <_malloc_r+0xa8>
 800d724:	6822      	ldr	r2, [r4, #0]
 800d726:	1b52      	subs	r2, r2, r5
 800d728:	d420      	bmi.n	800d76c <_malloc_r+0xd0>
 800d72a:	2a0b      	cmp	r2, #11
 800d72c:	d917      	bls.n	800d75e <_malloc_r+0xc2>
 800d72e:	1961      	adds	r1, r4, r5
 800d730:	42a3      	cmp	r3, r4
 800d732:	6025      	str	r5, [r4, #0]
 800d734:	bf18      	it	ne
 800d736:	6059      	strne	r1, [r3, #4]
 800d738:	6863      	ldr	r3, [r4, #4]
 800d73a:	bf08      	it	eq
 800d73c:	f8c8 1000 	streq.w	r1, [r8]
 800d740:	5162      	str	r2, [r4, r5]
 800d742:	604b      	str	r3, [r1, #4]
 800d744:	4630      	mov	r0, r6
 800d746:	f000 f82f 	bl	800d7a8 <__malloc_unlock>
 800d74a:	f104 000b 	add.w	r0, r4, #11
 800d74e:	1d23      	adds	r3, r4, #4
 800d750:	f020 0007 	bic.w	r0, r0, #7
 800d754:	1ac2      	subs	r2, r0, r3
 800d756:	bf1c      	itt	ne
 800d758:	1a1b      	subne	r3, r3, r0
 800d75a:	50a3      	strne	r3, [r4, r2]
 800d75c:	e7af      	b.n	800d6be <_malloc_r+0x22>
 800d75e:	6862      	ldr	r2, [r4, #4]
 800d760:	42a3      	cmp	r3, r4
 800d762:	bf0c      	ite	eq
 800d764:	f8c8 2000 	streq.w	r2, [r8]
 800d768:	605a      	strne	r2, [r3, #4]
 800d76a:	e7eb      	b.n	800d744 <_malloc_r+0xa8>
 800d76c:	4623      	mov	r3, r4
 800d76e:	6864      	ldr	r4, [r4, #4]
 800d770:	e7ae      	b.n	800d6d0 <_malloc_r+0x34>
 800d772:	463c      	mov	r4, r7
 800d774:	687f      	ldr	r7, [r7, #4]
 800d776:	e7b6      	b.n	800d6e6 <_malloc_r+0x4a>
 800d778:	461a      	mov	r2, r3
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	42a3      	cmp	r3, r4
 800d77e:	d1fb      	bne.n	800d778 <_malloc_r+0xdc>
 800d780:	2300      	movs	r3, #0
 800d782:	6053      	str	r3, [r2, #4]
 800d784:	e7de      	b.n	800d744 <_malloc_r+0xa8>
 800d786:	230c      	movs	r3, #12
 800d788:	6033      	str	r3, [r6, #0]
 800d78a:	4630      	mov	r0, r6
 800d78c:	f000 f80c 	bl	800d7a8 <__malloc_unlock>
 800d790:	e794      	b.n	800d6bc <_malloc_r+0x20>
 800d792:	6005      	str	r5, [r0, #0]
 800d794:	e7d6      	b.n	800d744 <_malloc_r+0xa8>
 800d796:	bf00      	nop
 800d798:	20009ba0 	.word	0x20009ba0

0800d79c <__malloc_lock>:
 800d79c:	4801      	ldr	r0, [pc, #4]	@ (800d7a4 <__malloc_lock+0x8>)
 800d79e:	f7ff bee8 	b.w	800d572 <__retarget_lock_acquire_recursive>
 800d7a2:	bf00      	nop
 800d7a4:	20009b98 	.word	0x20009b98

0800d7a8 <__malloc_unlock>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	@ (800d7b0 <__malloc_unlock+0x8>)
 800d7aa:	f7ff bee3 	b.w	800d574 <__retarget_lock_release_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	20009b98 	.word	0x20009b98

0800d7b4 <__sflush_r>:
 800d7b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	0716      	lsls	r6, r2, #28
 800d7be:	4605      	mov	r5, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	d454      	bmi.n	800d86e <__sflush_r+0xba>
 800d7c4:	684b      	ldr	r3, [r1, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dc02      	bgt.n	800d7d0 <__sflush_r+0x1c>
 800d7ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	dd48      	ble.n	800d862 <__sflush_r+0xae>
 800d7d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7d2:	2e00      	cmp	r6, #0
 800d7d4:	d045      	beq.n	800d862 <__sflush_r+0xae>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7dc:	682f      	ldr	r7, [r5, #0]
 800d7de:	6a21      	ldr	r1, [r4, #32]
 800d7e0:	602b      	str	r3, [r5, #0]
 800d7e2:	d030      	beq.n	800d846 <__sflush_r+0x92>
 800d7e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	0759      	lsls	r1, r3, #29
 800d7ea:	d505      	bpl.n	800d7f8 <__sflush_r+0x44>
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7f2:	b10b      	cbz	r3, 800d7f8 <__sflush_r+0x44>
 800d7f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7f6:	1ad2      	subs	r2, r2, r3
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7fc:	6a21      	ldr	r1, [r4, #32]
 800d7fe:	4628      	mov	r0, r5
 800d800:	47b0      	blx	r6
 800d802:	1c43      	adds	r3, r0, #1
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	d106      	bne.n	800d816 <__sflush_r+0x62>
 800d808:	6829      	ldr	r1, [r5, #0]
 800d80a:	291d      	cmp	r1, #29
 800d80c:	d82b      	bhi.n	800d866 <__sflush_r+0xb2>
 800d80e:	4a2a      	ldr	r2, [pc, #168]	@ (800d8b8 <__sflush_r+0x104>)
 800d810:	40ca      	lsrs	r2, r1
 800d812:	07d6      	lsls	r6, r2, #31
 800d814:	d527      	bpl.n	800d866 <__sflush_r+0xb2>
 800d816:	2200      	movs	r2, #0
 800d818:	6062      	str	r2, [r4, #4]
 800d81a:	04d9      	lsls	r1, r3, #19
 800d81c:	6922      	ldr	r2, [r4, #16]
 800d81e:	6022      	str	r2, [r4, #0]
 800d820:	d504      	bpl.n	800d82c <__sflush_r+0x78>
 800d822:	1c42      	adds	r2, r0, #1
 800d824:	d101      	bne.n	800d82a <__sflush_r+0x76>
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	b903      	cbnz	r3, 800d82c <__sflush_r+0x78>
 800d82a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d82e:	602f      	str	r7, [r5, #0]
 800d830:	b1b9      	cbz	r1, 800d862 <__sflush_r+0xae>
 800d832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d836:	4299      	cmp	r1, r3
 800d838:	d002      	beq.n	800d840 <__sflush_r+0x8c>
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7ff feba 	bl	800d5b4 <_free_r>
 800d840:	2300      	movs	r3, #0
 800d842:	6363      	str	r3, [r4, #52]	@ 0x34
 800d844:	e00d      	b.n	800d862 <__sflush_r+0xae>
 800d846:	2301      	movs	r3, #1
 800d848:	4628      	mov	r0, r5
 800d84a:	47b0      	blx	r6
 800d84c:	4602      	mov	r2, r0
 800d84e:	1c50      	adds	r0, r2, #1
 800d850:	d1c9      	bne.n	800d7e6 <__sflush_r+0x32>
 800d852:	682b      	ldr	r3, [r5, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0c6      	beq.n	800d7e6 <__sflush_r+0x32>
 800d858:	2b1d      	cmp	r3, #29
 800d85a:	d001      	beq.n	800d860 <__sflush_r+0xac>
 800d85c:	2b16      	cmp	r3, #22
 800d85e:	d11e      	bne.n	800d89e <__sflush_r+0xea>
 800d860:	602f      	str	r7, [r5, #0]
 800d862:	2000      	movs	r0, #0
 800d864:	e022      	b.n	800d8ac <__sflush_r+0xf8>
 800d866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d86a:	b21b      	sxth	r3, r3
 800d86c:	e01b      	b.n	800d8a6 <__sflush_r+0xf2>
 800d86e:	690f      	ldr	r7, [r1, #16]
 800d870:	2f00      	cmp	r7, #0
 800d872:	d0f6      	beq.n	800d862 <__sflush_r+0xae>
 800d874:	0793      	lsls	r3, r2, #30
 800d876:	680e      	ldr	r6, [r1, #0]
 800d878:	bf08      	it	eq
 800d87a:	694b      	ldreq	r3, [r1, #20]
 800d87c:	600f      	str	r7, [r1, #0]
 800d87e:	bf18      	it	ne
 800d880:	2300      	movne	r3, #0
 800d882:	eba6 0807 	sub.w	r8, r6, r7
 800d886:	608b      	str	r3, [r1, #8]
 800d888:	f1b8 0f00 	cmp.w	r8, #0
 800d88c:	dde9      	ble.n	800d862 <__sflush_r+0xae>
 800d88e:	6a21      	ldr	r1, [r4, #32]
 800d890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d892:	4643      	mov	r3, r8
 800d894:	463a      	mov	r2, r7
 800d896:	4628      	mov	r0, r5
 800d898:	47b0      	blx	r6
 800d89a:	2800      	cmp	r0, #0
 800d89c:	dc08      	bgt.n	800d8b0 <__sflush_r+0xfc>
 800d89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b0:	4407      	add	r7, r0
 800d8b2:	eba8 0800 	sub.w	r8, r8, r0
 800d8b6:	e7e7      	b.n	800d888 <__sflush_r+0xd4>
 800d8b8:	20400001 	.word	0x20400001

0800d8bc <_fflush_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	690b      	ldr	r3, [r1, #16]
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	b913      	cbnz	r3, 800d8cc <_fflush_r+0x10>
 800d8c6:	2500      	movs	r5, #0
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	b118      	cbz	r0, 800d8d6 <_fflush_r+0x1a>
 800d8ce:	6a03      	ldr	r3, [r0, #32]
 800d8d0:	b90b      	cbnz	r3, 800d8d6 <_fflush_r+0x1a>
 800d8d2:	f7ff fd5b 	bl	800d38c <__sinit>
 800d8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0f3      	beq.n	800d8c6 <_fflush_r+0xa>
 800d8de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8e0:	07d0      	lsls	r0, r2, #31
 800d8e2:	d404      	bmi.n	800d8ee <_fflush_r+0x32>
 800d8e4:	0599      	lsls	r1, r3, #22
 800d8e6:	d402      	bmi.n	800d8ee <_fflush_r+0x32>
 800d8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ea:	f7ff fe42 	bl	800d572 <__retarget_lock_acquire_recursive>
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	f7ff ff5f 	bl	800d7b4 <__sflush_r>
 800d8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8f8:	07da      	lsls	r2, r3, #31
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	d4e4      	bmi.n	800d8c8 <_fflush_r+0xc>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	059b      	lsls	r3, r3, #22
 800d902:	d4e1      	bmi.n	800d8c8 <_fflush_r+0xc>
 800d904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d906:	f7ff fe35 	bl	800d574 <__retarget_lock_release_recursive>
 800d90a:	e7dd      	b.n	800d8c8 <_fflush_r+0xc>

0800d90c <fiprintf>:
 800d90c:	b40e      	push	{r1, r2, r3}
 800d90e:	b503      	push	{r0, r1, lr}
 800d910:	4601      	mov	r1, r0
 800d912:	ab03      	add	r3, sp, #12
 800d914:	4805      	ldr	r0, [pc, #20]	@ (800d92c <fiprintf+0x20>)
 800d916:	f853 2b04 	ldr.w	r2, [r3], #4
 800d91a:	6800      	ldr	r0, [r0, #0]
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	f000 f847 	bl	800d9b0 <_vfiprintf_r>
 800d922:	b002      	add	sp, #8
 800d924:	f85d eb04 	ldr.w	lr, [sp], #4
 800d928:	b003      	add	sp, #12
 800d92a:	4770      	bx	lr
 800d92c:	20006c64 	.word	0x20006c64

0800d930 <_sbrk_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4d06      	ldr	r5, [pc, #24]	@ (800d94c <_sbrk_r+0x1c>)
 800d934:	2300      	movs	r3, #0
 800d936:	4604      	mov	r4, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	602b      	str	r3, [r5, #0]
 800d93c:	f7f8 fe12 	bl	8006564 <_sbrk>
 800d940:	1c43      	adds	r3, r0, #1
 800d942:	d102      	bne.n	800d94a <_sbrk_r+0x1a>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	b103      	cbz	r3, 800d94a <_sbrk_r+0x1a>
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	bd38      	pop	{r3, r4, r5, pc}
 800d94c:	20009b94 	.word	0x20009b94

0800d950 <abort>:
 800d950:	b508      	push	{r3, lr}
 800d952:	2006      	movs	r0, #6
 800d954:	f000 fb8c 	bl	800e070 <raise>
 800d958:	2001      	movs	r0, #1
 800d95a:	f7f8 fd8b 	bl	8006474 <_exit>

0800d95e <__sfputc_r>:
 800d95e:	6893      	ldr	r3, [r2, #8]
 800d960:	3b01      	subs	r3, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	b410      	push	{r4}
 800d966:	6093      	str	r3, [r2, #8]
 800d968:	da08      	bge.n	800d97c <__sfputc_r+0x1e>
 800d96a:	6994      	ldr	r4, [r2, #24]
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	db01      	blt.n	800d974 <__sfputc_r+0x16>
 800d970:	290a      	cmp	r1, #10
 800d972:	d103      	bne.n	800d97c <__sfputc_r+0x1e>
 800d974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d978:	f000 babe 	b.w	800def8 <__swbuf_r>
 800d97c:	6813      	ldr	r3, [r2, #0]
 800d97e:	1c58      	adds	r0, r3, #1
 800d980:	6010      	str	r0, [r2, #0]
 800d982:	7019      	strb	r1, [r3, #0]
 800d984:	4608      	mov	r0, r1
 800d986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <__sfputs_r>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	4606      	mov	r6, r0
 800d990:	460f      	mov	r7, r1
 800d992:	4614      	mov	r4, r2
 800d994:	18d5      	adds	r5, r2, r3
 800d996:	42ac      	cmp	r4, r5
 800d998:	d101      	bne.n	800d99e <__sfputs_r+0x12>
 800d99a:	2000      	movs	r0, #0
 800d99c:	e007      	b.n	800d9ae <__sfputs_r+0x22>
 800d99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a2:	463a      	mov	r2, r7
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f7ff ffda 	bl	800d95e <__sfputc_r>
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	d1f3      	bne.n	800d996 <__sfputs_r+0xa>
 800d9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9b0 <_vfiprintf_r>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	460d      	mov	r5, r1
 800d9b6:	b09d      	sub	sp, #116	@ 0x74
 800d9b8:	4614      	mov	r4, r2
 800d9ba:	4698      	mov	r8, r3
 800d9bc:	4606      	mov	r6, r0
 800d9be:	b118      	cbz	r0, 800d9c8 <_vfiprintf_r+0x18>
 800d9c0:	6a03      	ldr	r3, [r0, #32]
 800d9c2:	b90b      	cbnz	r3, 800d9c8 <_vfiprintf_r+0x18>
 800d9c4:	f7ff fce2 	bl	800d38c <__sinit>
 800d9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9ca:	07d9      	lsls	r1, r3, #31
 800d9cc:	d405      	bmi.n	800d9da <_vfiprintf_r+0x2a>
 800d9ce:	89ab      	ldrh	r3, [r5, #12]
 800d9d0:	059a      	lsls	r2, r3, #22
 800d9d2:	d402      	bmi.n	800d9da <_vfiprintf_r+0x2a>
 800d9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9d6:	f7ff fdcc 	bl	800d572 <__retarget_lock_acquire_recursive>
 800d9da:	89ab      	ldrh	r3, [r5, #12]
 800d9dc:	071b      	lsls	r3, r3, #28
 800d9de:	d501      	bpl.n	800d9e4 <_vfiprintf_r+0x34>
 800d9e0:	692b      	ldr	r3, [r5, #16]
 800d9e2:	b99b      	cbnz	r3, 800da0c <_vfiprintf_r+0x5c>
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f000 fac4 	bl	800df74 <__swsetup_r>
 800d9ec:	b170      	cbz	r0, 800da0c <_vfiprintf_r+0x5c>
 800d9ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9f0:	07dc      	lsls	r4, r3, #31
 800d9f2:	d504      	bpl.n	800d9fe <_vfiprintf_r+0x4e>
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	b01d      	add	sp, #116	@ 0x74
 800d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fe:	89ab      	ldrh	r3, [r5, #12]
 800da00:	0598      	lsls	r0, r3, #22
 800da02:	d4f7      	bmi.n	800d9f4 <_vfiprintf_r+0x44>
 800da04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da06:	f7ff fdb5 	bl	800d574 <__retarget_lock_release_recursive>
 800da0a:	e7f3      	b.n	800d9f4 <_vfiprintf_r+0x44>
 800da0c:	2300      	movs	r3, #0
 800da0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da10:	2320      	movs	r3, #32
 800da12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da16:	f8cd 800c 	str.w	r8, [sp, #12]
 800da1a:	2330      	movs	r3, #48	@ 0x30
 800da1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dbcc <_vfiprintf_r+0x21c>
 800da20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da24:	f04f 0901 	mov.w	r9, #1
 800da28:	4623      	mov	r3, r4
 800da2a:	469a      	mov	sl, r3
 800da2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da30:	b10a      	cbz	r2, 800da36 <_vfiprintf_r+0x86>
 800da32:	2a25      	cmp	r2, #37	@ 0x25
 800da34:	d1f9      	bne.n	800da2a <_vfiprintf_r+0x7a>
 800da36:	ebba 0b04 	subs.w	fp, sl, r4
 800da3a:	d00b      	beq.n	800da54 <_vfiprintf_r+0xa4>
 800da3c:	465b      	mov	r3, fp
 800da3e:	4622      	mov	r2, r4
 800da40:	4629      	mov	r1, r5
 800da42:	4630      	mov	r0, r6
 800da44:	f7ff ffa2 	bl	800d98c <__sfputs_r>
 800da48:	3001      	adds	r0, #1
 800da4a:	f000 80a7 	beq.w	800db9c <_vfiprintf_r+0x1ec>
 800da4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da50:	445a      	add	r2, fp
 800da52:	9209      	str	r2, [sp, #36]	@ 0x24
 800da54:	f89a 3000 	ldrb.w	r3, [sl]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 809f 	beq.w	800db9c <_vfiprintf_r+0x1ec>
 800da5e:	2300      	movs	r3, #0
 800da60:	f04f 32ff 	mov.w	r2, #4294967295
 800da64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da68:	f10a 0a01 	add.w	sl, sl, #1
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	9307      	str	r3, [sp, #28]
 800da70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da74:	931a      	str	r3, [sp, #104]	@ 0x68
 800da76:	4654      	mov	r4, sl
 800da78:	2205      	movs	r2, #5
 800da7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7e:	4853      	ldr	r0, [pc, #332]	@ (800dbcc <_vfiprintf_r+0x21c>)
 800da80:	f7f2 fbc6 	bl	8000210 <memchr>
 800da84:	9a04      	ldr	r2, [sp, #16]
 800da86:	b9d8      	cbnz	r0, 800dac0 <_vfiprintf_r+0x110>
 800da88:	06d1      	lsls	r1, r2, #27
 800da8a:	bf44      	itt	mi
 800da8c:	2320      	movmi	r3, #32
 800da8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da92:	0713      	lsls	r3, r2, #28
 800da94:	bf44      	itt	mi
 800da96:	232b      	movmi	r3, #43	@ 0x2b
 800da98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da9c:	f89a 3000 	ldrb.w	r3, [sl]
 800daa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800daa2:	d015      	beq.n	800dad0 <_vfiprintf_r+0x120>
 800daa4:	9a07      	ldr	r2, [sp, #28]
 800daa6:	4654      	mov	r4, sl
 800daa8:	2000      	movs	r0, #0
 800daaa:	f04f 0c0a 	mov.w	ip, #10
 800daae:	4621      	mov	r1, r4
 800dab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dab4:	3b30      	subs	r3, #48	@ 0x30
 800dab6:	2b09      	cmp	r3, #9
 800dab8:	d94b      	bls.n	800db52 <_vfiprintf_r+0x1a2>
 800daba:	b1b0      	cbz	r0, 800daea <_vfiprintf_r+0x13a>
 800dabc:	9207      	str	r2, [sp, #28]
 800dabe:	e014      	b.n	800daea <_vfiprintf_r+0x13a>
 800dac0:	eba0 0308 	sub.w	r3, r0, r8
 800dac4:	fa09 f303 	lsl.w	r3, r9, r3
 800dac8:	4313      	orrs	r3, r2
 800daca:	9304      	str	r3, [sp, #16]
 800dacc:	46a2      	mov	sl, r4
 800dace:	e7d2      	b.n	800da76 <_vfiprintf_r+0xc6>
 800dad0:	9b03      	ldr	r3, [sp, #12]
 800dad2:	1d19      	adds	r1, r3, #4
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	9103      	str	r1, [sp, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	bfbb      	ittet	lt
 800dadc:	425b      	neglt	r3, r3
 800dade:	f042 0202 	orrlt.w	r2, r2, #2
 800dae2:	9307      	strge	r3, [sp, #28]
 800dae4:	9307      	strlt	r3, [sp, #28]
 800dae6:	bfb8      	it	lt
 800dae8:	9204      	strlt	r2, [sp, #16]
 800daea:	7823      	ldrb	r3, [r4, #0]
 800daec:	2b2e      	cmp	r3, #46	@ 0x2e
 800daee:	d10a      	bne.n	800db06 <_vfiprintf_r+0x156>
 800daf0:	7863      	ldrb	r3, [r4, #1]
 800daf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf4:	d132      	bne.n	800db5c <_vfiprintf_r+0x1ac>
 800daf6:	9b03      	ldr	r3, [sp, #12]
 800daf8:	1d1a      	adds	r2, r3, #4
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	9203      	str	r2, [sp, #12]
 800dafe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db02:	3402      	adds	r4, #2
 800db04:	9305      	str	r3, [sp, #20]
 800db06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dbdc <_vfiprintf_r+0x22c>
 800db0a:	7821      	ldrb	r1, [r4, #0]
 800db0c:	2203      	movs	r2, #3
 800db0e:	4650      	mov	r0, sl
 800db10:	f7f2 fb7e 	bl	8000210 <memchr>
 800db14:	b138      	cbz	r0, 800db26 <_vfiprintf_r+0x176>
 800db16:	9b04      	ldr	r3, [sp, #16]
 800db18:	eba0 000a 	sub.w	r0, r0, sl
 800db1c:	2240      	movs	r2, #64	@ 0x40
 800db1e:	4082      	lsls	r2, r0
 800db20:	4313      	orrs	r3, r2
 800db22:	3401      	adds	r4, #1
 800db24:	9304      	str	r3, [sp, #16]
 800db26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db2a:	4829      	ldr	r0, [pc, #164]	@ (800dbd0 <_vfiprintf_r+0x220>)
 800db2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db30:	2206      	movs	r2, #6
 800db32:	f7f2 fb6d 	bl	8000210 <memchr>
 800db36:	2800      	cmp	r0, #0
 800db38:	d03f      	beq.n	800dbba <_vfiprintf_r+0x20a>
 800db3a:	4b26      	ldr	r3, [pc, #152]	@ (800dbd4 <_vfiprintf_r+0x224>)
 800db3c:	bb1b      	cbnz	r3, 800db86 <_vfiprintf_r+0x1d6>
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	3307      	adds	r3, #7
 800db42:	f023 0307 	bic.w	r3, r3, #7
 800db46:	3308      	adds	r3, #8
 800db48:	9303      	str	r3, [sp, #12]
 800db4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4c:	443b      	add	r3, r7
 800db4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800db50:	e76a      	b.n	800da28 <_vfiprintf_r+0x78>
 800db52:	fb0c 3202 	mla	r2, ip, r2, r3
 800db56:	460c      	mov	r4, r1
 800db58:	2001      	movs	r0, #1
 800db5a:	e7a8      	b.n	800daae <_vfiprintf_r+0xfe>
 800db5c:	2300      	movs	r3, #0
 800db5e:	3401      	adds	r4, #1
 800db60:	9305      	str	r3, [sp, #20]
 800db62:	4619      	mov	r1, r3
 800db64:	f04f 0c0a 	mov.w	ip, #10
 800db68:	4620      	mov	r0, r4
 800db6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db6e:	3a30      	subs	r2, #48	@ 0x30
 800db70:	2a09      	cmp	r2, #9
 800db72:	d903      	bls.n	800db7c <_vfiprintf_r+0x1cc>
 800db74:	2b00      	cmp	r3, #0
 800db76:	d0c6      	beq.n	800db06 <_vfiprintf_r+0x156>
 800db78:	9105      	str	r1, [sp, #20]
 800db7a:	e7c4      	b.n	800db06 <_vfiprintf_r+0x156>
 800db7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800db80:	4604      	mov	r4, r0
 800db82:	2301      	movs	r3, #1
 800db84:	e7f0      	b.n	800db68 <_vfiprintf_r+0x1b8>
 800db86:	ab03      	add	r3, sp, #12
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	462a      	mov	r2, r5
 800db8c:	4b12      	ldr	r3, [pc, #72]	@ (800dbd8 <_vfiprintf_r+0x228>)
 800db8e:	a904      	add	r1, sp, #16
 800db90:	4630      	mov	r0, r6
 800db92:	f3af 8000 	nop.w
 800db96:	4607      	mov	r7, r0
 800db98:	1c78      	adds	r0, r7, #1
 800db9a:	d1d6      	bne.n	800db4a <_vfiprintf_r+0x19a>
 800db9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db9e:	07d9      	lsls	r1, r3, #31
 800dba0:	d405      	bmi.n	800dbae <_vfiprintf_r+0x1fe>
 800dba2:	89ab      	ldrh	r3, [r5, #12]
 800dba4:	059a      	lsls	r2, r3, #22
 800dba6:	d402      	bmi.n	800dbae <_vfiprintf_r+0x1fe>
 800dba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbaa:	f7ff fce3 	bl	800d574 <__retarget_lock_release_recursive>
 800dbae:	89ab      	ldrh	r3, [r5, #12]
 800dbb0:	065b      	lsls	r3, r3, #25
 800dbb2:	f53f af1f 	bmi.w	800d9f4 <_vfiprintf_r+0x44>
 800dbb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbb8:	e71e      	b.n	800d9f8 <_vfiprintf_r+0x48>
 800dbba:	ab03      	add	r3, sp, #12
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	4b05      	ldr	r3, [pc, #20]	@ (800dbd8 <_vfiprintf_r+0x228>)
 800dbc2:	a904      	add	r1, sp, #16
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f000 f879 	bl	800dcbc <_printf_i>
 800dbca:	e7e4      	b.n	800db96 <_vfiprintf_r+0x1e6>
 800dbcc:	0801b72f 	.word	0x0801b72f
 800dbd0:	0801b739 	.word	0x0801b739
 800dbd4:	00000000 	.word	0x00000000
 800dbd8:	0800d98d 	.word	0x0800d98d
 800dbdc:	0801b735 	.word	0x0801b735

0800dbe0 <_printf_common>:
 800dbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe4:	4616      	mov	r6, r2
 800dbe6:	4698      	mov	r8, r3
 800dbe8:	688a      	ldr	r2, [r1, #8]
 800dbea:	690b      	ldr	r3, [r1, #16]
 800dbec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	bfb8      	it	lt
 800dbf4:	4613      	movlt	r3, r2
 800dbf6:	6033      	str	r3, [r6, #0]
 800dbf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	460c      	mov	r4, r1
 800dc00:	b10a      	cbz	r2, 800dc06 <_printf_common+0x26>
 800dc02:	3301      	adds	r3, #1
 800dc04:	6033      	str	r3, [r6, #0]
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	0699      	lsls	r1, r3, #26
 800dc0a:	bf42      	ittt	mi
 800dc0c:	6833      	ldrmi	r3, [r6, #0]
 800dc0e:	3302      	addmi	r3, #2
 800dc10:	6033      	strmi	r3, [r6, #0]
 800dc12:	6825      	ldr	r5, [r4, #0]
 800dc14:	f015 0506 	ands.w	r5, r5, #6
 800dc18:	d106      	bne.n	800dc28 <_printf_common+0x48>
 800dc1a:	f104 0a19 	add.w	sl, r4, #25
 800dc1e:	68e3      	ldr	r3, [r4, #12]
 800dc20:	6832      	ldr	r2, [r6, #0]
 800dc22:	1a9b      	subs	r3, r3, r2
 800dc24:	42ab      	cmp	r3, r5
 800dc26:	dc26      	bgt.n	800dc76 <_printf_common+0x96>
 800dc28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	3b00      	subs	r3, #0
 800dc30:	bf18      	it	ne
 800dc32:	2301      	movne	r3, #1
 800dc34:	0692      	lsls	r2, r2, #26
 800dc36:	d42b      	bmi.n	800dc90 <_printf_common+0xb0>
 800dc38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc3c:	4641      	mov	r1, r8
 800dc3e:	4638      	mov	r0, r7
 800dc40:	47c8      	blx	r9
 800dc42:	3001      	adds	r0, #1
 800dc44:	d01e      	beq.n	800dc84 <_printf_common+0xa4>
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	6922      	ldr	r2, [r4, #16]
 800dc4a:	f003 0306 	and.w	r3, r3, #6
 800dc4e:	2b04      	cmp	r3, #4
 800dc50:	bf02      	ittt	eq
 800dc52:	68e5      	ldreq	r5, [r4, #12]
 800dc54:	6833      	ldreq	r3, [r6, #0]
 800dc56:	1aed      	subeq	r5, r5, r3
 800dc58:	68a3      	ldr	r3, [r4, #8]
 800dc5a:	bf0c      	ite	eq
 800dc5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc60:	2500      	movne	r5, #0
 800dc62:	4293      	cmp	r3, r2
 800dc64:	bfc4      	itt	gt
 800dc66:	1a9b      	subgt	r3, r3, r2
 800dc68:	18ed      	addgt	r5, r5, r3
 800dc6a:	2600      	movs	r6, #0
 800dc6c:	341a      	adds	r4, #26
 800dc6e:	42b5      	cmp	r5, r6
 800dc70:	d11a      	bne.n	800dca8 <_printf_common+0xc8>
 800dc72:	2000      	movs	r0, #0
 800dc74:	e008      	b.n	800dc88 <_printf_common+0xa8>
 800dc76:	2301      	movs	r3, #1
 800dc78:	4652      	mov	r2, sl
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	4638      	mov	r0, r7
 800dc7e:	47c8      	blx	r9
 800dc80:	3001      	adds	r0, #1
 800dc82:	d103      	bne.n	800dc8c <_printf_common+0xac>
 800dc84:	f04f 30ff 	mov.w	r0, #4294967295
 800dc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8c:	3501      	adds	r5, #1
 800dc8e:	e7c6      	b.n	800dc1e <_printf_common+0x3e>
 800dc90:	18e1      	adds	r1, r4, r3
 800dc92:	1c5a      	adds	r2, r3, #1
 800dc94:	2030      	movs	r0, #48	@ 0x30
 800dc96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc9a:	4422      	add	r2, r4
 800dc9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dca0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dca4:	3302      	adds	r3, #2
 800dca6:	e7c7      	b.n	800dc38 <_printf_common+0x58>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	4622      	mov	r2, r4
 800dcac:	4641      	mov	r1, r8
 800dcae:	4638      	mov	r0, r7
 800dcb0:	47c8      	blx	r9
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	d0e6      	beq.n	800dc84 <_printf_common+0xa4>
 800dcb6:	3601      	adds	r6, #1
 800dcb8:	e7d9      	b.n	800dc6e <_printf_common+0x8e>
	...

0800dcbc <_printf_i>:
 800dcbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc0:	7e0f      	ldrb	r7, [r1, #24]
 800dcc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dcc4:	2f78      	cmp	r7, #120	@ 0x78
 800dcc6:	4691      	mov	r9, r2
 800dcc8:	4680      	mov	r8, r0
 800dcca:	460c      	mov	r4, r1
 800dccc:	469a      	mov	sl, r3
 800dcce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcd2:	d807      	bhi.n	800dce4 <_printf_i+0x28>
 800dcd4:	2f62      	cmp	r7, #98	@ 0x62
 800dcd6:	d80a      	bhi.n	800dcee <_printf_i+0x32>
 800dcd8:	2f00      	cmp	r7, #0
 800dcda:	f000 80d1 	beq.w	800de80 <_printf_i+0x1c4>
 800dcde:	2f58      	cmp	r7, #88	@ 0x58
 800dce0:	f000 80b8 	beq.w	800de54 <_printf_i+0x198>
 800dce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dce8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcec:	e03a      	b.n	800dd64 <_printf_i+0xa8>
 800dcee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcf2:	2b15      	cmp	r3, #21
 800dcf4:	d8f6      	bhi.n	800dce4 <_printf_i+0x28>
 800dcf6:	a101      	add	r1, pc, #4	@ (adr r1, 800dcfc <_printf_i+0x40>)
 800dcf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcfc:	0800dd55 	.word	0x0800dd55
 800dd00:	0800dd69 	.word	0x0800dd69
 800dd04:	0800dce5 	.word	0x0800dce5
 800dd08:	0800dce5 	.word	0x0800dce5
 800dd0c:	0800dce5 	.word	0x0800dce5
 800dd10:	0800dce5 	.word	0x0800dce5
 800dd14:	0800dd69 	.word	0x0800dd69
 800dd18:	0800dce5 	.word	0x0800dce5
 800dd1c:	0800dce5 	.word	0x0800dce5
 800dd20:	0800dce5 	.word	0x0800dce5
 800dd24:	0800dce5 	.word	0x0800dce5
 800dd28:	0800de67 	.word	0x0800de67
 800dd2c:	0800dd93 	.word	0x0800dd93
 800dd30:	0800de21 	.word	0x0800de21
 800dd34:	0800dce5 	.word	0x0800dce5
 800dd38:	0800dce5 	.word	0x0800dce5
 800dd3c:	0800de89 	.word	0x0800de89
 800dd40:	0800dce5 	.word	0x0800dce5
 800dd44:	0800dd93 	.word	0x0800dd93
 800dd48:	0800dce5 	.word	0x0800dce5
 800dd4c:	0800dce5 	.word	0x0800dce5
 800dd50:	0800de29 	.word	0x0800de29
 800dd54:	6833      	ldr	r3, [r6, #0]
 800dd56:	1d1a      	adds	r2, r3, #4
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6032      	str	r2, [r6, #0]
 800dd5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd64:	2301      	movs	r3, #1
 800dd66:	e09c      	b.n	800dea2 <_printf_i+0x1e6>
 800dd68:	6833      	ldr	r3, [r6, #0]
 800dd6a:	6820      	ldr	r0, [r4, #0]
 800dd6c:	1d19      	adds	r1, r3, #4
 800dd6e:	6031      	str	r1, [r6, #0]
 800dd70:	0606      	lsls	r6, r0, #24
 800dd72:	d501      	bpl.n	800dd78 <_printf_i+0xbc>
 800dd74:	681d      	ldr	r5, [r3, #0]
 800dd76:	e003      	b.n	800dd80 <_printf_i+0xc4>
 800dd78:	0645      	lsls	r5, r0, #25
 800dd7a:	d5fb      	bpl.n	800dd74 <_printf_i+0xb8>
 800dd7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd80:	2d00      	cmp	r5, #0
 800dd82:	da03      	bge.n	800dd8c <_printf_i+0xd0>
 800dd84:	232d      	movs	r3, #45	@ 0x2d
 800dd86:	426d      	negs	r5, r5
 800dd88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd8c:	4858      	ldr	r0, [pc, #352]	@ (800def0 <_printf_i+0x234>)
 800dd8e:	230a      	movs	r3, #10
 800dd90:	e011      	b.n	800ddb6 <_printf_i+0xfa>
 800dd92:	6821      	ldr	r1, [r4, #0]
 800dd94:	6833      	ldr	r3, [r6, #0]
 800dd96:	0608      	lsls	r0, r1, #24
 800dd98:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd9c:	d402      	bmi.n	800dda4 <_printf_i+0xe8>
 800dd9e:	0649      	lsls	r1, r1, #25
 800dda0:	bf48      	it	mi
 800dda2:	b2ad      	uxthmi	r5, r5
 800dda4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dda6:	4852      	ldr	r0, [pc, #328]	@ (800def0 <_printf_i+0x234>)
 800dda8:	6033      	str	r3, [r6, #0]
 800ddaa:	bf14      	ite	ne
 800ddac:	230a      	movne	r3, #10
 800ddae:	2308      	moveq	r3, #8
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddb6:	6866      	ldr	r6, [r4, #4]
 800ddb8:	60a6      	str	r6, [r4, #8]
 800ddba:	2e00      	cmp	r6, #0
 800ddbc:	db05      	blt.n	800ddca <_printf_i+0x10e>
 800ddbe:	6821      	ldr	r1, [r4, #0]
 800ddc0:	432e      	orrs	r6, r5
 800ddc2:	f021 0104 	bic.w	r1, r1, #4
 800ddc6:	6021      	str	r1, [r4, #0]
 800ddc8:	d04b      	beq.n	800de62 <_printf_i+0x1a6>
 800ddca:	4616      	mov	r6, r2
 800ddcc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddd0:	fb03 5711 	mls	r7, r3, r1, r5
 800ddd4:	5dc7      	ldrb	r7, [r0, r7]
 800ddd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddda:	462f      	mov	r7, r5
 800dddc:	42bb      	cmp	r3, r7
 800ddde:	460d      	mov	r5, r1
 800dde0:	d9f4      	bls.n	800ddcc <_printf_i+0x110>
 800dde2:	2b08      	cmp	r3, #8
 800dde4:	d10b      	bne.n	800ddfe <_printf_i+0x142>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	07df      	lsls	r7, r3, #31
 800ddea:	d508      	bpl.n	800ddfe <_printf_i+0x142>
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	6861      	ldr	r1, [r4, #4]
 800ddf0:	4299      	cmp	r1, r3
 800ddf2:	bfde      	ittt	le
 800ddf4:	2330      	movle	r3, #48	@ 0x30
 800ddf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddfe:	1b92      	subs	r2, r2, r6
 800de00:	6122      	str	r2, [r4, #16]
 800de02:	f8cd a000 	str.w	sl, [sp]
 800de06:	464b      	mov	r3, r9
 800de08:	aa03      	add	r2, sp, #12
 800de0a:	4621      	mov	r1, r4
 800de0c:	4640      	mov	r0, r8
 800de0e:	f7ff fee7 	bl	800dbe0 <_printf_common>
 800de12:	3001      	adds	r0, #1
 800de14:	d14a      	bne.n	800deac <_printf_i+0x1f0>
 800de16:	f04f 30ff 	mov.w	r0, #4294967295
 800de1a:	b004      	add	sp, #16
 800de1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de20:	6823      	ldr	r3, [r4, #0]
 800de22:	f043 0320 	orr.w	r3, r3, #32
 800de26:	6023      	str	r3, [r4, #0]
 800de28:	4832      	ldr	r0, [pc, #200]	@ (800def4 <_printf_i+0x238>)
 800de2a:	2778      	movs	r7, #120	@ 0x78
 800de2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	6831      	ldr	r1, [r6, #0]
 800de34:	061f      	lsls	r7, r3, #24
 800de36:	f851 5b04 	ldr.w	r5, [r1], #4
 800de3a:	d402      	bmi.n	800de42 <_printf_i+0x186>
 800de3c:	065f      	lsls	r7, r3, #25
 800de3e:	bf48      	it	mi
 800de40:	b2ad      	uxthmi	r5, r5
 800de42:	6031      	str	r1, [r6, #0]
 800de44:	07d9      	lsls	r1, r3, #31
 800de46:	bf44      	itt	mi
 800de48:	f043 0320 	orrmi.w	r3, r3, #32
 800de4c:	6023      	strmi	r3, [r4, #0]
 800de4e:	b11d      	cbz	r5, 800de58 <_printf_i+0x19c>
 800de50:	2310      	movs	r3, #16
 800de52:	e7ad      	b.n	800ddb0 <_printf_i+0xf4>
 800de54:	4826      	ldr	r0, [pc, #152]	@ (800def0 <_printf_i+0x234>)
 800de56:	e7e9      	b.n	800de2c <_printf_i+0x170>
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	f023 0320 	bic.w	r3, r3, #32
 800de5e:	6023      	str	r3, [r4, #0]
 800de60:	e7f6      	b.n	800de50 <_printf_i+0x194>
 800de62:	4616      	mov	r6, r2
 800de64:	e7bd      	b.n	800dde2 <_printf_i+0x126>
 800de66:	6833      	ldr	r3, [r6, #0]
 800de68:	6825      	ldr	r5, [r4, #0]
 800de6a:	6961      	ldr	r1, [r4, #20]
 800de6c:	1d18      	adds	r0, r3, #4
 800de6e:	6030      	str	r0, [r6, #0]
 800de70:	062e      	lsls	r6, r5, #24
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	d501      	bpl.n	800de7a <_printf_i+0x1be>
 800de76:	6019      	str	r1, [r3, #0]
 800de78:	e002      	b.n	800de80 <_printf_i+0x1c4>
 800de7a:	0668      	lsls	r0, r5, #25
 800de7c:	d5fb      	bpl.n	800de76 <_printf_i+0x1ba>
 800de7e:	8019      	strh	r1, [r3, #0]
 800de80:	2300      	movs	r3, #0
 800de82:	6123      	str	r3, [r4, #16]
 800de84:	4616      	mov	r6, r2
 800de86:	e7bc      	b.n	800de02 <_printf_i+0x146>
 800de88:	6833      	ldr	r3, [r6, #0]
 800de8a:	1d1a      	adds	r2, r3, #4
 800de8c:	6032      	str	r2, [r6, #0]
 800de8e:	681e      	ldr	r6, [r3, #0]
 800de90:	6862      	ldr	r2, [r4, #4]
 800de92:	2100      	movs	r1, #0
 800de94:	4630      	mov	r0, r6
 800de96:	f7f2 f9bb 	bl	8000210 <memchr>
 800de9a:	b108      	cbz	r0, 800dea0 <_printf_i+0x1e4>
 800de9c:	1b80      	subs	r0, r0, r6
 800de9e:	6060      	str	r0, [r4, #4]
 800dea0:	6863      	ldr	r3, [r4, #4]
 800dea2:	6123      	str	r3, [r4, #16]
 800dea4:	2300      	movs	r3, #0
 800dea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800deaa:	e7aa      	b.n	800de02 <_printf_i+0x146>
 800deac:	6923      	ldr	r3, [r4, #16]
 800deae:	4632      	mov	r2, r6
 800deb0:	4649      	mov	r1, r9
 800deb2:	4640      	mov	r0, r8
 800deb4:	47d0      	blx	sl
 800deb6:	3001      	adds	r0, #1
 800deb8:	d0ad      	beq.n	800de16 <_printf_i+0x15a>
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	079b      	lsls	r3, r3, #30
 800debe:	d413      	bmi.n	800dee8 <_printf_i+0x22c>
 800dec0:	68e0      	ldr	r0, [r4, #12]
 800dec2:	9b03      	ldr	r3, [sp, #12]
 800dec4:	4298      	cmp	r0, r3
 800dec6:	bfb8      	it	lt
 800dec8:	4618      	movlt	r0, r3
 800deca:	e7a6      	b.n	800de1a <_printf_i+0x15e>
 800decc:	2301      	movs	r3, #1
 800dece:	4632      	mov	r2, r6
 800ded0:	4649      	mov	r1, r9
 800ded2:	4640      	mov	r0, r8
 800ded4:	47d0      	blx	sl
 800ded6:	3001      	adds	r0, #1
 800ded8:	d09d      	beq.n	800de16 <_printf_i+0x15a>
 800deda:	3501      	adds	r5, #1
 800dedc:	68e3      	ldr	r3, [r4, #12]
 800dede:	9903      	ldr	r1, [sp, #12]
 800dee0:	1a5b      	subs	r3, r3, r1
 800dee2:	42ab      	cmp	r3, r5
 800dee4:	dcf2      	bgt.n	800decc <_printf_i+0x210>
 800dee6:	e7eb      	b.n	800dec0 <_printf_i+0x204>
 800dee8:	2500      	movs	r5, #0
 800deea:	f104 0619 	add.w	r6, r4, #25
 800deee:	e7f5      	b.n	800dedc <_printf_i+0x220>
 800def0:	0801b740 	.word	0x0801b740
 800def4:	0801b751 	.word	0x0801b751

0800def8 <__swbuf_r>:
 800def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800defa:	460e      	mov	r6, r1
 800defc:	4614      	mov	r4, r2
 800defe:	4605      	mov	r5, r0
 800df00:	b118      	cbz	r0, 800df0a <__swbuf_r+0x12>
 800df02:	6a03      	ldr	r3, [r0, #32]
 800df04:	b90b      	cbnz	r3, 800df0a <__swbuf_r+0x12>
 800df06:	f7ff fa41 	bl	800d38c <__sinit>
 800df0a:	69a3      	ldr	r3, [r4, #24]
 800df0c:	60a3      	str	r3, [r4, #8]
 800df0e:	89a3      	ldrh	r3, [r4, #12]
 800df10:	071a      	lsls	r2, r3, #28
 800df12:	d501      	bpl.n	800df18 <__swbuf_r+0x20>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	b943      	cbnz	r3, 800df2a <__swbuf_r+0x32>
 800df18:	4621      	mov	r1, r4
 800df1a:	4628      	mov	r0, r5
 800df1c:	f000 f82a 	bl	800df74 <__swsetup_r>
 800df20:	b118      	cbz	r0, 800df2a <__swbuf_r+0x32>
 800df22:	f04f 37ff 	mov.w	r7, #4294967295
 800df26:	4638      	mov	r0, r7
 800df28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	6922      	ldr	r2, [r4, #16]
 800df2e:	1a98      	subs	r0, r3, r2
 800df30:	6963      	ldr	r3, [r4, #20]
 800df32:	b2f6      	uxtb	r6, r6
 800df34:	4283      	cmp	r3, r0
 800df36:	4637      	mov	r7, r6
 800df38:	dc05      	bgt.n	800df46 <__swbuf_r+0x4e>
 800df3a:	4621      	mov	r1, r4
 800df3c:	4628      	mov	r0, r5
 800df3e:	f7ff fcbd 	bl	800d8bc <_fflush_r>
 800df42:	2800      	cmp	r0, #0
 800df44:	d1ed      	bne.n	800df22 <__swbuf_r+0x2a>
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	3b01      	subs	r3, #1
 800df4a:	60a3      	str	r3, [r4, #8]
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	1c5a      	adds	r2, r3, #1
 800df50:	6022      	str	r2, [r4, #0]
 800df52:	701e      	strb	r6, [r3, #0]
 800df54:	6962      	ldr	r2, [r4, #20]
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	429a      	cmp	r2, r3
 800df5a:	d004      	beq.n	800df66 <__swbuf_r+0x6e>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	07db      	lsls	r3, r3, #31
 800df60:	d5e1      	bpl.n	800df26 <__swbuf_r+0x2e>
 800df62:	2e0a      	cmp	r6, #10
 800df64:	d1df      	bne.n	800df26 <__swbuf_r+0x2e>
 800df66:	4621      	mov	r1, r4
 800df68:	4628      	mov	r0, r5
 800df6a:	f7ff fca7 	bl	800d8bc <_fflush_r>
 800df6e:	2800      	cmp	r0, #0
 800df70:	d0d9      	beq.n	800df26 <__swbuf_r+0x2e>
 800df72:	e7d6      	b.n	800df22 <__swbuf_r+0x2a>

0800df74 <__swsetup_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	4b29      	ldr	r3, [pc, #164]	@ (800e01c <__swsetup_r+0xa8>)
 800df78:	4605      	mov	r5, r0
 800df7a:	6818      	ldr	r0, [r3, #0]
 800df7c:	460c      	mov	r4, r1
 800df7e:	b118      	cbz	r0, 800df88 <__swsetup_r+0x14>
 800df80:	6a03      	ldr	r3, [r0, #32]
 800df82:	b90b      	cbnz	r3, 800df88 <__swsetup_r+0x14>
 800df84:	f7ff fa02 	bl	800d38c <__sinit>
 800df88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df8c:	0719      	lsls	r1, r3, #28
 800df8e:	d422      	bmi.n	800dfd6 <__swsetup_r+0x62>
 800df90:	06da      	lsls	r2, r3, #27
 800df92:	d407      	bmi.n	800dfa4 <__swsetup_r+0x30>
 800df94:	2209      	movs	r2, #9
 800df96:	602a      	str	r2, [r5, #0]
 800df98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df9c:	81a3      	strh	r3, [r4, #12]
 800df9e:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa2:	e033      	b.n	800e00c <__swsetup_r+0x98>
 800dfa4:	0758      	lsls	r0, r3, #29
 800dfa6:	d512      	bpl.n	800dfce <__swsetup_r+0x5a>
 800dfa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfaa:	b141      	cbz	r1, 800dfbe <__swsetup_r+0x4a>
 800dfac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfb0:	4299      	cmp	r1, r3
 800dfb2:	d002      	beq.n	800dfba <__swsetup_r+0x46>
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	f7ff fafd 	bl	800d5b4 <_free_r>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dfc4:	81a3      	strh	r3, [r4, #12]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	6063      	str	r3, [r4, #4]
 800dfca:	6923      	ldr	r3, [r4, #16]
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	f043 0308 	orr.w	r3, r3, #8
 800dfd4:	81a3      	strh	r3, [r4, #12]
 800dfd6:	6923      	ldr	r3, [r4, #16]
 800dfd8:	b94b      	cbnz	r3, 800dfee <__swsetup_r+0x7a>
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dfe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfe4:	d003      	beq.n	800dfee <__swsetup_r+0x7a>
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f000 f883 	bl	800e0f4 <__smakebuf_r>
 800dfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff2:	f013 0201 	ands.w	r2, r3, #1
 800dff6:	d00a      	beq.n	800e00e <__swsetup_r+0x9a>
 800dff8:	2200      	movs	r2, #0
 800dffa:	60a2      	str	r2, [r4, #8]
 800dffc:	6962      	ldr	r2, [r4, #20]
 800dffe:	4252      	negs	r2, r2
 800e000:	61a2      	str	r2, [r4, #24]
 800e002:	6922      	ldr	r2, [r4, #16]
 800e004:	b942      	cbnz	r2, 800e018 <__swsetup_r+0xa4>
 800e006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e00a:	d1c5      	bne.n	800df98 <__swsetup_r+0x24>
 800e00c:	bd38      	pop	{r3, r4, r5, pc}
 800e00e:	0799      	lsls	r1, r3, #30
 800e010:	bf58      	it	pl
 800e012:	6962      	ldrpl	r2, [r4, #20]
 800e014:	60a2      	str	r2, [r4, #8]
 800e016:	e7f4      	b.n	800e002 <__swsetup_r+0x8e>
 800e018:	2000      	movs	r0, #0
 800e01a:	e7f7      	b.n	800e00c <__swsetup_r+0x98>
 800e01c:	20006c64 	.word	0x20006c64

0800e020 <_raise_r>:
 800e020:	291f      	cmp	r1, #31
 800e022:	b538      	push	{r3, r4, r5, lr}
 800e024:	4605      	mov	r5, r0
 800e026:	460c      	mov	r4, r1
 800e028:	d904      	bls.n	800e034 <_raise_r+0x14>
 800e02a:	2316      	movs	r3, #22
 800e02c:	6003      	str	r3, [r0, #0]
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e036:	b112      	cbz	r2, 800e03e <_raise_r+0x1e>
 800e038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e03c:	b94b      	cbnz	r3, 800e052 <_raise_r+0x32>
 800e03e:	4628      	mov	r0, r5
 800e040:	f000 f830 	bl	800e0a4 <_getpid_r>
 800e044:	4622      	mov	r2, r4
 800e046:	4601      	mov	r1, r0
 800e048:	4628      	mov	r0, r5
 800e04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e04e:	f000 b817 	b.w	800e080 <_kill_r>
 800e052:	2b01      	cmp	r3, #1
 800e054:	d00a      	beq.n	800e06c <_raise_r+0x4c>
 800e056:	1c59      	adds	r1, r3, #1
 800e058:	d103      	bne.n	800e062 <_raise_r+0x42>
 800e05a:	2316      	movs	r3, #22
 800e05c:	6003      	str	r3, [r0, #0]
 800e05e:	2001      	movs	r0, #1
 800e060:	e7e7      	b.n	800e032 <_raise_r+0x12>
 800e062:	2100      	movs	r1, #0
 800e064:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e068:	4620      	mov	r0, r4
 800e06a:	4798      	blx	r3
 800e06c:	2000      	movs	r0, #0
 800e06e:	e7e0      	b.n	800e032 <_raise_r+0x12>

0800e070 <raise>:
 800e070:	4b02      	ldr	r3, [pc, #8]	@ (800e07c <raise+0xc>)
 800e072:	4601      	mov	r1, r0
 800e074:	6818      	ldr	r0, [r3, #0]
 800e076:	f7ff bfd3 	b.w	800e020 <_raise_r>
 800e07a:	bf00      	nop
 800e07c:	20006c64 	.word	0x20006c64

0800e080 <_kill_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d07      	ldr	r5, [pc, #28]	@ (800e0a0 <_kill_r+0x20>)
 800e084:	2300      	movs	r3, #0
 800e086:	4604      	mov	r4, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	4611      	mov	r1, r2
 800e08c:	602b      	str	r3, [r5, #0]
 800e08e:	f7f8 f9e1 	bl	8006454 <_kill>
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	d102      	bne.n	800e09c <_kill_r+0x1c>
 800e096:	682b      	ldr	r3, [r5, #0]
 800e098:	b103      	cbz	r3, 800e09c <_kill_r+0x1c>
 800e09a:	6023      	str	r3, [r4, #0]
 800e09c:	bd38      	pop	{r3, r4, r5, pc}
 800e09e:	bf00      	nop
 800e0a0:	20009b94 	.word	0x20009b94

0800e0a4 <_getpid_r>:
 800e0a4:	f7f8 b9ce 	b.w	8006444 <_getpid>

0800e0a8 <__swhatbuf_r>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b0:	2900      	cmp	r1, #0
 800e0b2:	b096      	sub	sp, #88	@ 0x58
 800e0b4:	4615      	mov	r5, r2
 800e0b6:	461e      	mov	r6, r3
 800e0b8:	da0d      	bge.n	800e0d6 <__swhatbuf_r+0x2e>
 800e0ba:	89a3      	ldrh	r3, [r4, #12]
 800e0bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0c0:	f04f 0100 	mov.w	r1, #0
 800e0c4:	bf14      	ite	ne
 800e0c6:	2340      	movne	r3, #64	@ 0x40
 800e0c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	6031      	str	r1, [r6, #0]
 800e0d0:	602b      	str	r3, [r5, #0]
 800e0d2:	b016      	add	sp, #88	@ 0x58
 800e0d4:	bd70      	pop	{r4, r5, r6, pc}
 800e0d6:	466a      	mov	r2, sp
 800e0d8:	f000 f848 	bl	800e16c <_fstat_r>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	dbec      	blt.n	800e0ba <__swhatbuf_r+0x12>
 800e0e0:	9901      	ldr	r1, [sp, #4]
 800e0e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0ea:	4259      	negs	r1, r3
 800e0ec:	4159      	adcs	r1, r3
 800e0ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0f2:	e7eb      	b.n	800e0cc <__swhatbuf_r+0x24>

0800e0f4 <__smakebuf_r>:
 800e0f4:	898b      	ldrh	r3, [r1, #12]
 800e0f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f8:	079d      	lsls	r5, r3, #30
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	d507      	bpl.n	800e110 <__smakebuf_r+0x1c>
 800e100:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	6123      	str	r3, [r4, #16]
 800e108:	2301      	movs	r3, #1
 800e10a:	6163      	str	r3, [r4, #20]
 800e10c:	b003      	add	sp, #12
 800e10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e110:	ab01      	add	r3, sp, #4
 800e112:	466a      	mov	r2, sp
 800e114:	f7ff ffc8 	bl	800e0a8 <__swhatbuf_r>
 800e118:	9f00      	ldr	r7, [sp, #0]
 800e11a:	4605      	mov	r5, r0
 800e11c:	4639      	mov	r1, r7
 800e11e:	4630      	mov	r0, r6
 800e120:	f7ff fabc 	bl	800d69c <_malloc_r>
 800e124:	b948      	cbnz	r0, 800e13a <__smakebuf_r+0x46>
 800e126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e12a:	059a      	lsls	r2, r3, #22
 800e12c:	d4ee      	bmi.n	800e10c <__smakebuf_r+0x18>
 800e12e:	f023 0303 	bic.w	r3, r3, #3
 800e132:	f043 0302 	orr.w	r3, r3, #2
 800e136:	81a3      	strh	r3, [r4, #12]
 800e138:	e7e2      	b.n	800e100 <__smakebuf_r+0xc>
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	6020      	str	r0, [r4, #0]
 800e13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e142:	81a3      	strh	r3, [r4, #12]
 800e144:	9b01      	ldr	r3, [sp, #4]
 800e146:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e14a:	b15b      	cbz	r3, 800e164 <__smakebuf_r+0x70>
 800e14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e150:	4630      	mov	r0, r6
 800e152:	f000 f81d 	bl	800e190 <_isatty_r>
 800e156:	b128      	cbz	r0, 800e164 <__smakebuf_r+0x70>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	f043 0301 	orr.w	r3, r3, #1
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	431d      	orrs	r5, r3
 800e168:	81a5      	strh	r5, [r4, #12]
 800e16a:	e7cf      	b.n	800e10c <__smakebuf_r+0x18>

0800e16c <_fstat_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d07      	ldr	r5, [pc, #28]	@ (800e18c <_fstat_r+0x20>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	4611      	mov	r1, r2
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	f7f8 f9cb 	bl	8006514 <_fstat>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d102      	bne.n	800e188 <_fstat_r+0x1c>
 800e182:	682b      	ldr	r3, [r5, #0]
 800e184:	b103      	cbz	r3, 800e188 <_fstat_r+0x1c>
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	bf00      	nop
 800e18c:	20009b94 	.word	0x20009b94

0800e190 <_isatty_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4d06      	ldr	r5, [pc, #24]	@ (800e1ac <_isatty_r+0x1c>)
 800e194:	2300      	movs	r3, #0
 800e196:	4604      	mov	r4, r0
 800e198:	4608      	mov	r0, r1
 800e19a:	602b      	str	r3, [r5, #0]
 800e19c:	f7f8 f9ca 	bl	8006534 <_isatty>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_isatty_r+0x1a>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_isatty_r+0x1a>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	20009b94 	.word	0x20009b94

0800e1b0 <_init>:
 800e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b2:	bf00      	nop
 800e1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b6:	bc08      	pop	{r3}
 800e1b8:	469e      	mov	lr, r3
 800e1ba:	4770      	bx	lr

0800e1bc <_fini>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	bf00      	nop
 800e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c2:	bc08      	pop	{r3}
 800e1c4:	469e      	mov	lr, r3
 800e1c6:	4770      	bx	lr
